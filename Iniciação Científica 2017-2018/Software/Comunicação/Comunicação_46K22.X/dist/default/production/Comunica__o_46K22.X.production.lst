

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri May 11 17:10:49 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    43                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    44                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    45  0000                     
    46                           ; Version 1.45
    47                           ; Generated 16/11/2017 GMT
    48                           ; 
    49                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    50                           ; All rights reserved.
    51                           ; 
    52                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    53                           ; 
    54                           ; Redistribution and use in source and binary forms, with or without modification, are
    55                           ; permitted provided that the following conditions are met:
    56                           ; 
    57                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    58                           ;        conditions and the following disclaimer.
    59                           ; 
    60                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    61                           ;        of conditions and the following disclaimer in the documentation and/or other
    62                           ;        materials provided with the distribution.
    63                           ; 
    64                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    65                           ;        software without specific prior written permission.
    66                           ; 
    67                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    68                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    69                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    70                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    71                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    72                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    73                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    74                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    75                           ; 
    76                           ; 
    77                           ; Code-generator required, PIC18F46K22 Definitions
    78                           ; 
    79                           ; SFR Addresses
    80  0000                     
    81                           	psect	idataBANK0
    82  001C42                     __pidataBANK0:
    83                           	opt stack 0
    84                           
    85                           ;initializer for _BAT
    86  001C42  000C               	dw	12
    87                           
    88                           ;initializer for _Lambda
    89  001C44  0001               	dw	1
    90  0000                     _TMR6	set	3916
    91  0000                     _T6CONbits	set	3914
    92  0000                     _TMR4	set	3923
    93  0000                     _T4CONbits	set	3921
    94  0000                     _TMR5H	set	3920
    95  0000                     _TMR5L	set	3919
    96  0000                     _T5CONbits	set	3918
    97  0000                     _ANSELE	set	3900
    98  0000                     _ANSELD	set	3899
    99  0000                     _ANSELC	set	3898
   100  0000                     _ANSELB	set	3897
   101  0000                     _ANSELA	set	3896
   102  0000                     _SSP2STATbits	set	3949
   103  0000                     _SSP2STAT	set	3949
   104  0000                     _SSP2CON1	set	3948
   105  0000                     _SSP2BUF	set	3951
   106  0000                     _SSP1STATbits	set	4039
   107  0000                     _SSP1STAT	set	4039
   108  0000                     _SSP1CON1	set	4038
   109  0000                     _SSP1BUF	set	4041
   110  0000                     _TMR0L	set	4054
   111  0000                     _TMR0H	set	4055
   112  0000                     _T0CONbits	set	4053
   113  0000                     _TMR2	set	4028
   114  0000                     _T2CONbits	set	4026
   115  0000                     _TMR3H	set	4019
   116  0000                     _TMR3L	set	4018
   117  0000                     _T3CONbits	set	4017
   118  0000                     _TMR1L	set	4046
   119  0000                     _TMR1H	set	4047
   120  0000                     _T1CONbits	set	4045
   121  0000                     _INTCON2bits	set	4081
   122  0000                     _ADRESH	set	4036
   123  0000                     _ADCON0bits	set	4034
   124  0000                     _ADCON1bits	set	4033
   125  0000                     _ADCON2bits	set	4032
   126  0000                     _RCREG2	set	3956
   127  0000                     _RCREG1	set	4014
   128  0000                     _TXREG2	set	3955
   129  0000                     _TXREG1	set	4013
   130  0000                     _BAUDCON2bits	set	3952
   131  0000                     _TXSTA2	set	3954
   132  0000                     _RCSTA2	set	3953
   133  0000                     _SPBRG1	set	4015
   134  0000                     _BAUDCON1bits	set	4024
   135  0000                     _TXSTA1	set	4012
   136  0000                     _RCSTA1	set	4011
   137  0000                     _LATAbits	set	3977
   138  0000                     _LATCbits	set	3979
   139  0000                     _INTCONbits	set	4082
   140  0000                     _PORTB	set	3969
   141  0000                     _PORTBbits	set	3969
   142  0000                     _PIE2bits	set	4000
   143  0000                     _PIR2bits	set	4001
   144  0000                     _PIE1bits	set	3997
   145  0000                     _PIR1bits	set	3998
   146  0000                     _TRISD3	set	31915
   147  0000                     _TRISD4	set	31916
   148  0000                     _TRISD1	set	31913
   149  0000                     _TRISD0	set	31912
   150  0000                     _TRISC5	set	31909
   151  0000                     _TRISC4	set	31908
   152  0000                     _TRISC3	set	31907
   153  0000                     _TRISA5	set	31893
   154  0000                     _SSP1IP	set	31995
   155  0000                     _TMR5IE	set	31721
   156  0000                     _TMR3IE	set	32001
   157  0000                     _TMR1IE	set	31976
   158  0000                     _TRISB2	set	31898
   159  0000                     _TRISB1	set	31897
   160  0000                     _TRISB0	set	31896
   161  0000                     _RC2IF	set	32037
   162  0000                     _RC1IF	set	31989
   163  0000                     _TX2IF	set	32036
   164  0000                     _TX1IF	set	31988
   165  0000                     _TX2IE	set	32028
   166  0000                     _RC2IE	set	32029
   167  0000                     _TRISD7	set	31919
   168  0000                     _TRISD6	set	31918
   169  0000                     _TX1IE	set	31980
   170  0000                     _RC1IE	set	31981
   171  0000                     _TRISC2	set	31906
   172  0000                     _TRISC0	set	31904
   173  0000                     _TRISC1	set	31905
   174  0000                     _TRISA0	set	31888
   175  0000                     _TRISB7	set	31903
   176  0000                     _TRISC6	set	31910
   177  0000                     _TRISC7	set	31911
   178                           
   179                           	psect	smallconst
   180  001000                     __psmallconst:
   181                           	opt stack 0
   182  001000  00                 	db	0
   183  001001                     STR_11:
   184  001001  28                 	db	40
   185  001002  20                 	db	32
   186  001003  53                 	db	83	;'S'
   187  001004  20                 	db	32
   188  001005  43                 	db	67	;'C'
   189  001006  20                 	db	32
   190  001007  00                 	db	0
   191  001008                     STR_12:
   192  001008  28                 	db	40
   193  001009  20                 	db	32
   194  00100A  53                 	db	83	;'S'
   195  00100B  20                 	db	32
   196  00100C  45                 	db	69	;'E'
   197  00100D  20                 	db	32
   198  00100E  00                 	db	0
   199  00100F                     STR_7:
   200  00100F  28                 	db	40
   201  001010  20                 	db	32
   202  001011  53                 	db	83	;'S'
   203  001012  20                 	db	32
   204  001013  49                 	db	73	;'I'
   205  001014  20                 	db	32
   206  001015  00                 	db	0
   207  001016                     STR_2:
   208  001016  28                 	db	40
   209  001017  20                 	db	32
   210  001018  53                 	db	83	;'S'
   211  001019  20                 	db	32
   212  00101A  4D                 	db	77	;'M'
   213  00101B  20                 	db	32
   214  00101C  00                 	db	0
   215  00101D                     STR_8:
   216  00101D  28                 	db	40
   217  00101E  20                 	db	32
   218  00101F  53                 	db	83	;'S'
   219  001020  20                 	db	32
   220  001021  4F                 	db	79	;'O'
   221  001022  20                 	db	32
   222  001023  00                 	db	0
   223  001024                     STR_1:
   224  001024  28                 	db	40
   225  001025  20                 	db	32
   226  001026  53                 	db	83	;'S'
   227  001027  20                 	db	32
   228  001028  50                 	db	80	;'P'
   229  001029  20                 	db	32
   230  00102A  00                 	db	0
   231  00102B                     STR_4:
   232  00102B  28                 	db	40
   233  00102C  20                 	db	32
   234  00102D  53                 	db	83	;'S'
   235  00102E  20                 	db	32
   236  00102F  52                 	db	82	;'R'
   237  001030  20                 	db	32
   238  001031  00                 	db	0
   239  001032                     STR_3:
   240  001032  28                 	db	40
   241  001033  20                 	db	32
   242  001034  53                 	db	83	;'S'
   243  001035  20                 	db	32
   244  001036  54                 	db	84	;'T'
   245  001037  20                 	db	32
   246  001038  00                 	db	0
   247  001039                     STR_5:
   248  001039  28                 	db	40
   249  00103A  20                 	db	32
   250  00103B  53                 	db	83	;'S'
   251  00103C  20                 	db	32
   252  00103D  56                 	db	86	;'V'
   253  00103E  20                 	db	32
   254  00103F  00                 	db	0
   255  001040                     STR_9:
   256  001040  28                 	db	40
   257  001041  20                 	db	32
   258  001042  53                 	db	83	;'S'
   259  001043  20                 	db	32
   260  001044  6C                 	db	108	;'l'
   261  001045  20                 	db	32
   262  001046  00                 	db	0
   263  001047                     STR_6:
   264  001047  28                 	db	40
   265  001048  20                 	db	32
   266  001049  53                 	db	83	;'S'
   267  00104A  20                 	db	32
   268  00104B  6D                 	db	109	;'m'
   269  00104C  20                 	db	32
   270  00104D  00                 	db	0
   271  0000                     
   272                           ; #config settings
   273  00104E  00                 	db	0	; dummy byte at the end
   274  0000                     
   275                           	psect	cinit
   276  0019EA                     __pcinit:
   277                           	opt stack 0
   278  0019EA                     start_initialization:
   279                           	opt stack 0
   280  0019EA                     __initialization:
   281                           	opt stack 0
   282                           
   283                           ; Initialize objects allocated to BANK0 (4 bytes)
   284                           ; load TBLPTR registers with __pidataBANK0
   285  0019EA  0E42               	movlw	low __pidataBANK0
   286  0019EC  6EF6               	movwf	tblptrl,c
   287  0019EE  0E1C               	movlw	high __pidataBANK0
   288  0019F0  6EF7               	movwf	tblptrh,c
   289  0019F2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   290  0019F4  6EF8               	movwf	tblptru,c
   291  0019F6  EE00  F0AE         	lfsr	0,__pdataBANK0
   292  0019FA  EE10 F004          	lfsr	1,4
   293  0019FE                     copy_data0:
   294  0019FE  0009               	tblrd		*+
   295  001A00  CFF5 FFEE          	movff	tablat,postinc0
   296  001A04  50E5               	movf	postdec1,w,c
   297  001A06  50E1               	movf	fsr1l,w,c
   298  001A08  E1FA               	bnz	copy_data0
   299                           
   300                           ; Clear objects allocated to BANK0 (54 bytes)
   301  001A0A  EE00  F060         	lfsr	0,__pbssBANK0
   302  001A0E  0E36               	movlw	54
   303  001A10                     clear_0:
   304  001A10  6AEE               	clrf	postinc0,c
   305  001A12  06E8               	decf	wreg,f,c
   306  001A14  E1FD               	bnz	clear_0
   307                           
   308                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   309  001A16  6A45               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   310                           
   311                           ; Clear objects allocated to COMRAM (37 bytes)
   312  001A18  EE00  F001         	lfsr	0,__pbssCOMRAM
   313  001A1C  0E25               	movlw	37
   314  001A1E                     clear_1:
   315  001A1E  6AEE               	clrf	postinc0,c
   316  001A20  06E8               	decf	wreg,f,c
   317  001A22  E1FD               	bnz	clear_1
   318  001A24                     end_of_initialization:
   319                           	opt stack 0
   320  001A24                     __end_of__initialization:
   321                           	opt stack 0
   322  001A24  9046               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   323  001A26  9246               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   324  001A28  0E00               	movlw	low (__Lmediumconst shr (0+16))
   325  001A2A  6EF8               	movwf	tblptru,c
   326  001A2C  0100               	movlb	0
   327  001A2E  EF28  F008         	goto	_main	;jump to C main() function
   328                           tblptru	equ	0xFF8
   329                           tblptrh	equ	0xFF7
   330                           tblptrl	equ	0xFF6
   331                           tablat	equ	0xFF5
   332                           postinc0	equ	0xFEE
   333                           wreg	equ	0xFE8
   334                           postdec1	equ	0xFE5
   335                           fsr1l	equ	0xFE1
   336                           
   337                           	psect	bitbssCOMRAM
   338  000228                     __pbitbssCOMRAM:
   339                           	opt stack 0
   340  000228                     _Linha_15:
   341                           	opt stack 0
   342  000228                     	ds	1
   343                           tblptru	equ	0xFF8
   344                           tblptrh	equ	0xFF7
   345                           tblptrl	equ	0xFF6
   346                           tablat	equ	0xFF5
   347                           postinc0	equ	0xFEE
   348                           wreg	equ	0xFE8
   349                           postdec1	equ	0xFE5
   350                           fsr1l	equ	0xFE1
   351                           
   352                           	psect	bssCOMRAM
   353  000001                     __pbssCOMRAM:
   354                           	opt stack 0
   355  000001                     _TimeUpdate:
   356                           	opt stack 0
   357  000001                     	ds	2
   358  000003                     _CountSerial:
   359                           	opt stack 0
   360  000003                     	ds	2
   361  000005                     _CountCANTemp:
   362                           	opt stack 0
   363  000005                     	ds	2
   364  000007                     _CountCANRot:
   365                           	opt stack 0
   366  000007                     	ds	2
   367  000009                     _TempMotor:
   368                           	opt stack 0
   369  000009                     	ds	2
   370  00000B                     _Rot2:
   371                           	opt stack 0
   372  00000B                     	ds	2
   373  00000D                     _rotacao:
   374                           	opt stack 0
   375  00000D                     	ds	2
   376  00000F                     _Estequiometria:
   377                           	opt stack 0
   378  00000F                     	ds	2
   379  000011                     _Sensor_comb:
   380                           	opt stack 0
   381  000011                     	ds	2
   382  000013                     _t_agua:
   383                           	opt stack 0
   384  000013                     	ds	2
   385  000015                     _t_ar_com:
   386                           	opt stack 0
   387  000015                     	ds	2
   388  000017                     _ref_vb:
   389                           	opt stack 0
   390  000017                     	ds	2
   391  000019                     _tempo_inj:
   392                           	opt stack 0
   393  000019                     	ds	2
   394  00001B                     _tempo_bob:
   395                           	opt stack 0
   396  00001B                     	ds	2
   397  00001D                     _ig_dente_14:
   398                           	opt stack 0
   399  00001D                     	ds	2
   400  00001F                     _map:
   401                           	opt stack 0
   402  00001F                     	ds	2
   403  000021                     _pedal_ad:
   404                           	opt stack 0
   405  000021                     	ds	2
   406  000023                     _spi_ctr:
   407                           	opt stack 0
   408  000023                     	ds	2
   409  000025                     _Select_Data:
   410                           	opt stack 0
   411  000025                     	ds	1
   412                           tblptru	equ	0xFF8
   413                           tblptrh	equ	0xFF7
   414                           tblptrl	equ	0xFF6
   415                           tablat	equ	0xFF5
   416                           postinc0	equ	0xFEE
   417                           wreg	equ	0xFE8
   418                           postdec1	equ	0xFE5
   419                           fsr1l	equ	0xFE1
   420                           
   421                           	psect	bssBANK0
   422  000060                     __pbssBANK0:
   423                           	opt stack 0
   424  000060                     _Old_Value:
   425                           	opt stack 0
   426  000060                     	ds	26
   427  00007A                     _valor:
   428                           	opt stack 0
   429  00007A                     	ds	24
   430  000092                     _rotacao_4:
   431                           	opt stack 0
   432  000092                     	ds	4
   433                           tblptru	equ	0xFF8
   434                           tblptrh	equ	0xFF7
   435                           tblptrl	equ	0xFF6
   436                           tablat	equ	0xFF5
   437                           postinc0	equ	0xFEE
   438                           wreg	equ	0xFE8
   439                           postdec1	equ	0xFE5
   440                           fsr1l	equ	0xFE1
   441                           
   442                           	psect	dataBANK0
   443  0000AE                     __pdataBANK0:
   444                           	opt stack 0
   445  0000AE                     _BAT:
   446                           	opt stack 0
   447  0000AE                     	ds	2
   448  0000B0                     _Lambda:
   449                           	opt stack 0
   450  0000B0                     	ds	2
   451                           tblptru	equ	0xFF8
   452                           tblptrh	equ	0xFF7
   453                           tblptrl	equ	0xFF6
   454                           tablat	equ	0xFF5
   455                           postinc0	equ	0xFEE
   456                           wreg	equ	0xFE8
   457                           postdec1	equ	0xFE5
   458                           fsr1l	equ	0xFE1
   459                           
   460                           	psect	cstackBANK0
   461  000096                     __pcstackBANK0:
   462                           	opt stack 0
   463  000096                     ??_PutRXRotation:
   464  000096                     ?___aldiv:
   465                           	opt stack 0
   466  000096                     ___lwdiv@counter:
   467                           	opt stack 0
   468  000096                     Putc_Text_TX1@frase:
   469                           	opt stack 0
   470  000096                     ___aldiv@dividend:
   471                           	opt stack 0
   472                           
   473                           ; 4 bytes @ 0x0
   474  000096                     	ds	1
   475  000097                     ___lwdiv@quotient:
   476                           	opt stack 0
   477                           
   478                           ; 2 bytes @ 0x1
   479  000097                     	ds	1
   480  000098                     ??_Putc_Text_TX1:
   481                           
   482                           ; 1 bytes @ 0x2
   483  000098                     	ds	1
   484  000099                     ??_PutRXTempMotor:
   485  000099                     Putc_TX1_Data@data:
   486                           	opt stack 0
   487                           
   488                           ; 2 bytes @ 0x3
   489  000099                     	ds	1
   490  00009A                     Putc_Text_TX1@tamanho:
   491                           	opt stack 0
   492  00009A                     ___aldiv@divisor:
   493                           	opt stack 0
   494                           
   495                           ; 4 bytes @ 0x4
   496  00009A                     	ds	1
   497  00009B                     Putc_Text_TX1@indice:
   498                           	opt stack 0
   499  00009B                     Putc_TX1_Data@vet:
   500                           	opt stack 0
   501                           
   502                           ; 5 bytes @ 0x5
   503  00009B                     	ds	3
   504  00009E                     Init1_RS232@velocity:
   505                           	opt stack 0
   506                           
   507                           ; 4 bytes @ 0x8
   508  00009E                     	ds	4
   509  0000A2                     Init1_RS232@mode:
   510                           	opt stack 0
   511                           
   512                           ; 2 bytes @ 0xC
   513  0000A2                     	ds	2
   514  0000A4                     Init1_RS232@value:
   515                           	opt stack 0
   516                           
   517                           ; 2 bytes @ 0xE
   518  0000A4                     	ds	2
   519  0000A6                     _Init1_RS232$2651:
   520                           	opt stack 0
   521                           
   522                           ; 4 bytes @ 0x10
   523  0000A6                     	ds	4
   524  0000AA                     ??_ConfigureHW:
   525                           
   526                           ; 1 bytes @ 0x14
   527  0000AA                     	ds	1
   528  0000AB                     ??_main:
   529                           
   530                           ; 1 bytes @ 0x15
   531  0000AB                     	ds	2
   532  0000AD                     main@i:
   533                           	opt stack 0
   534                           
   535                           ; 1 bytes @ 0x17
   536  0000AD                     	ds	1
   537                           tblptru	equ	0xFF8
   538                           tblptrh	equ	0xFF7
   539                           tblptrl	equ	0xFF6
   540                           tablat	equ	0xFF5
   541                           postinc0	equ	0xFEE
   542                           wreg	equ	0xFE8
   543                           postdec1	equ	0xFE5
   544                           fsr1l	equ	0xFE1
   545                           
   546                           	psect	cstackCOMRAM
   547  000026                     __pcstackCOMRAM:
   548                           	opt stack 0
   549  000026                     ?_Make16:
   550                           	opt stack 0
   551  000026                     Make16@data2:
   552                           	opt stack 0
   553  000026                     SLAVE_SPI_READ1@data:
   554                           	opt stack 0
   555  000026                     i2Set_Timer3@data_timer:
   556                           	opt stack 0
   557                           
   558                           ; 2 bytes @ 0x0
   559  000026                     	ds	2
   560  000028                     ??_Make16:
   561  000028                     
   562                           ; 1 bytes @ 0x2
   563  000028                     	ds	2
   564  00002A                     Make16@data1:
   565                           	opt stack 0
   566                           
   567                           ; 1 bytes @ 0x4
   568  00002A                     	ds	1
   569  00002B                     ??_isr:
   570                           
   571                           ; 1 bytes @ 0x5
   572  00002B                     	ds	20
   573  00003F                     ?_strlen:
   574                           	opt stack 0
   575  00003F                     ?_Update_CurrentValue:
   576                           	opt stack 0
   577  00003F                     ?___lwdiv:
   578                           	opt stack 0
   579  00003F                     ?___lwmod:
   580                           	opt stack 0
   581  00003F                     Putc_TX1@valor:
   582                           	opt stack 0
   583  00003F                     MASTER_SPI_WRITE2@dados:
   584                           	opt stack 0
   585  00003F                     ___aldiv@counter:
   586                           	opt stack 0
   587  00003F                     Update_CurrentValue@Old:
   588                           	opt stack 0
   589  00003F                     Update_OldValue@index:
   590                           	opt stack 0
   591  00003F                     Set_Timer3@data_timer:
   592                           	opt stack 0
   593  00003F                     ___lwdiv@dividend:
   594                           	opt stack 0
   595  00003F                     ___lwmod@dividend:
   596                           	opt stack 0
   597  00003F                     strlen@s:
   598                           	opt stack 0
   599                           
   600                           ; 2 bytes @ 0x19
   601  00003F                     	ds	1
   602  000040                     CAN_SPI2_WRITE@data:
   603                           	opt stack 0
   604  000040                     ___aldiv@sign:
   605                           	opt stack 0
   606                           
   607                           ; 1 bytes @ 0x1A
   608  000040                     	ds	1
   609  000041                     ??_strlen:
   610  000041                     CAN_SPI2_WRITE@addr:
   611                           	opt stack 0
   612  000041                     Update_CurrentValue@Current:
   613                           	opt stack 0
   614  000041                     Update_OldValue@NewValue:
   615                           	opt stack 0
   616  000041                     ___lwdiv@divisor:
   617                           	opt stack 0
   618  000041                     ___lwmod@divisor:
   619                           	opt stack 0
   620  000041                     ___aldiv@quotient:
   621                           	opt stack 0
   622                           
   623                           ; 4 bytes @ 0x1B
   624  000041                     	ds	1
   625  000042                     PutRXRotation@Rot:
   626                           	opt stack 0
   627                           
   628                           ; 2 bytes @ 0x1C
   629  000042                     	ds	1
   630  000043                     ___lwmod@counter:
   631                           	opt stack 0
   632  000043                     Update_CurrentValue@boReturn:
   633                           	opt stack 0
   634  000043                     PutRXTempMotor@Temp:
   635                           	opt stack 0
   636  000043                     strlen@cp:
   637                           	opt stack 0
   638                           
   639                           ; 2 bytes @ 0x1D
   640  000043                     	ds	1
   641  000044                     
   642                           ; 1 bytes @ 0x1E
   643  000044                     	ds	1
   644  000045                     tblptru	equ	0xFF8
   645                           tblptrh	equ	0xFF7
   646                           tblptrl	equ	0xFF6
   647                           tablat	equ	0xFF5
   648                           postinc0	equ	0xFEE
   649                           wreg	equ	0xFE8
   650                           postdec1	equ	0xFE5
   651                           fsr1l	equ	0xFE1
   652                           
   653                           ; 1 bytes @ 0x1F
   654 ;;
   655 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   656 ;;
   657 ;; *************** function _main *****************
   658 ;; Defined at:
   659 ;;		line 310 in file "main.c"
   660 ;; Parameters:    Size  Location     Type
   661 ;;		None
   662 ;; Auto vars:     Size  Location     Type
   663 ;;  i               1   23[BANK0 ] unsigned char 
   664 ;; Return value:  Size  Location     Type
   665 ;;                  1    wreg      void 
   666 ;; Registers used:
   667 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   668 ;; Tracked objects:
   669 ;;		On entry : 0/0
   670 ;;		On exit  : 0/0
   671 ;;		Unchanged: 0/0
   672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   674 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   675 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   676 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   677 ;;Total ram usage:        3 bytes
   678 ;; Hardware stack levels required when called:    6
   679 ;; This function calls:
   680 ;;		_ConfigureHW
   681 ;;		_PutRXRotation
   682 ;;		_PutRXTempMotor
   683 ;;		_Putc_TX1_Data
   684 ;;		_Putc_Text_TX1
   685 ;;		_Set_Timer3
   686 ;;		_Update_CurrentValue
   687 ;;		_Update_OldValue
   688 ;; This function is called by:
   689 ;;		Startup code after reset
   690 ;; This function uses a non-reentrant model
   691 ;;
   692                           
   693                           	psect	text0
   694  001050                     __ptext0:
   695                           	opt stack 0
   696  001050                     _main:
   697                           	opt stack 25
   698                           
   699                           ;main.c: 312: ConfigureHW();
   700                           
   701                           ;incstack = 0
   702  001050  EC6C  F00C         	call	_ConfigureHW	;wreg free
   703                           
   704                           ;main.c: 313: _delay((unsigned long)((10)*(40000000/4000.0)));
   705  001054  0E82               	movlw	130
   706  001056  0100               	movlb	0	; () banked
   707  001058  6FAB               	movwf	??_main& (0+255),b
   708  00105A  0EDD               	movlw	221
   709  00105C                     u1547:
   710  00105C  2EE8               	decfsz	wreg,f,c
   711  00105E  D7FE               	bra	u1547
   712  001060  2FAB               	decfsz	??_main& (0+255),f,b
   713  001062  D7FC               	bra	u1547
   714  001064  D000               	nop2	
   715                           
   716                           ;main.c: 315: (INTCONbits.GIE = 1);
   717  001066  8EF2               	bsf	intcon,7,c	;volatile
   718                           
   719                           ;main.c: 316: (INTCONbits.PEIE = 1);
   720  001068  8CF2               	bsf	intcon,6,c	;volatile
   721                           
   722                           ;main.c: 317: (PIE1bits.SSP1IE = 1);
   723  00106A  869D               	bsf	3997,3,c	;volatile
   724                           
   725                           ;main.c: 318: (PIE2bits.TMR3IE = 1);
   726  00106C  82A0               	bsf	4000,1,c	;volatile
   727                           
   728                           ;main.c: 319: Set_Timer3(55535);
   729  00106E  0ED8               	movlw	216
   730  001070  6E40               	movwf	Set_Timer3@data_timer+1,c
   731  001072  0EEF               	movlw	239
   732  001074  6E3F               	movwf	Set_Timer3@data_timer,c
   733  001076  EC13  F00E         	call	_Set_Timer3	;wreg free
   734                           
   735                           ;main.c: 321: LATCbits.LATC1 = 0;
   736  00107A  928B               	bcf	3979,1,c	;volatile
   737                           
   738                           ;main.c: 322: LATCbits.LATC0 = 0;
   739  00107C  908B               	bcf	3979,0,c	;volatile
   740                           
   741                           ;main.c: 323: LATAbits.LA0 = 1;
   742  00107E  8089               	bsf	3977,0,c	;volatile
   743                           
   744                           ;main.c: 324: LATCbits.LATC2 = 1;
   745  001080  848B               	bsf	3979,2,c	;volatile
   746  001082                     
   747                           ;main.c: 327: {
   748                           ;main.c: 328: if(PORTBbits.RB0)
   749  001082  A081               	btfss	3969,0,c	;volatile
   750  001084  D01C               	goto	l165
   751                           
   752                           ;main.c: 329: {
   753                           ;main.c: 330: if(!CountCANRot)
   754  001086  5007               	movf	_CountCANRot,w,c
   755  001088  1008               	iorwf	_CountCANRot+1,w,c
   756  00108A  A4D8               	btfss	status,2,c
   757  00108C  D00A               	goto	l164
   758                           
   759                           ;main.c: 331: {
   760                           ;main.c: 332: PutRXRotation(Rot2);
   761  00108E  C00B  F042         	movff	_Rot2,PutRXRotation@Rot
   762  001092  C00C  F043         	movff	_Rot2+1,PutRXRotation@Rot+1
   763  001096  EC19  F00C         	call	_PutRXRotation	;wreg free
   764                           
   765                           ;main.c: 333: CountCANRot = 10;
   766  00109A  0E00               	movlw	0
   767  00109C  6E08               	movwf	_CountCANRot+1,c
   768  00109E  0E0A               	movlw	10
   769  0010A0  6E07               	movwf	_CountCANRot,c
   770  0010A2                     l164:
   771                           
   772                           ;main.c: 334: }
   773                           ;main.c: 335: if(!CountCANTemp)
   774  0010A2  5005               	movf	_CountCANTemp,w,c
   775  0010A4  1006               	iorwf	_CountCANTemp+1,w,c
   776  0010A6  A4D8               	btfss	status,2,c
   777  0010A8  D00A               	goto	l165
   778                           
   779                           ;main.c: 336: {
   780                           ;main.c: 337: PutRXTempMotor(t_agua);
   781  0010AA  C013  F043         	movff	_t_agua,PutRXTempMotor@Temp
   782  0010AE  C014  F044         	movff	_t_agua+1,PutRXTempMotor@Temp+1
   783  0010B2  ECBD  F00B         	call	_PutRXTempMotor	;wreg free
   784                           
   785                           ;main.c: 338: CountCANTemp = 20;
   786  0010B6  0E00               	movlw	0
   787  0010B8  6E06               	movwf	_CountCANTemp+1,c
   788  0010BA  0E14               	movlw	20
   789  0010BC  6E05               	movwf	_CountCANTemp,c
   790  0010BE                     l165:
   791                           
   792                           ;main.c: 339: }
   793                           ;main.c: 340: }
   794                           ;main.c: 342: if(!TimeUpdate)
   795  0010BE  5001               	movf	_TimeUpdate,w,c
   796  0010C0  1002               	iorwf	_TimeUpdate+1,w,c
   797  0010C2  A4D8               	btfss	status,2,c
   798  0010C4  D02B               	goto	u1380
   799                           
   800                           ;main.c: 343: {
   801                           ;main.c: 344: unsigned char i = 0;
   802  0010C6  0E00               	movlw	0
   803  0010C8  0100               	movlb	0	; () banked
   804  0010CA  6FAD               	movwf	main@i& (0+255),b
   805                           
   806                           ;main.c: 345: TimeUpdate = 250;
   807  0010CC  0E00               	movlw	0
   808  0010CE  6E02               	movwf	_TimeUpdate+1,c
   809  0010D0  0EFA               	movlw	250
   810  0010D2  6E01               	movwf	_TimeUpdate,c
   811                           
   812                           ;main.c: 346: for(i = 0; i<=13 ;i++)
   813  0010D4  0E00               	movlw	0
   814  0010D6  6FAD               	movwf	main@i& (0+255),b
   815  0010D8                     l2942:
   816                           
   817                           ; BSR set to: 0
   818  0010D8  0E0D               	movlw	13
   819  0010DA  65AD               	cpfsgt	main@i& (0+255),b
   820  0010DC  D001               	goto	l167
   821  0010DE  D01E               	goto	u1380
   822  0010E0                     l167:
   823                           
   824                           ; BSR set to: 0
   825                           ;main.c: 347: {
   826                           ;main.c: 348: Old_Value[i] = Old_Value[i]+1;
   827                           
   828                           ; BSR set to: 0
   829  0010E0  51AD               	movf	main@i& (0+255),w,b
   830  0010E2  0D02               	mullw	2
   831  0010E4  0E60               	movlw	low _Old_Value
   832  0010E6  24F3               	addwf	prodl,w,c
   833  0010E8  6ED9               	movwf	fsr2l,c
   834  0010EA  0E00               	movlw	high _Old_Value
   835  0010EC  20F4               	addwfc	prodh,w,c
   836  0010EE  6EDA               	movwf	fsr2h,c
   837  0010F0  CFDE F0AB          	movff	postinc2,??_main
   838  0010F4  CFDD F0AC          	movff	postdec2,??_main+1
   839  0010F8  0E01               	movlw	1
   840  0010FA  27AB               	addwf	??_main& (0+255),f,b
   841  0010FC  0E00               	movlw	0
   842  0010FE  23AC               	addwfc	(??_main+1)& (0+255),f,b
   843  001100  51AD               	movf	main@i& (0+255),w,b
   844  001102  0D02               	mullw	2
   845  001104  0E60               	movlw	low _Old_Value
   846  001106  24F3               	addwf	prodl,w,c
   847  001108  6ED9               	movwf	fsr2l,c
   848  00110A  0E00               	movlw	high _Old_Value
   849  00110C  20F4               	addwfc	prodh,w,c
   850  00110E  6EDA               	movwf	fsr2h,c
   851  001110  C0AB  FFDE         	movff	??_main,postinc2
   852  001114  C0AC  FFDD         	movff	??_main+1,postdec2
   853                           
   854                           ; BSR set to: 0
   855  001118  2BAD               	incf	main@i& (0+255),f,b
   856  00111A  D7DE               	goto	l2942
   857  00111C                     u1380:
   858                           
   859                           ;main.c: 349: }
   860                           ;main.c: 350: }
   861                           ;main.c: 352: if(Select_Data >= Serial_DataMax)
   862                           
   863                           ; BSR set to: 0
   864                           
   865                           ; BSR set to: 0
   866  00111C  0E0C               	movlw	12
   867  00111E  6425               	cpfsgt	_Select_Data,c
   868  001120  D18B               	goto	l170
   869                           
   870                           ;main.c: 353: {
   871                           ;main.c: 354: Select_Data = Serial_Init;
   872  001122  0E00               	movlw	0
   873  001124  6E25               	movwf	_Select_Data,c
   874                           
   875                           ;main.c: 355: }
   876                           ;main.c: 357: switch(Select_Data)
   877  001126  D188               	goto	l170
   878  001128                     
   879                           ;main.c: 360: if(Update_CurrentValue(Old_Value[Serial_Pedal],pedal_ad))
   880  001128  C060  F03F         	movff	_Old_Value,Update_CurrentValue@Old
   881  00112C  C061  F040         	movff	_Old_Value+1,Update_CurrentValue@Old+1
   882  001130  C021  F041         	movff	_pedal_ad,Update_CurrentValue@Current
   883  001134  C022  F042         	movff	_pedal_ad+1,Update_CurrentValue@Current+1
   884  001138  EC92  F00D         	call	_Update_CurrentValue	;wreg free
   885  00113C  503F               	movf	?_Update_CurrentValue,w,c
   886  00113E  1040               	iorwf	?_Update_CurrentValue+1,w,c
   887  001140  B4D8               	btfsc	status,2,c
   888  001142  D79F               	goto	l162
   889                           
   890                           ;main.c: 361: {
   891                           ;main.c: 362: Putc_Text_TX1("( S P ");
   892  001144  0E24               	movlw	low STR_1
   893  001146  0100               	movlb	0	; () banked
   894  001148  6F96               	movwf	Putc_Text_TX1@frase& (0+255),b
   895  00114A  0E10               	movlw	high STR_1
   896  00114C  6F97               	movwf	(Putc_Text_TX1@frase+1)& (0+255),b
   897  00114E  ECCF  F00C         	call	_Putc_Text_TX1	;wreg free
   898                           
   899                           ;main.c: 363: Putc_TX1_Data(pedal_ad);
   900  001152  C021  F099         	movff	_pedal_ad,Putc_TX1_Data@data
   901  001156  C022  F09A         	movff	_pedal_ad+1,Putc_TX1_Data@data+1
   902  00115A  EC45  F00A         	call	_Putc_TX1_Data	;wreg free
   903                           
   904                           ;main.c: 364: Update_OldValue(Serial_Pedal,pedal_ad);
   905  00115E  0E00               	movlw	0
   906  001160  6E40               	movwf	Update_OldValue@index+1,c
   907  001162  0E00               	movlw	0
   908  001164  6E3F               	movwf	Update_OldValue@index,c
   909  001166  C021  F041         	movff	_pedal_ad,Update_OldValue@NewValue
   910  00116A  C022  F042         	movff	_pedal_ad+1,Update_OldValue@NewValue+1
   911  00116E  ECA7  F00D         	call	_Update_OldValue	;wreg free
   912                           
   913                           ;main.c: 375: break;
   914                           
   915                           ;main.c: 368: case Serial_Lambda:
   916                           
   917                           ;main.c: 365: }
   918                           ;main.c: 366: break;
   919  001172  D787               	goto	l162
   920  001174                     
   921                           ;main.c: 378: if(Update_CurrentValue(Old_Value[Serial_MAP],map))
   922  001174  C064  F03F         	movff	_Old_Value+4,Update_CurrentValue@Old
   923  001178  C065  F040         	movff	_Old_Value+5,Update_CurrentValue@Old+1
   924  00117C  C01F  F041         	movff	_map,Update_CurrentValue@Current
   925  001180  C020  F042         	movff	_map+1,Update_CurrentValue@Current+1
   926  001184  EC92  F00D         	call	_Update_CurrentValue	;wreg free
   927  001188  503F               	movf	?_Update_CurrentValue,w,c
   928  00118A  1040               	iorwf	?_Update_CurrentValue+1,w,c
   929  00118C  B4D8               	btfsc	status,2,c
   930  00118E  D779               	goto	l162
   931                           
   932                           ;main.c: 379: {
   933                           ;main.c: 380: Putc_Text_TX1("( S M ");
   934  001190  0E16               	movlw	low STR_2
   935  001192  0100               	movlb	0	; () banked
   936  001194  6F96               	movwf	Putc_Text_TX1@frase& (0+255),b
   937  001196  0E10               	movlw	high STR_2
   938  001198  6F97               	movwf	(Putc_Text_TX1@frase+1)& (0+255),b
   939  00119A  ECCF  F00C         	call	_Putc_Text_TX1	;wreg free
   940                           
   941                           ;main.c: 381: Putc_TX1_Data(map);
   942  00119E  C01F  F099         	movff	_map,Putc_TX1_Data@data
   943  0011A2  C020  F09A         	movff	_map+1,Putc_TX1_Data@data+1
   944  0011A6  EC45  F00A         	call	_Putc_TX1_Data	;wreg free
   945                           
   946                           ;main.c: 382: Update_OldValue(Serial_MAP,map);
   947  0011AA  0E00               	movlw	0
   948  0011AC  6E40               	movwf	Update_OldValue@index+1,c
   949  0011AE  0E02               	movlw	2
   950  0011B0  6E3F               	movwf	Update_OldValue@index,c
   951  0011B2  C01F  F041         	movff	_map,Update_OldValue@NewValue
   952  0011B6  C020  F042         	movff	_map+1,Update_OldValue@NewValue+1
   953  0011BA  ECA7  F00D         	call	_Update_OldValue	;wreg free
   954                           
   955                           ;main.c: 383: }
   956                           ;main.c: 384: break;
   957  0011BE  D761               	goto	l162
   958  0011C0                     
   959                           ;main.c: 387: if(Update_CurrentValue(Old_Value[Serial_Temp],t_ar_com))
   960  0011C0  C066  F03F         	movff	_Old_Value+6,Update_CurrentValue@Old
   961  0011C4  C067  F040         	movff	_Old_Value+7,Update_CurrentValue@Old+1
   962  0011C8  C015  F041         	movff	_t_ar_com,Update_CurrentValue@Current
   963  0011CC  C016  F042         	movff	_t_ar_com+1,Update_CurrentValue@Current+1
   964  0011D0  EC92  F00D         	call	_Update_CurrentValue	;wreg free
   965  0011D4  503F               	movf	?_Update_CurrentValue,w,c
   966  0011D6  1040               	iorwf	?_Update_CurrentValue+1,w,c
   967  0011D8  B4D8               	btfsc	status,2,c
   968  0011DA  D753               	goto	l162
   969                           
   970                           ;main.c: 388: {
   971                           ;main.c: 389: Putc_Text_TX1("( S T ");
   972  0011DC  0E32               	movlw	low STR_3
   973  0011DE  0100               	movlb	0	; () banked
   974  0011E0  6F96               	movwf	Putc_Text_TX1@frase& (0+255),b
   975  0011E2  0E10               	movlw	high STR_3
   976  0011E4  6F97               	movwf	(Putc_Text_TX1@frase+1)& (0+255),b
   977  0011E6  ECCF  F00C         	call	_Putc_Text_TX1	;wreg free
   978                           
   979                           ;main.c: 390: Putc_TX1_Data(t_ar_com);
   980  0011EA  C015  F099         	movff	_t_ar_com,Putc_TX1_Data@data
   981  0011EE  C016  F09A         	movff	_t_ar_com+1,Putc_TX1_Data@data+1
   982  0011F2  EC45  F00A         	call	_Putc_TX1_Data	;wreg free
   983                           
   984                           ;main.c: 391: Update_OldValue(Serial_Temp,t_ar_com);
   985  0011F6  0E00               	movlw	0
   986  0011F8  6E40               	movwf	Update_OldValue@index+1,c
   987  0011FA  0E03               	movlw	3
   988  0011FC  6E3F               	movwf	Update_OldValue@index,c
   989  0011FE  C015  F041         	movff	_t_ar_com,Update_OldValue@NewValue
   990  001202  C016  F042         	movff	_t_ar_com+1,Update_OldValue@NewValue+1
   991  001206  ECA7  F00D         	call	_Update_OldValue	;wreg free
   992                           
   993                           ;main.c: 392: }
   994                           ;main.c: 393: break;
   995  00120A  D73B               	goto	l162
   996  00120C                     
   997                           ;main.c: 396: if(Update_CurrentValue(Old_Value[Serial_Rot],rotacao))
   998  00120C  C068  F03F         	movff	_Old_Value+8,Update_CurrentValue@Old
   999  001210  C069  F040         	movff	_Old_Value+9,Update_CurrentValue@Old+1
  1000  001214  C00D  F041         	movff	_rotacao,Update_CurrentValue@Current
  1001  001218  C00E  F042         	movff	_rotacao+1,Update_CurrentValue@Current+1
  1002  00121C  EC92  F00D         	call	_Update_CurrentValue	;wreg free
  1003  001220  503F               	movf	?_Update_CurrentValue,w,c
  1004  001222  1040               	iorwf	?_Update_CurrentValue+1,w,c
  1005  001224  B4D8               	btfsc	status,2,c
  1006  001226  D72D               	goto	l162
  1007                           
  1008                           ;main.c: 397: {
  1009                           ;main.c: 398: Putc_Text_TX1("( S R ");
  1010  001228  0E2B               	movlw	low STR_4
  1011  00122A  0100               	movlb	0	; () banked
  1012  00122C  6F96               	movwf	Putc_Text_TX1@frase& (0+255),b
  1013  00122E  0E10               	movlw	high STR_4
  1014  001230  6F97               	movwf	(Putc_Text_TX1@frase+1)& (0+255),b
  1015  001232  ECCF  F00C         	call	_Putc_Text_TX1	;wreg free
  1016                           
  1017                           ;main.c: 399: Putc_TX1_Data(rotacao);
  1018  001236  C00D  F099         	movff	_rotacao,Putc_TX1_Data@data
  1019  00123A  C00E  F09A         	movff	_rotacao+1,Putc_TX1_Data@data+1
  1020  00123E  EC45  F00A         	call	_Putc_TX1_Data	;wreg free
  1021                           
  1022                           ;main.c: 400: Update_OldValue(Serial_Rot,rotacao);
  1023  001242  0E00               	movlw	0
  1024  001244  6E40               	movwf	Update_OldValue@index+1,c
  1025  001246  0E04               	movlw	4
  1026  001248  6E3F               	movwf	Update_OldValue@index,c
  1027  00124A  C00D  F041         	movff	_rotacao,Update_OldValue@NewValue
  1028  00124E  C00E  F042         	movff	_rotacao+1,Update_OldValue@NewValue+1
  1029  001252  ECA7  F00D         	call	_Update_OldValue	;wreg free
  1030                           
  1031                           ;main.c: 401: }
  1032                           ;main.c: 403: break;
  1033  001256  D715               	goto	l162
  1034  001258                     
  1035                           ;main.c: 406: if(Update_CurrentValue(Old_Value[Serial_VB],ref_vb))
  1036  001258  C06A  F03F         	movff	_Old_Value+10,Update_CurrentValue@Old
  1037  00125C  C06B  F040         	movff	_Old_Value+11,Update_CurrentValue@Old+1
  1038  001260  C017  F041         	movff	_ref_vb,Update_CurrentValue@Current
  1039  001264  C018  F042         	movff	_ref_vb+1,Update_CurrentValue@Current+1
  1040  001268  EC92  F00D         	call	_Update_CurrentValue	;wreg free
  1041  00126C  503F               	movf	?_Update_CurrentValue,w,c
  1042  00126E  1040               	iorwf	?_Update_CurrentValue+1,w,c
  1043  001270  B4D8               	btfsc	status,2,c
  1044  001272  D707               	goto	l162
  1045                           
  1046                           ;main.c: 407: {
  1047                           ;main.c: 408: Putc_Text_TX1("( S V ");
  1048  001274  0E39               	movlw	low STR_5
  1049  001276  0100               	movlb	0	; () banked
  1050  001278  6F96               	movwf	Putc_Text_TX1@frase& (0+255),b
  1051  00127A  0E10               	movlw	high STR_5
  1052  00127C  6F97               	movwf	(Putc_Text_TX1@frase+1)& (0+255),b
  1053  00127E  ECCF  F00C         	call	_Putc_Text_TX1	;wreg free
  1054                           
  1055                           ;main.c: 409: Putc_TX1_Data(ref_vb);
  1056  001282  C017  F099         	movff	_ref_vb,Putc_TX1_Data@data
  1057  001286  C018  F09A         	movff	_ref_vb+1,Putc_TX1_Data@data+1
  1058  00128A  EC45  F00A         	call	_Putc_TX1_Data	;wreg free
  1059                           
  1060                           ;main.c: 410: Update_OldValue(Serial_VB,ref_vb);
  1061  00128E  0E00               	movlw	0
  1062  001290  6E40               	movwf	Update_OldValue@index+1,c
  1063  001292  0E05               	movlw	5
  1064  001294  6E3F               	movwf	Update_OldValue@index,c
  1065  001296  C017  F041         	movff	_ref_vb,Update_OldValue@NewValue
  1066  00129A  C018  F042         	movff	_ref_vb+1,Update_OldValue@NewValue+1
  1067  00129E  ECA7  F00D         	call	_Update_OldValue	;wreg free
  1068                           
  1069                           ;main.c: 411: }
  1070                           ;main.c: 412: break;
  1071  0012A2  D6EF               	goto	l162
  1072  0012A4                     
  1073                           ;main.c: 415: if(Update_CurrentValue(Old_Value[Serial_Ag],t_agua))
  1074  0012A4  C06C  F03F         	movff	_Old_Value+12,Update_CurrentValue@Old
  1075  0012A8  C06D  F040         	movff	_Old_Value+13,Update_CurrentValue@Old+1
  1076  0012AC  C013  F041         	movff	_t_agua,Update_CurrentValue@Current
  1077  0012B0  C014  F042         	movff	_t_agua+1,Update_CurrentValue@Current+1
  1078  0012B4  EC92  F00D         	call	_Update_CurrentValue	;wreg free
  1079  0012B8  503F               	movf	?_Update_CurrentValue,w,c
  1080  0012BA  1040               	iorwf	?_Update_CurrentValue+1,w,c
  1081  0012BC  B4D8               	btfsc	status,2,c
  1082  0012BE  D6E1               	goto	l162
  1083                           
  1084                           ;main.c: 416: {
  1085                           ;main.c: 417: Putc_Text_TX1("( S m ");
  1086  0012C0  0E47               	movlw	low STR_6
  1087  0012C2  0100               	movlb	0	; () banked
  1088  0012C4  6F96               	movwf	Putc_Text_TX1@frase& (0+255),b
  1089  0012C6  0E10               	movlw	high STR_6
  1090  0012C8  6F97               	movwf	(Putc_Text_TX1@frase+1)& (0+255),b
  1091  0012CA  ECCF  F00C         	call	_Putc_Text_TX1	;wreg free
  1092                           
  1093                           ;main.c: 418: Putc_TX1_Data(t_agua);
  1094  0012CE  C013  F099         	movff	_t_agua,Putc_TX1_Data@data
  1095  0012D2  C014  F09A         	movff	_t_agua+1,Putc_TX1_Data@data+1
  1096  0012D6  EC45  F00A         	call	_Putc_TX1_Data	;wreg free
  1097                           
  1098                           ;main.c: 419: Update_OldValue(Serial_Ag,t_agua);
  1099  0012DA  0E00               	movlw	0
  1100  0012DC  6E40               	movwf	Update_OldValue@index+1,c
  1101  0012DE  0E06               	movlw	6
  1102  0012E0  6E3F               	movwf	Update_OldValue@index,c
  1103  0012E2  C013  F041         	movff	_t_agua,Update_OldValue@NewValue
  1104  0012E6  C014  F042         	movff	_t_agua+1,Update_OldValue@NewValue+1
  1105  0012EA  ECA7  F00D         	call	_Update_OldValue	;wreg free
  1106                           
  1107                           ;main.c: 420: }
  1108                           ;main.c: 421: break;
  1109  0012EE  D6C9               	goto	l162
  1110  0012F0                     
  1111                           ;main.c: 424: if(Update_CurrentValue(Old_Value[Serial_Inj],tempo_inj))
  1112  0012F0  C06E  F03F         	movff	_Old_Value+14,Update_CurrentValue@Old
  1113  0012F4  C06F  F040         	movff	_Old_Value+15,Update_CurrentValue@Old+1
  1114  0012F8  C019  F041         	movff	_tempo_inj,Update_CurrentValue@Current
  1115  0012FC  C01A  F042         	movff	_tempo_inj+1,Update_CurrentValue@Current+1
  1116  001300  EC92  F00D         	call	_Update_CurrentValue	;wreg free
  1117  001304  503F               	movf	?_Update_CurrentValue,w,c
  1118  001306  1040               	iorwf	?_Update_CurrentValue+1,w,c
  1119  001308  B4D8               	btfsc	status,2,c
  1120  00130A  D6BB               	goto	l162
  1121                           
  1122                           ;main.c: 425: {
  1123                           ;main.c: 426: Putc_Text_TX1("( S I ");
  1124  00130C  0E0F               	movlw	low STR_7
  1125  00130E  0100               	movlb	0	; () banked
  1126  001310  6F96               	movwf	Putc_Text_TX1@frase& (0+255),b
  1127  001312  0E10               	movlw	high STR_7
  1128  001314  6F97               	movwf	(Putc_Text_TX1@frase+1)& (0+255),b
  1129  001316  ECCF  F00C         	call	_Putc_Text_TX1	;wreg free
  1130                           
  1131                           ;main.c: 427: Putc_TX1_Data(tempo_inj);
  1132  00131A  C019  F099         	movff	_tempo_inj,Putc_TX1_Data@data
  1133  00131E  C01A  F09A         	movff	_tempo_inj+1,Putc_TX1_Data@data+1
  1134  001322  EC45  F00A         	call	_Putc_TX1_Data	;wreg free
  1135                           
  1136                           ;main.c: 428: Update_OldValue(Serial_Inj,tempo_inj);
  1137  001326  0E00               	movlw	0
  1138  001328  6E40               	movwf	Update_OldValue@index+1,c
  1139  00132A  0E07               	movlw	7
  1140  00132C  6E3F               	movwf	Update_OldValue@index,c
  1141  00132E  C019  F041         	movff	_tempo_inj,Update_OldValue@NewValue
  1142  001332  C01A  F042         	movff	_tempo_inj+1,Update_OldValue@NewValue+1
  1143  001336  ECA7  F00D         	call	_Update_OldValue	;wreg free
  1144                           
  1145                           ;main.c: 429: }
  1146                           ;main.c: 430: break;
  1147  00133A  D6A3               	goto	l162
  1148  00133C                     
  1149                           ;main.c: 433: if(Update_CurrentValue(Old_Value[Serial_Bob],tempo_bob))
  1150  00133C  C070  F03F         	movff	_Old_Value+16,Update_CurrentValue@Old
  1151  001340  C071  F040         	movff	_Old_Value+17,Update_CurrentValue@Old+1
  1152  001344  C01B  F041         	movff	_tempo_bob,Update_CurrentValue@Current
  1153  001348  C01C  F042         	movff	_tempo_bob+1,Update_CurrentValue@Current+1
  1154  00134C  EC92  F00D         	call	_Update_CurrentValue	;wreg free
  1155  001350  503F               	movf	?_Update_CurrentValue,w,c
  1156  001352  1040               	iorwf	?_Update_CurrentValue+1,w,c
  1157  001354  B4D8               	btfsc	status,2,c
  1158  001356  D695               	goto	l162
  1159                           
  1160                           ;main.c: 434: {
  1161                           ;main.c: 435: Putc_Text_TX1("( S O ");
  1162  001358  0E1D               	movlw	low STR_8
  1163  00135A  0100               	movlb	0	; () banked
  1164  00135C  6F96               	movwf	Putc_Text_TX1@frase& (0+255),b
  1165  00135E  0E10               	movlw	high STR_8
  1166  001360  6F97               	movwf	(Putc_Text_TX1@frase+1)& (0+255),b
  1167  001362  ECCF  F00C         	call	_Putc_Text_TX1	;wreg free
  1168                           
  1169                           ;main.c: 436: Putc_TX1_Data(tempo_bob);
  1170  001366  C01B  F099         	movff	_tempo_bob,Putc_TX1_Data@data
  1171  00136A  C01C  F09A         	movff	_tempo_bob+1,Putc_TX1_Data@data+1
  1172  00136E  EC45  F00A         	call	_Putc_TX1_Data	;wreg free
  1173                           
  1174                           ;main.c: 437: Update_OldValue(Serial_Bob,tempo_bob);
  1175  001372  0E00               	movlw	0
  1176  001374  6E40               	movwf	Update_OldValue@index+1,c
  1177  001376  0E08               	movlw	8
  1178  001378  6E3F               	movwf	Update_OldValue@index,c
  1179  00137A  C01B  F041         	movff	_tempo_bob,Update_OldValue@NewValue
  1180  00137E  C01C  F042         	movff	_tempo_bob+1,Update_OldValue@NewValue+1
  1181  001382  ECA7  F00D         	call	_Update_OldValue	;wreg free
  1182                           
  1183                           ;main.c: 448: break;
  1184                           
  1185                           ;main.c: 441: case Serial_Bat:
  1186                           
  1187                           ;main.c: 438: }
  1188                           ;main.c: 439: break;
  1189  001386  D67D               	goto	l162
  1190  001388                     l190:
  1191                           
  1192                           ;main.c: 451: if(Linha_15)
  1193  001388  A045               	btfss	_Linha_15/(0+8),_Linha_15& (0+7),c
  1194  00138A  D00F               	goto	l191
  1195                           
  1196                           ;main.c: 452: {
  1197                           ;main.c: 453: Putc_Text_TX1("( S l ");
  1198  00138C  0E40               	movlw	low STR_9
  1199  00138E  0100               	movlb	0	; () banked
  1200  001390  6F96               	movwf	Putc_Text_TX1@frase& (0+255),b
  1201  001392  0E10               	movlw	high STR_9
  1202  001394  6F97               	movwf	(Putc_Text_TX1@frase+1)& (0+255),b
  1203  001396  ECCF  F00C         	call	_Putc_Text_TX1	;wreg free
  1204                           
  1205                           ;main.c: 454: Putc_TX1_Data(1);
  1206  00139A  0E00               	movlw	0
  1207  00139C  0100               	movlb	0	; () banked
  1208  00139E  6F9A               	movwf	(Putc_TX1_Data@data+1)& (0+255),b
  1209  0013A0  0E01               	movlw	1
  1210  0013A2  6F99               	movwf	Putc_TX1_Data@data& (0+255),b
  1211  0013A4  EC45  F00A         	call	_Putc_TX1_Data	;wreg free
  1212                           
  1213                           ;main.c: 455: }
  1214  0013A8  D66C               	goto	l162
  1215  0013AA                     l191:
  1216                           
  1217                           ;main.c: 456: else
  1218                           ;main.c: 457: {
  1219                           ;main.c: 458: Putc_Text_TX1("( S l ");
  1220  0013AA  0E40               	movlw	low STR_9
  1221  0013AC  0100               	movlb	0	; () banked
  1222  0013AE  6F96               	movwf	Putc_Text_TX1@frase& (0+255),b
  1223  0013B0  0E10               	movlw	high STR_9
  1224  0013B2  6F97               	movwf	(Putc_Text_TX1@frase+1)& (0+255),b
  1225  0013B4  ECCF  F00C         	call	_Putc_Text_TX1	;wreg free
  1226                           
  1227                           ;main.c: 459: Putc_TX1_Data(0);
  1228  0013B8  0E00               	movlw	0
  1229  0013BA  0100               	movlb	0	; () banked
  1230  0013BC  6F9A               	movwf	(Putc_TX1_Data@data+1)& (0+255),b
  1231  0013BE  0E00               	movlw	0
  1232  0013C0  6F99               	movwf	Putc_TX1_Data@data& (0+255),b
  1233  0013C2  EC45  F00A         	call	_Putc_TX1_Data	;wreg free
  1234                           
  1235                           ;main.c: 460: }
  1236                           ;main.c: 461: break;
  1237  0013C6  D65D               	goto	l162
  1238  0013C8                     
  1239                           ;main.c: 464: if(Update_CurrentValue(Old_Value[Serial_Comb],Sensor_comb))
  1240  0013C8  C076  F03F         	movff	_Old_Value+22,Update_CurrentValue@Old
  1241  0013CC  C077  F040         	movff	_Old_Value+23,Update_CurrentValue@Old+1
  1242  0013D0  C011  F041         	movff	_Sensor_comb,Update_CurrentValue@Current
  1243  0013D4  C012  F042         	movff	_Sensor_comb+1,Update_CurrentValue@Current+1
  1244  0013D8  EC92  F00D         	call	_Update_CurrentValue	;wreg free
  1245  0013DC  503F               	movf	?_Update_CurrentValue,w,c
  1246  0013DE  1040               	iorwf	?_Update_CurrentValue+1,w,c
  1247  0013E0  B4D8               	btfsc	status,2,c
  1248  0013E2  D64F               	goto	l162
  1249                           
  1250                           ;main.c: 465: {
  1251                           ;main.c: 466: Putc_Text_TX1("( S C ");
  1252  0013E4  0E01               	movlw	low STR_11
  1253  0013E6  0100               	movlb	0	; () banked
  1254  0013E8  6F96               	movwf	Putc_Text_TX1@frase& (0+255),b
  1255  0013EA  0E10               	movlw	high STR_11
  1256  0013EC  6F97               	movwf	(Putc_Text_TX1@frase+1)& (0+255),b
  1257  0013EE  ECCF  F00C         	call	_Putc_Text_TX1	;wreg free
  1258                           
  1259                           ;main.c: 467: Putc_TX1_Data(Sensor_comb);
  1260  0013F2  C011  F099         	movff	_Sensor_comb,Putc_TX1_Data@data
  1261  0013F6  C012  F09A         	movff	_Sensor_comb+1,Putc_TX1_Data@data+1
  1262  0013FA  EC45  F00A         	call	_Putc_TX1_Data	;wreg free
  1263                           
  1264                           ;main.c: 468: }
  1265                           ;main.c: 469: break;
  1266  0013FE  D641               	goto	l162
  1267  001400                     
  1268                           ;main.c: 472: if(Update_CurrentValue(Old_Value[Serial_Esteq],Estequiometria))
  1269  001400  C078  F03F         	movff	_Old_Value+24,Update_CurrentValue@Old
  1270  001404  C079  F040         	movff	_Old_Value+25,Update_CurrentValue@Old+1
  1271  001408  C00F  F041         	movff	_Estequiometria,Update_CurrentValue@Current
  1272  00140C  C010  F042         	movff	_Estequiometria+1,Update_CurrentValue@Current+1
  1273  001410  EC92  F00D         	call	_Update_CurrentValue	;wreg free
  1274  001414  503F               	movf	?_Update_CurrentValue,w,c
  1275  001416  1040               	iorwf	?_Update_CurrentValue+1,w,c
  1276  001418  B4D8               	btfsc	status,2,c
  1277  00141A  D633               	goto	l162
  1278                           
  1279                           ;main.c: 473: {
  1280                           ;main.c: 474: Putc_Text_TX1("( S E ");
  1281  00141C  0E08               	movlw	low STR_12
  1282  00141E  0100               	movlb	0	; () banked
  1283  001420  6F96               	movwf	Putc_Text_TX1@frase& (0+255),b
  1284  001422  0E10               	movlw	high STR_12
  1285  001424  6F97               	movwf	(Putc_Text_TX1@frase+1)& (0+255),b
  1286  001426  ECCF  F00C         	call	_Putc_Text_TX1	;wreg free
  1287                           
  1288                           ;main.c: 475: Putc_TX1_Data(Estequiometria);
  1289  00142A  C00F  F099         	movff	_Estequiometria,Putc_TX1_Data@data
  1290  00142E  C010  F09A         	movff	_Estequiometria+1,Putc_TX1_Data@data+1
  1291  001432  EC45  F00A         	call	_Putc_TX1_Data	;wreg free
  1292                           
  1293                           ;main.c: 481: }
  1294                           
  1295                           ;main.c: 480: break;
  1296                           
  1297                           ;main.c: 479: default:
  1298                           
  1299                           ;main.c: 476: }
  1300                           ;main.c: 477: break;
  1301  001436  D625               	goto	l162
  1302  001438                     l170:
  1303  001438  5025               	movf	_Select_Data,w,c
  1304                           
  1305                           ; Switch size 1, requested type "space"
  1306                           ; Number of cases is 13, Range of values is 0 to 12
  1307                           ; switch strategies available:
  1308                           ; Name         Instructions Cycles
  1309                           ; simple_byte           40    21 (average)
  1310                           ;	Chosen strategy is simple_byte
  1311  00143A  0A00               	xorlw	0	; case 0
  1312  00143C  B4D8               	btfsc	status,2,c
  1313  00143E  D674               	goto	l171
  1314  001440  0A01               	xorlw	1	; case 1
  1315  001442  B4D8               	btfsc	status,2,c
  1316  001444  D61E               	goto	l162
  1317  001446  0A03               	xorlw	3	; case 2
  1318  001448  B4D8               	btfsc	status,2,c
  1319  00144A  D694               	goto	l175
  1320  00144C  0A01               	xorlw	1	; case 3
  1321  00144E  B4D8               	btfsc	status,2,c
  1322  001450  D6B7               	goto	l177
  1323  001452  0A07               	xorlw	7	; case 4
  1324  001454  B4D8               	btfsc	status,2,c
  1325  001456  D6DA               	goto	l179
  1326  001458  0A01               	xorlw	1	; case 5
  1327  00145A  B4D8               	btfsc	status,2,c
  1328  00145C  D6FD               	goto	l181
  1329  00145E  0A03               	xorlw	3	; case 6
  1330  001460  B4D8               	btfsc	status,2,c
  1331  001462  D720               	goto	l183
  1332  001464  0A01               	xorlw	1	; case 7
  1333  001466  B4D8               	btfsc	status,2,c
  1334  001468  D743               	goto	l185
  1335  00146A  0A0F               	xorlw	15	; case 8
  1336  00146C  B4D8               	btfsc	status,2,c
  1337  00146E  D766               	goto	l187
  1338  001470  0A01               	xorlw	1	; case 9
  1339  001472  B4D8               	btfsc	status,2,c
  1340  001474  D606               	goto	l162
  1341  001476  0A03               	xorlw	3	; case 10
  1342  001478  B4D8               	btfsc	status,2,c
  1343  00147A  D786               	goto	l190
  1344  00147C  0A01               	xorlw	1	; case 11
  1345  00147E  B4D8               	btfsc	status,2,c
  1346  001480  D7A3               	goto	l193
  1347  001482  0A07               	xorlw	7	; case 12
  1348  001484  B4D8               	btfsc	status,2,c
  1349  001486  D7BC               	goto	l195
  1350  001488  D5FC               	goto	l162
  1351  00148A                     __end_of_main:
  1352                           	opt stack 0
  1353                           tblptru	equ	0xFF8
  1354                           tblptrh	equ	0xFF7
  1355                           tblptrl	equ	0xFF6
  1356                           tablat	equ	0xFF5
  1357                           prodh	equ	0xFF4
  1358                           prodl	equ	0xFF3
  1359                           intcon	equ	0xFF2
  1360                           postinc0	equ	0xFEE
  1361                           wreg	equ	0xFE8
  1362                           postdec1	equ	0xFE5
  1363                           fsr1l	equ	0xFE1
  1364                           postinc2	equ	0xFDE
  1365                           postdec2	equ	0xFDD
  1366                           fsr2h	equ	0xFDA
  1367                           fsr2l	equ	0xFD9
  1368                           status	equ	0xFD8
  1369                           
  1370 ;; *************** function _Update_OldValue *****************
  1371 ;; Defined at:
  1372 ;;		line 265 in file "main.c"
  1373 ;; Parameters:    Size  Location     Type
  1374 ;;  index           2   25[COMRAM] unsigned int 
  1375 ;;  NewValue        2   27[COMRAM] unsigned int 
  1376 ;; Auto vars:     Size  Location     Type
  1377 ;;		None
  1378 ;; Return value:  Size  Location     Type
  1379 ;;                  1    wreg      void 
  1380 ;; Registers used:
  1381 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1382 ;; Tracked objects:
  1383 ;;		On entry : 0/0
  1384 ;;		On exit  : 0/0
  1385 ;;		Unchanged: 0/0
  1386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1387 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1390 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1391 ;;Total ram usage:        4 bytes
  1392 ;; Hardware stack levels used:    1
  1393 ;; Hardware stack levels required when called:    2
  1394 ;; This function calls:
  1395 ;;		Nothing
  1396 ;; This function is called by:
  1397 ;;		_main
  1398 ;; This function uses a non-reentrant model
  1399 ;;
  1400                           
  1401                           	psect	text1
  1402  001B4E                     __ptext1:
  1403                           	opt stack 0
  1404  001B4E                     _Update_OldValue:
  1405                           	opt stack 28
  1406                           
  1407                           ;main.c: 267: Old_Value[index] = NewValue;
  1408                           
  1409                           ;incstack = 0
  1410  001B4E  90D8               	bcf	status,0,c
  1411  001B50  343F               	rlcf	Update_OldValue@index,w,c
  1412  001B52  6ED9               	movwf	fsr2l,c
  1413  001B54  3440               	rlcf	Update_OldValue@index+1,w,c
  1414  001B56  6EDA               	movwf	fsr2h,c
  1415  001B58  0E60               	movlw	low _Old_Value
  1416  001B5A  26D9               	addwf	fsr2l,f,c
  1417  001B5C  0E00               	movlw	high _Old_Value
  1418  001B5E  22DA               	addwfc	fsr2h,f,c
  1419  001B60  C041  FFDE         	movff	Update_OldValue@NewValue,postinc2
  1420  001B64  C042  FFDD         	movff	Update_OldValue@NewValue+1,postdec2
  1421  001B68  0012               	return		;funcret
  1422  001B6A                     __end_of_Update_OldValue:
  1423                           	opt stack 0
  1424                           tblptru	equ	0xFF8
  1425                           tblptrh	equ	0xFF7
  1426                           tblptrl	equ	0xFF6
  1427                           tablat	equ	0xFF5
  1428                           prodh	equ	0xFF4
  1429                           prodl	equ	0xFF3
  1430                           intcon	equ	0xFF2
  1431                           postinc0	equ	0xFEE
  1432                           wreg	equ	0xFE8
  1433                           postdec1	equ	0xFE5
  1434                           fsr1l	equ	0xFE1
  1435                           postinc2	equ	0xFDE
  1436                           postdec2	equ	0xFDD
  1437                           fsr2h	equ	0xFDA
  1438                           fsr2l	equ	0xFD9
  1439                           status	equ	0xFD8
  1440                           
  1441 ;; *************** function _Update_CurrentValue *****************
  1442 ;; Defined at:
  1443 ;;		line 258 in file "main.c"
  1444 ;; Parameters:    Size  Location     Type
  1445 ;;  Old             2   25[COMRAM] unsigned int 
  1446 ;;  Current         2   27[COMRAM] unsigned int 
  1447 ;; Auto vars:     Size  Location     Type
  1448 ;;  boReturn        2   29[COMRAM] short 
  1449 ;; Return value:  Size  Location     Type
  1450 ;;                  2   25[COMRAM] short 
  1451 ;; Registers used:
  1452 ;;		wreg, status,2, status,0
  1453 ;; Tracked objects:
  1454 ;;		On entry : 0/0
  1455 ;;		On exit  : 0/0
  1456 ;;		Unchanged: 0/0
  1457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1458 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1459 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1461 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1462 ;;Total ram usage:        6 bytes
  1463 ;; Hardware stack levels used:    1
  1464 ;; Hardware stack levels required when called:    2
  1465 ;; This function calls:
  1466 ;;		Nothing
  1467 ;; This function is called by:
  1468 ;;		_main
  1469 ;; This function uses a non-reentrant model
  1470 ;;
  1471                           
  1472                           	psect	text2
  1473  001B24                     __ptext2:
  1474                           	opt stack 0
  1475  001B24                     _Update_CurrentValue:
  1476                           	opt stack 28
  1477                           
  1478                           ;main.c: 260: short boReturn = 0;
  1479                           
  1480                           ;incstack = 0
  1481  001B24  0E00               	movlw	0
  1482  001B26  6E44               	movwf	Update_CurrentValue@boReturn+1,c
  1483  001B28  0E00               	movlw	0
  1484  001B2A  6E43               	movwf	Update_CurrentValue@boReturn,c
  1485                           
  1486                           ;main.c: 261: boReturn = (Current != Old);
  1487  001B2C  503F               	movf	Update_CurrentValue@Old,w,c
  1488  001B2E  1841               	xorwf	Update_CurrentValue@Current,w,c
  1489  001B30  E104               	bnz	u1301
  1490  001B32  5040               	movf	Update_CurrentValue@Old+1,w,c
  1491  001B34  1842               	xorwf	Update_CurrentValue@Current+1,w,c
  1492  001B36  B4D8               	btfsc	status,2,c
  1493  001B38  D002               	goto	u1300
  1494  001B3A                     u1301:
  1495  001B3A  0E01               	movlw	1
  1496  001B3C  D001               	goto	u1310
  1497  001B3E                     u1300:
  1498  001B3E  0E00               	movlw	0
  1499  001B40                     u1310:
  1500  001B40  6E43               	movwf	Update_CurrentValue@boReturn,c
  1501  001B42  6A44               	clrf	Update_CurrentValue@boReturn+1,c
  1502                           
  1503                           ;main.c: 262: return boReturn;
  1504  001B44  C043  F03F         	movff	Update_CurrentValue@boReturn,?_Update_CurrentValue
  1505  001B48  C044  F040         	movff	Update_CurrentValue@boReturn+1,?_Update_CurrentValue+1
  1506  001B4C  0012               	return	
  1507  001B4E                     __end_of_Update_CurrentValue:
  1508                           	opt stack 0
  1509                           tblptru	equ	0xFF8
  1510                           tblptrh	equ	0xFF7
  1511                           tblptrl	equ	0xFF6
  1512                           tablat	equ	0xFF5
  1513                           prodh	equ	0xFF4
  1514                           prodl	equ	0xFF3
  1515                           intcon	equ	0xFF2
  1516                           postinc0	equ	0xFEE
  1517                           wreg	equ	0xFE8
  1518                           postdec1	equ	0xFE5
  1519                           fsr1l	equ	0xFE1
  1520                           postinc2	equ	0xFDE
  1521                           postdec2	equ	0xFDD
  1522                           fsr2h	equ	0xFDA
  1523                           fsr2l	equ	0xFD9
  1524                           status	equ	0xFD8
  1525                           
  1526 ;; *************** function _Set_Timer3 *****************
  1527 ;; Defined at:
  1528 ;;		line 71 in file "TIMERS_XC8.c"
  1529 ;; Parameters:    Size  Location     Type
  1530 ;;  data_timer      2   25[COMRAM] unsigned int 
  1531 ;; Auto vars:     Size  Location     Type
  1532 ;;		None
  1533 ;; Return value:  Size  Location     Type
  1534 ;;                  1    wreg      void 
  1535 ;; Registers used:
  1536 ;;		wreg, status,2
  1537 ;; Tracked objects:
  1538 ;;		On entry : 0/0
  1539 ;;		On exit  : 0/0
  1540 ;;		Unchanged: 0/0
  1541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1542 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1545 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1546 ;;Total ram usage:        2 bytes
  1547 ;; Hardware stack levels used:    1
  1548 ;; Hardware stack levels required when called:    2
  1549 ;; This function calls:
  1550 ;;		Nothing
  1551 ;; This function is called by:
  1552 ;;		_main
  1553 ;; This function uses a non-reentrant model
  1554 ;;
  1555                           
  1556                           	psect	text3
  1557  001C26                     __ptext3:
  1558                           	opt stack 0
  1559  001C26                     _Set_Timer3:
  1560                           	opt stack 28
  1561                           
  1562                           ;TIMERS_XC8.c: 73: TMR3H = data_timer >> 8;
  1563                           
  1564                           ;incstack = 0
  1565  001C26  5040               	movf	Set_Timer3@data_timer+1,w,c
  1566  001C28  6EB3               	movwf	4019,c	;volatile
  1567                           
  1568                           ;TIMERS_XC8.c: 74: TMR3L = data_timer & 0x00FF;
  1569  001C2A  C03F  FFB2         	movff	Set_Timer3@data_timer,4018	;volatile
  1570  001C2E  0012               	return		;funcret
  1571  001C30                     __end_of_Set_Timer3:
  1572                           	opt stack 0
  1573                           tblptru	equ	0xFF8
  1574                           tblptrh	equ	0xFF7
  1575                           tblptrl	equ	0xFF6
  1576                           tablat	equ	0xFF5
  1577                           prodh	equ	0xFF4
  1578                           prodl	equ	0xFF3
  1579                           intcon	equ	0xFF2
  1580                           postinc0	equ	0xFEE
  1581                           wreg	equ	0xFE8
  1582                           postdec1	equ	0xFE5
  1583                           fsr1l	equ	0xFE1
  1584                           postinc2	equ	0xFDE
  1585                           postdec2	equ	0xFDD
  1586                           fsr2h	equ	0xFDA
  1587                           fsr2l	equ	0xFD9
  1588                           status	equ	0xFD8
  1589                           
  1590 ;; *************** function _Putc_Text_TX1 *****************
  1591 ;; Defined at:
  1592 ;;		line 75 in file "RS232_K22.c"
  1593 ;; Parameters:    Size  Location     Type
  1594 ;;  frase           2    0[BANK0 ] PTR const unsigned char 
  1595 ;;		 -> STR_12(7), STR_11(7), STR_10(7), STR_9(7), 
  1596 ;;		 -> STR_8(7), STR_7(7), STR_6(7), STR_5(7), 
  1597 ;;		 -> STR_4(7), STR_3(7), STR_2(7), STR_1(7), 
  1598 ;; Auto vars:     Size  Location     Type
  1599 ;;  indice          1    5[BANK0 ] unsigned char 
  1600 ;;  tamanho         1    4[BANK0 ] unsigned char 
  1601 ;; Return value:  Size  Location     Type
  1602 ;;                  1    wreg      void 
  1603 ;; Registers used:
  1604 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1605 ;; Tracked objects:
  1606 ;;		On entry : 0/0
  1607 ;;		On exit  : 0/0
  1608 ;;		Unchanged: 0/0
  1609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1610 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1611 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1612 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1613 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1614 ;;Total ram usage:        6 bytes
  1615 ;; Hardware stack levels used:    1
  1616 ;; Hardware stack levels required when called:    3
  1617 ;; This function calls:
  1618 ;;		_Putc_TX1
  1619 ;;		_strlen
  1620 ;; This function is called by:
  1621 ;;		_main
  1622 ;; This function uses a non-reentrant model
  1623 ;;
  1624                           
  1625                           	psect	text4
  1626  00199E                     __ptext4:
  1627                           	opt stack 0
  1628  00199E                     _Putc_Text_TX1:
  1629                           	opt stack 27
  1630                           
  1631                           ;RS232_K22.c: 77: char indice = 0;
  1632                           
  1633                           ;incstack = 0
  1634  00199E  0E00               	movlw	0
  1635  0019A0  0100               	movlb	0	; () banked
  1636  0019A2  6F9B               	movwf	Putc_Text_TX1@indice& (0+255),b
  1637                           
  1638                           ; BSR set to: 0
  1639                           ;RS232_K22.c: 78: char tamanho = strlen(frase);
  1640  0019A4  C096  F03F         	movff	Putc_Text_TX1@frase,strlen@s
  1641  0019A8  C097  F040         	movff	Putc_Text_TX1@frase+1,strlen@s+1
  1642  0019AC  EC3A  F00D         	call	_strlen	;wreg free
  1643  0019B0  503F               	movf	?_strlen,w,c
  1644  0019B2  0100               	movlb	0	; () banked
  1645  0019B4  6F9A               	movwf	Putc_Text_TX1@tamanho& (0+255),b
  1646                           
  1647                           ;RS232_K22.c: 79: while(indice < tamanho )
  1648  0019B6  D014               	goto	l275
  1649  0019B8                     
  1650                           ; BSR set to: 0
  1651                           ;RS232_K22.c: 80: {
  1652                           ;RS232_K22.c: 81: Putc_TX1(frase[indice]);
  1653                           
  1654                           ; BSR set to: 0
  1655  0019B8  519B               	movf	Putc_Text_TX1@indice& (0+255),w,b
  1656  0019BA  0D01               	mullw	1
  1657  0019BC  C096  F098         	movff	Putc_Text_TX1@frase,??_Putc_Text_TX1
  1658  0019C0  C097  F099         	movff	Putc_Text_TX1@frase+1,??_Putc_Text_TX1+1
  1659  0019C4  50F3               	movf	prodl,w,c
  1660  0019C6  2798               	addwf	??_Putc_Text_TX1& (0+255),f,b
  1661  0019C8  50F4               	movf	prodh,w,c
  1662  0019CA  2399               	addwfc	(??_Putc_Text_TX1+1)& (0+255),f,b
  1663  0019CC  C098  FFF6         	movff	??_Putc_Text_TX1,tblptrl
  1664  0019D0  C099  FFF7         	movff	??_Putc_Text_TX1+1,tblptrh
  1665  0019D4                     	if	0	;tblptru may be non-zero
  1666  0019D4                     	endif
  1667  0019D4                     	if	0	;tblptru may be non-zero
  1668  0019D4                     	endif
  1669  0019D4  0008               	tblrd		*
  1670  0019D6  50F5               	movf	tablat,w,c
  1671  0019D8  ECE8  F00D         	call	_Putc_TX1
  1672                           
  1673                           ;RS232_K22.c: 82: indice++;
  1674  0019DC  0100               	movlb	0	; () banked
  1675  0019DE  2B9B               	incf	Putc_Text_TX1@indice& (0+255),f,b
  1676  0019E0                     l275:
  1677                           
  1678                           ; BSR set to: 0
  1679                           
  1680                           ; BSR set to: 0
  1681  0019E0  519A               	movf	Putc_Text_TX1@tamanho& (0+255),w,b
  1682  0019E2  5D9B               	subwf	Putc_Text_TX1@indice& (0+255),w,b
  1683  0019E4  B0D8               	btfsc	status,0,c
  1684  0019E6  0012               	return	
  1685  0019E8  D7E7               	goto	l276
  1686  0019EA                     __end_of_Putc_Text_TX1:
  1687                           	opt stack 0
  1688                           tblptru	equ	0xFF8
  1689                           tblptrh	equ	0xFF7
  1690                           tblptrl	equ	0xFF6
  1691                           tablat	equ	0xFF5
  1692                           prodh	equ	0xFF4
  1693                           prodl	equ	0xFF3
  1694                           intcon	equ	0xFF2
  1695                           postinc0	equ	0xFEE
  1696                           wreg	equ	0xFE8
  1697                           postdec1	equ	0xFE5
  1698                           fsr1l	equ	0xFE1
  1699                           postinc2	equ	0xFDE
  1700                           postdec2	equ	0xFDD
  1701                           fsr2h	equ	0xFDA
  1702                           fsr2l	equ	0xFD9
  1703                           status	equ	0xFD8
  1704                           
  1705 ;; *************** function _strlen *****************
  1706 ;; Defined at:
  1707 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strlen.c"
  1708 ;; Parameters:    Size  Location     Type
  1709 ;;  s               2   25[COMRAM] PTR const unsigned char 
  1710 ;;		 -> STR_12(7), STR_11(7), STR_10(7), STR_9(7), 
  1711 ;;		 -> STR_8(7), STR_7(7), STR_6(7), STR_5(7), 
  1712 ;;		 -> STR_4(7), STR_3(7), STR_2(7), STR_1(7), 
  1713 ;; Auto vars:     Size  Location     Type
  1714 ;;  cp              2   29[COMRAM] PTR const unsigned char 
  1715 ;;		 -> STR_12(7), STR_11(7), STR_10(7), STR_9(7), 
  1716 ;;		 -> STR_8(7), STR_7(7), STR_6(7), STR_5(7), 
  1717 ;;		 -> STR_4(7), STR_3(7), STR_2(7), STR_1(7), 
  1718 ;; Return value:  Size  Location     Type
  1719 ;;                  2   25[COMRAM] unsigned int 
  1720 ;; Registers used:
  1721 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  1722 ;; Tracked objects:
  1723 ;;		On entry : 0/0
  1724 ;;		On exit  : 0/0
  1725 ;;		Unchanged: 0/0
  1726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1727 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1728 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1729 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1730 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1731 ;;Total ram usage:        6 bytes
  1732 ;; Hardware stack levels used:    1
  1733 ;; Hardware stack levels required when called:    2
  1734 ;; This function calls:
  1735 ;;		Nothing
  1736 ;; This function is called by:
  1737 ;;		_Putc_Text_TX1
  1738 ;;		_Putc_Text_TX2
  1739 ;; This function uses a non-reentrant model
  1740 ;;
  1741                           
  1742                           	psect	text5
  1743  001A74                     __ptext5:
  1744                           	opt stack 0
  1745  001A74                     _strlen:
  1746                           	opt stack 27
  1747                           
  1748                           ; BSR set to: 0
  1749                           ;incstack = 0
  1750  001A74  C03F  F043         	movff	strlen@s,strlen@cp
  1751  001A78  C040  F044         	movff	strlen@s+1,strlen@cp+1
  1752  001A7C  D002               	goto	l1118
  1753  001A7E  4A43               	infsnz	strlen@cp,f,c
  1754  001A80  2A44               	incf	strlen@cp+1,f,c
  1755  001A82                     l1118:
  1756  001A82  C043  FFF6         	movff	strlen@cp,tblptrl
  1757  001A86  C044  FFF7         	movff	strlen@cp+1,tblptrh
  1758  001A8A                     	if	0	;tblptru may be non-zero
  1759  001A8A                     	endif
  1760  001A8A                     	if	0	;tblptru may be non-zero
  1761  001A8A                     	endif
  1762  001A8A  0008               	tblrd		*
  1763  001A8C  50F5               	movf	tablat,w,c
  1764  001A8E  0900               	iorlw	0
  1765  001A90  A4D8               	btfss	status,2,c
  1766  001A92  D7F5               	goto	l1119
  1767  001A94  C03F  F041         	movff	strlen@s,??_strlen
  1768  001A98  C040  F042         	movff	strlen@s+1,??_strlen+1
  1769  001A9C  1E41               	comf	??_strlen,f,c
  1770  001A9E  1E42               	comf	??_strlen+1,f,c
  1771  001AA0  4A41               	infsnz	??_strlen,f,c
  1772  001AA2  2A42               	incf	??_strlen+1,f,c
  1773  001AA4  5043               	movf	strlen@cp,w,c
  1774  001AA6  2441               	addwf	??_strlen,w,c
  1775  001AA8  6E3F               	movwf	?_strlen,c
  1776  001AAA  5044               	movf	strlen@cp+1,w,c
  1777  001AAC  2042               	addwfc	??_strlen+1,w,c
  1778  001AAE  6E40               	movwf	?_strlen+1,c
  1779  001AB0  0012               	return	
  1780  001AB2                     __end_of_strlen:
  1781                           	opt stack 0
  1782                           tblptru	equ	0xFF8
  1783                           tblptrh	equ	0xFF7
  1784                           tblptrl	equ	0xFF6
  1785                           tablat	equ	0xFF5
  1786                           prodh	equ	0xFF4
  1787                           prodl	equ	0xFF3
  1788                           intcon	equ	0xFF2
  1789                           postinc0	equ	0xFEE
  1790                           wreg	equ	0xFE8
  1791                           postdec1	equ	0xFE5
  1792                           fsr1l	equ	0xFE1
  1793                           postinc2	equ	0xFDE
  1794                           postdec2	equ	0xFDD
  1795                           fsr2h	equ	0xFDA
  1796                           fsr2l	equ	0xFD9
  1797                           status	equ	0xFD8
  1798                           
  1799 ;; *************** function _Putc_TX1_Data *****************
  1800 ;; Defined at:
  1801 ;;		line 200 in file "main.c"
  1802 ;; Parameters:    Size  Location     Type
  1803 ;;  data            2    3[BANK0 ] unsigned int 
  1804 ;; Auto vars:     Size  Location     Type
  1805 ;;  vet             5    5[BANK0 ] unsigned char [5]
  1806 ;; Return value:  Size  Location     Type
  1807 ;;                  2    3[BANK0 ] unsigned int 
  1808 ;; Registers used:
  1809 ;;		wreg, status,2, status,0, cstack
  1810 ;; Tracked objects:
  1811 ;;		On entry : 0/0
  1812 ;;		On exit  : 0/0
  1813 ;;		Unchanged: 0/0
  1814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1815 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1816 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1818 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1819 ;;Total ram usage:        7 bytes
  1820 ;; Hardware stack levels used:    1
  1821 ;; Hardware stack levels required when called:    3
  1822 ;; This function calls:
  1823 ;;		_Putc_TX1
  1824 ;;		___lwdiv
  1825 ;;		___lwmod
  1826 ;; This function is called by:
  1827 ;;		_main
  1828 ;; This function uses a non-reentrant model
  1829 ;;
  1830                           
  1831                           	psect	text6
  1832  00148A                     __ptext6:
  1833                           	opt stack 0
  1834  00148A                     _Putc_TX1_Data:
  1835                           	opt stack 27
  1836                           
  1837                           ;main.c: 202: unsigned char vet[5];
  1838                           ;main.c: 204: vet[0] = (data/10000) + 0x30;
  1839                           
  1840                           ;incstack = 0
  1841  00148A  C099  F03F         	movff	Putc_TX1_Data@data,___lwdiv@dividend
  1842  00148E  C09A  F040         	movff	Putc_TX1_Data@data+1,___lwdiv@dividend+1
  1843  001492  0E27               	movlw	39
  1844  001494  6E42               	movwf	___lwdiv@divisor+1,c
  1845  001496  0E10               	movlw	16
  1846  001498  6E41               	movwf	___lwdiv@divisor,c
  1847  00149A  ECA5  F00C         	call	___lwdiv	;wreg free
  1848  00149E  503F               	movf	?___lwdiv,w,c
  1849  0014A0  0F30               	addlw	48
  1850  0014A2  0100               	movlb	0	; () banked
  1851  0014A4  6F9B               	movwf	Putc_TX1_Data@vet& (0+255),b
  1852                           
  1853                           ;main.c: 205: data = data%10000;
  1854  0014A6  C099  F03F         	movff	Putc_TX1_Data@data,___lwmod@dividend
  1855  0014AA  C09A  F040         	movff	Putc_TX1_Data@data+1,___lwmod@dividend+1
  1856  0014AE  0E27               	movlw	39
  1857  0014B0  6E42               	movwf	___lwmod@divisor+1,c
  1858  0014B2  0E10               	movlw	16
  1859  0014B4  6E41               	movwf	___lwmod@divisor,c
  1860  0014B6  EC19  F00D         	call	___lwmod	;wreg free
  1861  0014BA  C03F  F099         	movff	?___lwmod,Putc_TX1_Data@data
  1862  0014BE  C040  F09A         	movff	?___lwmod+1,Putc_TX1_Data@data+1
  1863                           
  1864                           ;main.c: 206: vet[1] = (data/1000) + 0x30;
  1865  0014C2  C099  F03F         	movff	Putc_TX1_Data@data,___lwdiv@dividend
  1866  0014C6  C09A  F040         	movff	Putc_TX1_Data@data+1,___lwdiv@dividend+1
  1867  0014CA  0E03               	movlw	3
  1868  0014CC  6E42               	movwf	___lwdiv@divisor+1,c
  1869  0014CE  0EE8               	movlw	232
  1870  0014D0  6E41               	movwf	___lwdiv@divisor,c
  1871  0014D2  ECA5  F00C         	call	___lwdiv	;wreg free
  1872  0014D6  503F               	movf	?___lwdiv,w,c
  1873  0014D8  0F30               	addlw	48
  1874  0014DA  0100               	movlb	0	; () banked
  1875  0014DC  6F9C               	movwf	(Putc_TX1_Data@vet+1)& (0+255),b
  1876                           
  1877                           ;main.c: 207: data = data%1000;
  1878  0014DE  C099  F03F         	movff	Putc_TX1_Data@data,___lwmod@dividend
  1879  0014E2  C09A  F040         	movff	Putc_TX1_Data@data+1,___lwmod@dividend+1
  1880  0014E6  0E03               	movlw	3
  1881  0014E8  6E42               	movwf	___lwmod@divisor+1,c
  1882  0014EA  0EE8               	movlw	232
  1883  0014EC  6E41               	movwf	___lwmod@divisor,c
  1884  0014EE  EC19  F00D         	call	___lwmod	;wreg free
  1885  0014F2  C03F  F099         	movff	?___lwmod,Putc_TX1_Data@data
  1886  0014F6  C040  F09A         	movff	?___lwmod+1,Putc_TX1_Data@data+1
  1887                           
  1888                           ;main.c: 208: vet[2] = (data/100) + 0x30;
  1889  0014FA  C099  F03F         	movff	Putc_TX1_Data@data,___lwdiv@dividend
  1890  0014FE  C09A  F040         	movff	Putc_TX1_Data@data+1,___lwdiv@dividend+1
  1891  001502  0E00               	movlw	0
  1892  001504  6E42               	movwf	___lwdiv@divisor+1,c
  1893  001506  0E64               	movlw	100
  1894  001508  6E41               	movwf	___lwdiv@divisor,c
  1895  00150A  ECA5  F00C         	call	___lwdiv	;wreg free
  1896  00150E  503F               	movf	?___lwdiv,w,c
  1897  001510  0F30               	addlw	48
  1898  001512  0100               	movlb	0	; () banked
  1899  001514  6F9D               	movwf	(Putc_TX1_Data@vet+2)& (0+255),b
  1900                           
  1901                           ;main.c: 209: data = data%100;
  1902  001516  C099  F03F         	movff	Putc_TX1_Data@data,___lwmod@dividend
  1903  00151A  C09A  F040         	movff	Putc_TX1_Data@data+1,___lwmod@dividend+1
  1904  00151E  0E00               	movlw	0
  1905  001520  6E42               	movwf	___lwmod@divisor+1,c
  1906  001522  0E64               	movlw	100
  1907  001524  6E41               	movwf	___lwmod@divisor,c
  1908  001526  EC19  F00D         	call	___lwmod	;wreg free
  1909  00152A  C03F  F099         	movff	?___lwmod,Putc_TX1_Data@data
  1910  00152E  C040  F09A         	movff	?___lwmod+1,Putc_TX1_Data@data+1
  1911                           
  1912                           ;main.c: 210: vet[3] = (data / 10) + 0x30;
  1913  001532  C099  F03F         	movff	Putc_TX1_Data@data,___lwdiv@dividend
  1914  001536  C09A  F040         	movff	Putc_TX1_Data@data+1,___lwdiv@dividend+1
  1915  00153A  0E00               	movlw	0
  1916  00153C  6E42               	movwf	___lwdiv@divisor+1,c
  1917  00153E  0E0A               	movlw	10
  1918  001540  6E41               	movwf	___lwdiv@divisor,c
  1919  001542  ECA5  F00C         	call	___lwdiv	;wreg free
  1920  001546  503F               	movf	?___lwdiv,w,c
  1921  001548  0F30               	addlw	48
  1922  00154A  0100               	movlb	0	; () banked
  1923  00154C  6F9E               	movwf	(Putc_TX1_Data@vet+3)& (0+255),b
  1924                           
  1925                           ;main.c: 211: vet[4] = (data%10) + 0x30;
  1926  00154E  C099  F03F         	movff	Putc_TX1_Data@data,___lwmod@dividend
  1927  001552  C09A  F040         	movff	Putc_TX1_Data@data+1,___lwmod@dividend+1
  1928  001556  0E00               	movlw	0
  1929  001558  6E42               	movwf	___lwmod@divisor+1,c
  1930  00155A  0E0A               	movlw	10
  1931  00155C  6E41               	movwf	___lwmod@divisor,c
  1932  00155E  EC19  F00D         	call	___lwmod	;wreg free
  1933  001562  503F               	movf	?___lwmod,w,c
  1934  001564  0F30               	addlw	48
  1935  001566  0100               	movlb	0	; () banked
  1936  001568  6F9F               	movwf	(Putc_TX1_Data@vet+4)& (0+255),b
  1937                           
  1938                           ; BSR set to: 0
  1939                           ;main.c: 213: Putc_TX1(vet[0]);
  1940  00156A  519B               	movf	Putc_TX1_Data@vet& (0+255),w,b
  1941  00156C  ECE8  F00D         	call	_Putc_TX1
  1942                           
  1943                           ;main.c: 214: Putc_TX1(' ');
  1944  001570  0E20               	movlw	32
  1945  001572  ECE8  F00D         	call	_Putc_TX1
  1946                           
  1947                           ;main.c: 215: Putc_TX1(vet[1]);
  1948  001576  0100               	movlb	0	; () banked
  1949  001578  519C               	movf	(Putc_TX1_Data@vet+1)& (0+255),w,b
  1950  00157A  ECE8  F00D         	call	_Putc_TX1
  1951                           
  1952                           ;main.c: 216: Putc_TX1(' ');
  1953  00157E  0E20               	movlw	32
  1954  001580  ECE8  F00D         	call	_Putc_TX1
  1955                           
  1956                           ;main.c: 217: Putc_TX1(vet[2]);
  1957  001584  0100               	movlb	0	; () banked
  1958  001586  519D               	movf	(Putc_TX1_Data@vet+2)& (0+255),w,b
  1959  001588  ECE8  F00D         	call	_Putc_TX1
  1960                           
  1961                           ;main.c: 218: Putc_TX1(' ');
  1962  00158C  0E20               	movlw	32
  1963  00158E  ECE8  F00D         	call	_Putc_TX1
  1964                           
  1965                           ;main.c: 219: Putc_TX1(vet[3]);
  1966  001592  0100               	movlb	0	; () banked
  1967  001594  519E               	movf	(Putc_TX1_Data@vet+3)& (0+255),w,b
  1968  001596  ECE8  F00D         	call	_Putc_TX1
  1969                           
  1970                           ;main.c: 220: Putc_TX1(' ');
  1971  00159A  0E20               	movlw	32
  1972  00159C  ECE8  F00D         	call	_Putc_TX1
  1973                           
  1974                           ;main.c: 221: Putc_TX1(vet[4]);
  1975  0015A0  0100               	movlb	0	; () banked
  1976  0015A2  519F               	movf	(Putc_TX1_Data@vet+4)& (0+255),w,b
  1977  0015A4  ECE8  F00D         	call	_Putc_TX1
  1978                           
  1979                           ;main.c: 222: Putc_TX1(' ');
  1980  0015A8  0E20               	movlw	32
  1981  0015AA  ECE8  F00D         	call	_Putc_TX1
  1982                           
  1983                           ;main.c: 223: Putc_TX1(')');
  1984  0015AE  0E29               	movlw	41
  1985  0015B0  ECE8  F00D         	call	_Putc_TX1
  1986  0015B4  0012               	return		;funcret
  1987  0015B6                     __end_of_Putc_TX1_Data:
  1988                           	opt stack 0
  1989                           tblptru	equ	0xFF8
  1990                           tblptrh	equ	0xFF7
  1991                           tblptrl	equ	0xFF6
  1992                           tablat	equ	0xFF5
  1993                           prodh	equ	0xFF4
  1994                           prodl	equ	0xFF3
  1995                           intcon	equ	0xFF2
  1996                           postinc0	equ	0xFEE
  1997                           wreg	equ	0xFE8
  1998                           postdec1	equ	0xFE5
  1999                           fsr1l	equ	0xFE1
  2000                           postinc2	equ	0xFDE
  2001                           postdec2	equ	0xFDD
  2002                           fsr2h	equ	0xFDA
  2003                           fsr2l	equ	0xFD9
  2004                           status	equ	0xFD8
  2005                           
  2006 ;; *************** function ___lwmod *****************
  2007 ;; Defined at:
  2008 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  2009 ;; Parameters:    Size  Location     Type
  2010 ;;  dividend        2   25[COMRAM] unsigned int 
  2011 ;;  divisor         2   27[COMRAM] unsigned int 
  2012 ;; Auto vars:     Size  Location     Type
  2013 ;;  counter         1   29[COMRAM] unsigned char 
  2014 ;; Return value:  Size  Location     Type
  2015 ;;                  2   25[COMRAM] unsigned int 
  2016 ;; Registers used:
  2017 ;;		wreg, status,2, status,0
  2018 ;; Tracked objects:
  2019 ;;		On entry : 0/0
  2020 ;;		On exit  : 0/0
  2021 ;;		Unchanged: 0/0
  2022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2023 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2024 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2026 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2027 ;;Total ram usage:        5 bytes
  2028 ;; Hardware stack levels used:    1
  2029 ;; Hardware stack levels required when called:    2
  2030 ;; This function calls:
  2031 ;;		Nothing
  2032 ;; This function is called by:
  2033 ;;		_Putc_TX1_Data
  2034 ;; This function uses a non-reentrant model
  2035 ;;
  2036                           
  2037                           	psect	text7
  2038  001A32                     __ptext7:
  2039                           	opt stack 0
  2040  001A32                     ___lwmod:
  2041                           	opt stack 27
  2042                           
  2043                           ;incstack = 0
  2044  001A32  5041               	movf	___lwmod@divisor,w,c
  2045  001A34  1042               	iorwf	___lwmod@divisor+1,w,c
  2046  001A36  B4D8               	btfsc	status,2,c
  2047  001A38  D018               	goto	l989
  2048  001A3A  0E01               	movlw	1
  2049  001A3C  6E43               	movwf	___lwmod@counter,c
  2050  001A3E  D004               	goto	l984
  2051  001A40  90D8               	bcf	status,0,c
  2052  001A42  3641               	rlcf	___lwmod@divisor,f,c
  2053  001A44  3642               	rlcf	___lwmod@divisor+1,f,c
  2054  001A46  2A43               	incf	___lwmod@counter,f,c
  2055  001A48                     l984:
  2056  001A48  AE42               	btfss	___lwmod@divisor+1,7,c
  2057  001A4A  D7FA               	goto	l985
  2058  001A4C                     u1280:
  2059  001A4C  5041               	movf	___lwmod@divisor,w,c
  2060  001A4E  5C3F               	subwf	___lwmod@dividend,w,c
  2061  001A50  5042               	movf	___lwmod@divisor+1,w,c
  2062  001A52  5840               	subwfb	___lwmod@dividend+1,w,c
  2063  001A54  A0D8               	btfss	status,0,c
  2064  001A56  D004               	goto	l988
  2065  001A58  5041               	movf	___lwmod@divisor,w,c
  2066  001A5A  5E3F               	subwf	___lwmod@dividend,f,c
  2067  001A5C  5042               	movf	___lwmod@divisor+1,w,c
  2068  001A5E  5A40               	subwfb	___lwmod@dividend+1,f,c
  2069  001A60                     l988:
  2070  001A60  90D8               	bcf	status,0,c
  2071  001A62  3242               	rrcf	___lwmod@divisor+1,f,c
  2072  001A64  3241               	rrcf	___lwmod@divisor,f,c
  2073  001A66  2E43               	decfsz	___lwmod@counter,f,c
  2074  001A68  D7F1               	goto	u1280
  2075  001A6A                     l989:
  2076  001A6A  C03F  F03F         	movff	___lwmod@dividend,?___lwmod
  2077  001A6E  C040  F040         	movff	___lwmod@dividend+1,?___lwmod+1
  2078  001A72  0012               	return		;funcret
  2079  001A74                     __end_of___lwmod:
  2080                           	opt stack 0
  2081                           tblptru	equ	0xFF8
  2082                           tblptrh	equ	0xFF7
  2083                           tblptrl	equ	0xFF6
  2084                           tablat	equ	0xFF5
  2085                           prodh	equ	0xFF4
  2086                           prodl	equ	0xFF3
  2087                           intcon	equ	0xFF2
  2088                           postinc0	equ	0xFEE
  2089                           wreg	equ	0xFE8
  2090                           postdec1	equ	0xFE5
  2091                           fsr1l	equ	0xFE1
  2092                           postinc2	equ	0xFDE
  2093                           postdec2	equ	0xFDD
  2094                           fsr2h	equ	0xFDA
  2095                           fsr2l	equ	0xFD9
  2096                           status	equ	0xFD8
  2097                           
  2098 ;; *************** function _Putc_TX1 *****************
  2099 ;; Defined at:
  2100 ;;		line 60 in file "RS232_K22.c"
  2101 ;; Parameters:    Size  Location     Type
  2102 ;;  valor           1    wreg     unsigned char 
  2103 ;; Auto vars:     Size  Location     Type
  2104 ;;  valor           1   25[COMRAM] unsigned char 
  2105 ;; Return value:  Size  Location     Type
  2106 ;;                  1    wreg      void 
  2107 ;; Registers used:
  2108 ;;		wreg, status,2, cstack
  2109 ;; Tracked objects:
  2110 ;;		On entry : 0/0
  2111 ;;		On exit  : 0/0
  2112 ;;		Unchanged: 0/0
  2113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2115 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2117 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2118 ;;Total ram usage:        1 bytes
  2119 ;; Hardware stack levels used:    1
  2120 ;; Hardware stack levels required when called:    2
  2121 ;; This function calls:
  2122 ;;		Nothing
  2123 ;; This function is called by:
  2124 ;;		_Putc_TX1_Data
  2125 ;;		_Putc_Text_TX1
  2126 ;; This function uses a non-reentrant model
  2127 ;;
  2128                           
  2129                           	psect	text8
  2130  001BD0                     __ptext8:
  2131                           	opt stack 0
  2132  001BD0                     _Putc_TX1:
  2133                           	opt stack 27
  2134                           
  2135                           ;incstack = 0
  2136                           ;Putc_TX1@valor stored from wreg
  2137  001BD0  6E3F               	movwf	Putc_TX1@valor,c
  2138                           
  2139                           ;RS232_K22.c: 62: TX1IF = 0;
  2140  001BD2  989E               	bcf	3998,4,c	;volatile
  2141                           
  2142                           ;RS232_K22.c: 63: TXREG1 = valor;
  2143  001BD4  C03F  FFAD         	movff	Putc_TX1@valor,4013	;volatile
  2144  001BD8  A89E               	btfss	3998,4,c	;volatile
  2145  001BDA  D7FE               	goto	l264
  2146                           
  2147                           ;RS232_K22.c: 65: _delay((unsigned long)((10)*(40000000/4000000.0)));
  2148  001BDC  0E21               	movlw	33
  2149  001BDE                     u1557:
  2150  001BDE  2EE8               	decfsz	wreg,f,c
  2151  001BE0  D7FE               	bra	u1557
  2152  001BE2  F000               	nop	
  2153  001BE4  0012               	return		;funcret
  2154  001BE6                     __end_of_Putc_TX1:
  2155                           	opt stack 0
  2156                           tblptru	equ	0xFF8
  2157                           tblptrh	equ	0xFF7
  2158                           tblptrl	equ	0xFF6
  2159                           tablat	equ	0xFF5
  2160                           prodh	equ	0xFF4
  2161                           prodl	equ	0xFF3
  2162                           intcon	equ	0xFF2
  2163                           postinc0	equ	0xFEE
  2164                           wreg	equ	0xFE8
  2165                           postdec1	equ	0xFE5
  2166                           fsr1l	equ	0xFE1
  2167                           postinc2	equ	0xFDE
  2168                           postdec2	equ	0xFDD
  2169                           fsr2h	equ	0xFDA
  2170                           fsr2l	equ	0xFD9
  2171                           status	equ	0xFD8
  2172                           
  2173 ;; *************** function _PutRXTempMotor *****************
  2174 ;; Defined at:
  2175 ;;		line 290 in file "main.c"
  2176 ;; Parameters:    Size  Location     Type
  2177 ;;  Temp            2   29[COMRAM] unsigned int 
  2178 ;; Auto vars:     Size  Location     Type
  2179 ;;		None
  2180 ;; Return value:  Size  Location     Type
  2181 ;;                  1    wreg      void 
  2182 ;; Registers used:
  2183 ;;		wreg, status,2, status,0, cstack
  2184 ;; Tracked objects:
  2185 ;;		On entry : 0/0
  2186 ;;		On exit  : 0/0
  2187 ;;		Unchanged: 0/0
  2188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2189 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2191 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2192 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2193 ;;Total ram usage:        4 bytes
  2194 ;; Hardware stack levels used:    1
  2195 ;; Hardware stack levels required when called:    4
  2196 ;; This function calls:
  2197 ;;		_CAN_SPI2_WRITE
  2198 ;;		___lwdiv
  2199 ;; This function is called by:
  2200 ;;		_main
  2201 ;; This function uses a non-reentrant model
  2202 ;;
  2203                           
  2204                           	psect	text9
  2205  00177A                     __ptext9:
  2206                           	opt stack 0
  2207  00177A                     _PutRXTempMotor:
  2208                           	opt stack 26
  2209                           
  2210                           ;main.c: 292: TempMotor = (unsigned char)((Temp * 4)/3 + 48);
  2211                           
  2212                           ;incstack = 0
  2213  00177A  C043  F099         	movff	PutRXTempMotor@Temp,??_PutRXTempMotor
  2214  00177E  C044  F09A         	movff	PutRXTempMotor@Temp+1,??_PutRXTempMotor+1
  2215  001782  0100               	movlb	0	; () banked
  2216  001784  90D8               	bcf	status,0,c
  2217  001786  3799               	rlcf	??_PutRXTempMotor& (0+255),f,b
  2218  001788  379A               	rlcf	(??_PutRXTempMotor+1)& (0+255),f,b
  2219  00178A  90D8               	bcf	status,0,c
  2220  00178C  3799               	rlcf	??_PutRXTempMotor& (0+255),f,b
  2221  00178E  379A               	rlcf	(??_PutRXTempMotor+1)& (0+255),f,b
  2222  001790  C099  F03F         	movff	??_PutRXTempMotor,___lwdiv@dividend
  2223  001794  C09A  F040         	movff	??_PutRXTempMotor+1,___lwdiv@dividend+1
  2224  001798  0E00               	movlw	0
  2225  00179A  6E42               	movwf	___lwdiv@divisor+1,c
  2226  00179C  0E03               	movlw	3
  2227  00179E  6E41               	movwf	___lwdiv@divisor,c
  2228  0017A0  ECA5  F00C         	call	___lwdiv	;wreg free
  2229  0017A4  0E30               	movlw	48
  2230  0017A6  263F               	addwf	?___lwdiv,f,c
  2231  0017A8  503F               	movf	?___lwdiv,w,c
  2232  0017AA  6E09               	movwf	_TempMotor,c
  2233  0017AC  6A0A               	clrf	_TempMotor+1,c
  2234                           
  2235                           ;main.c: 294: CAN_SPI2_WRITE(0x31, 0x51);
  2236  0017AE  0E51               	movlw	81
  2237  0017B0  6E40               	movwf	CAN_SPI2_WRITE@data,c
  2238  0017B2  0E31               	movlw	49
  2239  0017B4  EC59  F00D         	call	_CAN_SPI2_WRITE
  2240                           
  2241                           ;main.c: 295: CAN_SPI2_WRITE(0x32, 0x00);
  2242  0017B8  0E00               	movlw	0
  2243  0017BA  6E40               	movwf	CAN_SPI2_WRITE@data,c
  2244  0017BC  0E32               	movlw	50
  2245  0017BE  EC59  F00D         	call	_CAN_SPI2_WRITE
  2246                           
  2247                           ;main.c: 296: CAN_SPI2_WRITE(0x35, 0x08);
  2248  0017C2  0E08               	movlw	8
  2249  0017C4  6E40               	movwf	CAN_SPI2_WRITE@data,c
  2250  0017C6  0E35               	movlw	53
  2251  0017C8  EC59  F00D         	call	_CAN_SPI2_WRITE
  2252                           
  2253                           ;main.c: 298: CAN_SPI2_WRITE(0x36, 0x5D);
  2254  0017CC  0E5D               	movlw	93
  2255  0017CE  6E40               	movwf	CAN_SPI2_WRITE@data,c
  2256  0017D0  0E36               	movlw	54
  2257  0017D2  EC59  F00D         	call	_CAN_SPI2_WRITE
  2258                           
  2259                           ;main.c: 299: CAN_SPI2_WRITE(0x37, TempMotor);
  2260  0017D6  C009  F040         	movff	_TempMotor,CAN_SPI2_WRITE@data
  2261  0017DA  0E37               	movlw	55
  2262  0017DC  EC59  F00D         	call	_CAN_SPI2_WRITE
  2263                           
  2264                           ;main.c: 300: CAN_SPI2_WRITE(0x38, 0x10);
  2265  0017E0  0E10               	movlw	16
  2266  0017E2  6E40               	movwf	CAN_SPI2_WRITE@data,c
  2267  0017E4  0E38               	movlw	56
  2268  0017E6  EC59  F00D         	call	_CAN_SPI2_WRITE
  2269                           
  2270                           ;main.c: 301: CAN_SPI2_WRITE(0x39, 0x00);
  2271  0017EA  0E00               	movlw	0
  2272  0017EC  6E40               	movwf	CAN_SPI2_WRITE@data,c
  2273  0017EE  0E39               	movlw	57
  2274  0017F0  EC59  F00D         	call	_CAN_SPI2_WRITE
  2275                           
  2276                           ;main.c: 302: CAN_SPI2_WRITE(0x3A, 0xFF);
  2277  0017F4  0EFF               	movlw	255
  2278  0017F6  6E40               	movwf	CAN_SPI2_WRITE@data,c
  2279  0017F8  0E3A               	movlw	58
  2280  0017FA  EC59  F00D         	call	_CAN_SPI2_WRITE
  2281                           
  2282                           ;main.c: 303: CAN_SPI2_WRITE(0x3B, 0x64);
  2283  0017FE  0E64               	movlw	100
  2284  001800  6E40               	movwf	CAN_SPI2_WRITE@data,c
  2285  001802  0E3B               	movlw	59
  2286  001804  EC59  F00D         	call	_CAN_SPI2_WRITE
  2287                           
  2288                           ;main.c: 304: CAN_SPI2_WRITE(0x3C, 0x67);
  2289  001808  0E67               	movlw	103
  2290  00180A  6E40               	movwf	CAN_SPI2_WRITE@data,c
  2291  00180C  0E3C               	movlw	60
  2292  00180E  EC59  F00D         	call	_CAN_SPI2_WRITE
  2293                           
  2294                           ;main.c: 305: CAN_SPI2_WRITE(0x3D, 0x9C);
  2295  001812  0E9C               	movlw	156
  2296  001814  6E40               	movwf	CAN_SPI2_WRITE@data,c
  2297  001816  0E3D               	movlw	61
  2298  001818  EC59  F00D         	call	_CAN_SPI2_WRITE
  2299                           
  2300                           ;main.c: 306: CAN_SPI2_WRITE(0x30, 0x08);
  2301  00181C  0E08               	movlw	8
  2302  00181E  6E40               	movwf	CAN_SPI2_WRITE@data,c
  2303  001820  0E30               	movlw	48
  2304  001822  EC59  F00D         	call	_CAN_SPI2_WRITE
  2305                           
  2306                           ;main.c: 307: CAN_SPI2_WRITE(0x30, 0x00);
  2307  001826  0E00               	movlw	0
  2308  001828  6E40               	movwf	CAN_SPI2_WRITE@data,c
  2309  00182A  0E30               	movlw	48
  2310  00182C  EC59  F00D         	call	_CAN_SPI2_WRITE
  2311  001830  0012               	return		;funcret
  2312  001832                     __end_of_PutRXTempMotor:
  2313                           	opt stack 0
  2314                           tblptru	equ	0xFF8
  2315                           tblptrh	equ	0xFF7
  2316                           tblptrl	equ	0xFF6
  2317                           tablat	equ	0xFF5
  2318                           prodh	equ	0xFF4
  2319                           prodl	equ	0xFF3
  2320                           intcon	equ	0xFF2
  2321                           postinc0	equ	0xFEE
  2322                           wreg	equ	0xFE8
  2323                           postdec1	equ	0xFE5
  2324                           fsr1l	equ	0xFE1
  2325                           postinc2	equ	0xFDE
  2326                           postdec2	equ	0xFDD
  2327                           fsr2h	equ	0xFDA
  2328                           fsr2l	equ	0xFD9
  2329                           status	equ	0xFD8
  2330                           
  2331 ;; *************** function ___lwdiv *****************
  2332 ;; Defined at:
  2333 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  2334 ;; Parameters:    Size  Location     Type
  2335 ;;  dividend        2   25[COMRAM] unsigned int 
  2336 ;;  divisor         2   27[COMRAM] unsigned int 
  2337 ;; Auto vars:     Size  Location     Type
  2338 ;;  quotient        2    1[BANK0 ] unsigned int 
  2339 ;;  counter         1    0[BANK0 ] unsigned char 
  2340 ;; Return value:  Size  Location     Type
  2341 ;;                  2   25[COMRAM] unsigned int 
  2342 ;; Registers used:
  2343 ;;		wreg, status,2, status,0
  2344 ;; Tracked objects:
  2345 ;;		On entry : 0/0
  2346 ;;		On exit  : 0/0
  2347 ;;		Unchanged: 0/0
  2348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2349 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2350 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2352 ;;      Totals:         4       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2353 ;;Total ram usage:        7 bytes
  2354 ;; Hardware stack levels used:    1
  2355 ;; Hardware stack levels required when called:    2
  2356 ;; This function calls:
  2357 ;;		Nothing
  2358 ;; This function is called by:
  2359 ;;		_Putc_TX1_Data
  2360 ;;		_PutRXTempMotor
  2361 ;; This function uses a non-reentrant model
  2362 ;;
  2363                           
  2364                           	psect	text10
  2365  00194A                     __ptext10:
  2366                           	opt stack 0
  2367  00194A                     ___lwdiv:
  2368                           	opt stack 27
  2369                           
  2370                           ;incstack = 0
  2371  00194A  0E00               	movlw	0
  2372  00194C  0100               	movlb	0	; () banked
  2373  00194E  6F98               	movwf	(___lwdiv@quotient+1)& (0+255),b
  2374  001950  0E00               	movlw	0
  2375  001952  6F97               	movwf	___lwdiv@quotient& (0+255),b
  2376                           
  2377                           ; BSR set to: 0
  2378  001954  5041               	movf	___lwdiv@divisor,w,c
  2379  001956  1042               	iorwf	___lwdiv@divisor+1,w,c
  2380  001958  B4D8               	btfsc	status,2,c
  2381  00195A  D01C               	goto	l979
  2382                           
  2383                           ; BSR set to: 0
  2384  00195C  0E01               	movlw	1
  2385  00195E  6F96               	movwf	___lwdiv@counter& (0+255),b
  2386  001960  D004               	goto	l974
  2387  001962                     
  2388                           ; BSR set to: 0
  2389                           
  2390                           ; BSR set to: 0
  2391  001962  90D8               	bcf	status,0,c
  2392  001964  3641               	rlcf	___lwdiv@divisor,f,c
  2393  001966  3642               	rlcf	___lwdiv@divisor+1,f,c
  2394  001968  2B96               	incf	___lwdiv@counter& (0+255),f,b
  2395  00196A                     l974:
  2396                           
  2397                           ; BSR set to: 0
  2398                           
  2399                           ; BSR set to: 0
  2400  00196A  AE42               	btfss	___lwdiv@divisor+1,7,c
  2401  00196C  D7FA               	goto	l975
  2402  00196E                     u1250:
  2403                           
  2404                           ; BSR set to: 0
  2405                           
  2406                           ; BSR set to: 0
  2407                           
  2408                           ; BSR set to: 0
  2409  00196E  90D8               	bcf	status,0,c
  2410  001970  3797               	rlcf	___lwdiv@quotient& (0+255),f,b
  2411  001972  3798               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  2412                           
  2413                           ; BSR set to: 0
  2414  001974  5041               	movf	___lwdiv@divisor,w,c
  2415  001976  5C3F               	subwf	___lwdiv@dividend,w,c
  2416  001978  5042               	movf	___lwdiv@divisor+1,w,c
  2417  00197A  5840               	subwfb	___lwdiv@dividend+1,w,c
  2418  00197C  A0D8               	btfss	status,0,c
  2419  00197E  D005               	goto	l978
  2420                           
  2421                           ; BSR set to: 0
  2422  001980  5041               	movf	___lwdiv@divisor,w,c
  2423  001982  5E3F               	subwf	___lwdiv@dividend,f,c
  2424  001984  5042               	movf	___lwdiv@divisor+1,w,c
  2425  001986  5A40               	subwfb	___lwdiv@dividend+1,f,c
  2426                           
  2427                           ; BSR set to: 0
  2428  001988  8197               	bsf	___lwdiv@quotient& (0+255),0,b
  2429  00198A                     l978:
  2430                           
  2431                           ; BSR set to: 0
  2432                           
  2433                           ; BSR set to: 0
  2434  00198A  90D8               	bcf	status,0,c
  2435  00198C  3242               	rrcf	___lwdiv@divisor+1,f,c
  2436  00198E  3241               	rrcf	___lwdiv@divisor,f,c
  2437                           
  2438                           ; BSR set to: 0
  2439  001990  2F96               	decfsz	___lwdiv@counter& (0+255),f,b
  2440  001992  D7ED               	goto	u1250
  2441  001994                     l979:
  2442                           
  2443                           ; BSR set to: 0
  2444                           
  2445                           ; BSR set to: 0
  2446  001994  C097  F03F         	movff	___lwdiv@quotient,?___lwdiv
  2447  001998  C098  F040         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2448                           
  2449                           ; BSR set to: 0
  2450  00199C  0012               	return		;funcret
  2451  00199E                     __end_of___lwdiv:
  2452                           	opt stack 0
  2453                           tblptru	equ	0xFF8
  2454                           tblptrh	equ	0xFF7
  2455                           tblptrl	equ	0xFF6
  2456                           tablat	equ	0xFF5
  2457                           prodh	equ	0xFF4
  2458                           prodl	equ	0xFF3
  2459                           intcon	equ	0xFF2
  2460                           postinc0	equ	0xFEE
  2461                           wreg	equ	0xFE8
  2462                           postdec1	equ	0xFE5
  2463                           fsr1l	equ	0xFE1
  2464                           postinc2	equ	0xFDE
  2465                           postdec2	equ	0xFDD
  2466                           fsr2h	equ	0xFDA
  2467                           fsr2l	equ	0xFD9
  2468                           status	equ	0xFD8
  2469                           
  2470 ;; *************** function _PutRXRotation *****************
  2471 ;; Defined at:
  2472 ;;		line 270 in file "main.c"
  2473 ;; Parameters:    Size  Location     Type
  2474 ;;  Rot             2   28[COMRAM] unsigned int 
  2475 ;; Auto vars:     Size  Location     Type
  2476 ;;		None
  2477 ;; Return value:  Size  Location     Type
  2478 ;;                  1    wreg      void 
  2479 ;; Registers used:
  2480 ;;		wreg, status,2, status,0, cstack
  2481 ;; Tracked objects:
  2482 ;;		On entry : 0/0
  2483 ;;		On exit  : 0/0
  2484 ;;		Unchanged: 0/0
  2485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2486 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2488 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2489 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2490 ;;Total ram usage:        4 bytes
  2491 ;; Hardware stack levels used:    1
  2492 ;; Hardware stack levels required when called:    4
  2493 ;; This function calls:
  2494 ;;		_CAN_SPI2_WRITE
  2495 ;; This function is called by:
  2496 ;;		_main
  2497 ;; This function uses a non-reentrant model
  2498 ;;
  2499                           
  2500                           	psect	text11
  2501  001832                     __ptext11:
  2502                           	opt stack 0
  2503  001832                     _PutRXRotation:
  2504                           	opt stack 26
  2505                           
  2506                           ;main.c: 272: rotacao_4 = Rot << 2;
  2507                           
  2508                           ; BSR set to: 0
  2509                           ;incstack = 0
  2510  001832  C042  F096         	movff	PutRXRotation@Rot,??_PutRXRotation
  2511  001836  C043  F097         	movff	PutRXRotation@Rot+1,??_PutRXRotation+1
  2512  00183A  0100               	movlb	0	; () banked
  2513  00183C  90D8               	bcf	status,0,c
  2514  00183E  3796               	rlcf	??_PutRXRotation& (0+255),f,b
  2515  001840  3797               	rlcf	(??_PutRXRotation+1)& (0+255),f,b
  2516  001842  90D8               	bcf	status,0,c
  2517  001844  3796               	rlcf	??_PutRXRotation& (0+255),f,b
  2518  001846  3797               	rlcf	(??_PutRXRotation+1)& (0+255),f,b
  2519  001848  C096  F092         	movff	??_PutRXRotation,_rotacao_4
  2520  00184C  C097  F093         	movff	??_PutRXRotation+1,_rotacao_4+1
  2521  001850  6B94               	clrf	(_rotacao_4+2)& (0+255),b
  2522  001852  6B95               	clrf	(_rotacao_4+3)& (0+255),b
  2523                           
  2524                           ; BSR set to: 0
  2525                           ;main.c: 274: CAN_SPI2_WRITE(0x31, 0x50);
  2526  001854  0E50               	movlw	80
  2527  001856  6E40               	movwf	CAN_SPI2_WRITE@data,c
  2528  001858  0E31               	movlw	49
  2529  00185A  EC59  F00D         	call	_CAN_SPI2_WRITE
  2530                           
  2531                           ;main.c: 275: CAN_SPI2_WRITE(0x32, 0x00);
  2532  00185E  0E00               	movlw	0
  2533  001860  6E40               	movwf	CAN_SPI2_WRITE@data,c
  2534  001862  0E32               	movlw	50
  2535  001864  EC59  F00D         	call	_CAN_SPI2_WRITE
  2536                           
  2537                           ;main.c: 276: CAN_SPI2_WRITE(0x35, 0x08);
  2538  001868  0E08               	movlw	8
  2539  00186A  6E40               	movwf	CAN_SPI2_WRITE@data,c
  2540  00186C  0E35               	movlw	53
  2541  00186E  EC59  F00D         	call	_CAN_SPI2_WRITE
  2542                           
  2543                           ;main.c: 278: CAN_SPI2_WRITE(0x36, 0xA9);
  2544  001872  0EA9               	movlw	169
  2545  001874  6E40               	movwf	CAN_SPI2_WRITE@data,c
  2546  001876  0E36               	movlw	54
  2547  001878  EC59  F00D         	call	_CAN_SPI2_WRITE
  2548                           
  2549                           ;main.c: 279: CAN_SPI2_WRITE(0x37, 0xA4);
  2550  00187C  0EA4               	movlw	164
  2551  00187E  6E40               	movwf	CAN_SPI2_WRITE@data,c
  2552  001880  0E37               	movlw	55
  2553  001882  EC59  F00D         	call	_CAN_SPI2_WRITE
  2554                           
  2555                           ;main.c: 280: CAN_SPI2_WRITE(0x38, (unsigned char)rotacao_4);
  2556  001886  C092  F040         	movff	_rotacao_4,CAN_SPI2_WRITE@data
  2557  00188A  0E38               	movlw	56
  2558  00188C  EC59  F00D         	call	_CAN_SPI2_WRITE
  2559                           
  2560                           ;main.c: 281: CAN_SPI2_WRITE(0x39, (unsigned char)(rotacao_4 >> 8));
  2561  001890  C093  F040         	movff	_rotacao_4+1,CAN_SPI2_WRITE@data
  2562  001894  0E39               	movlw	57
  2563  001896  EC59  F00D         	call	_CAN_SPI2_WRITE
  2564                           
  2565                           ;main.c: 282: CAN_SPI2_WRITE(0x3A, 0x38);
  2566  00189A  0E38               	movlw	56
  2567  00189C  6E40               	movwf	CAN_SPI2_WRITE@data,c
  2568  00189E  0E3A               	movlw	58
  2569  0018A0  EC59  F00D         	call	_CAN_SPI2_WRITE
  2570                           
  2571                           ;main.c: 283: CAN_SPI2_WRITE(0x3B, 0x00);
  2572  0018A4  0E00               	movlw	0
  2573  0018A6  6E40               	movwf	CAN_SPI2_WRITE@data,c
  2574  0018A8  0E3B               	movlw	59
  2575  0018AA  EC59  F00D         	call	_CAN_SPI2_WRITE
  2576                           
  2577                           ;main.c: 284: CAN_SPI2_WRITE(0x3C, 0x32);
  2578  0018AE  0E32               	movlw	50
  2579  0018B0  6E40               	movwf	CAN_SPI2_WRITE@data,c
  2580  0018B2  0E3C               	movlw	60
  2581  0018B4  EC59  F00D         	call	_CAN_SPI2_WRITE
  2582                           
  2583                           ;main.c: 285: CAN_SPI2_WRITE(0x3D, 0x38);
  2584  0018B8  0E38               	movlw	56
  2585  0018BA  6E40               	movwf	CAN_SPI2_WRITE@data,c
  2586  0018BC  0E3D               	movlw	61
  2587  0018BE  EC59  F00D         	call	_CAN_SPI2_WRITE
  2588                           
  2589                           ;main.c: 286: CAN_SPI2_WRITE(0x30, 0x08);
  2590  0018C2  0E08               	movlw	8
  2591  0018C4  6E40               	movwf	CAN_SPI2_WRITE@data,c
  2592  0018C6  0E30               	movlw	48
  2593  0018C8  EC59  F00D         	call	_CAN_SPI2_WRITE
  2594                           
  2595                           ;main.c: 287: CAN_SPI2_WRITE(0x30, 0x00);
  2596  0018CC  0E00               	movlw	0
  2597  0018CE  6E40               	movwf	CAN_SPI2_WRITE@data,c
  2598  0018D0  0E30               	movlw	48
  2599  0018D2  EC59  F00D         	call	_CAN_SPI2_WRITE
  2600  0018D6  0012               	return		;funcret
  2601  0018D8                     __end_of_PutRXRotation:
  2602                           	opt stack 0
  2603                           tblptru	equ	0xFF8
  2604                           tblptrh	equ	0xFF7
  2605                           tblptrl	equ	0xFF6
  2606                           tablat	equ	0xFF5
  2607                           prodh	equ	0xFF4
  2608                           prodl	equ	0xFF3
  2609                           intcon	equ	0xFF2
  2610                           postinc0	equ	0xFEE
  2611                           wreg	equ	0xFE8
  2612                           postdec1	equ	0xFE5
  2613                           fsr1l	equ	0xFE1
  2614                           postinc2	equ	0xFDE
  2615                           postdec2	equ	0xFDD
  2616                           fsr2h	equ	0xFDA
  2617                           fsr2l	equ	0xFD9
  2618                           status	equ	0xFD8
  2619                           
  2620 ;; *************** function _ConfigureHW *****************
  2621 ;; Defined at:
  2622 ;;		line 235 in file "main.c"
  2623 ;; Parameters:    Size  Location     Type
  2624 ;;		None
  2625 ;; Auto vars:     Size  Location     Type
  2626 ;;		None
  2627 ;; Return value:  Size  Location     Type
  2628 ;;                  1    wreg      void 
  2629 ;; Registers used:
  2630 ;;		wreg, status,2, status,0, cstack
  2631 ;; Tracked objects:
  2632 ;;		On entry : 0/0
  2633 ;;		On exit  : 0/0
  2634 ;;		Unchanged: 0/0
  2635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2638 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2639 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2640 ;;Total ram usage:        1 bytes
  2641 ;; Hardware stack levels used:    1
  2642 ;; Hardware stack levels required when called:    5
  2643 ;; This function calls:
  2644 ;;		_CONFIG_MCP2515
  2645 ;;		_Config_Timer1
  2646 ;;		_Config_Timer3
  2647 ;;		_Init1_RS232
  2648 ;;		_No_Analogs
  2649 ;;		_RESET_CAN
  2650 ;;		_SPI_MASTER2
  2651 ;;		_SPI_SLAVE1
  2652 ;; This function is called by:
  2653 ;;		_main
  2654 ;; This function uses a non-reentrant model
  2655 ;;
  2656                           
  2657                           	psect	text12
  2658  0018D8                     __ptext12:
  2659                           	opt stack 0
  2660  0018D8                     _ConfigureHW:
  2661                           	opt stack 25
  2662                           
  2663                           ;main.c: 237: No_Analogs();
  2664                           
  2665                           ;incstack = 0
  2666  0018D8  ECDC  F00D         	call	_No_Analogs	;wreg free
  2667                           
  2668                           ;main.c: 238: TRISC7 = 1;
  2669  0018DC  8E94               	bsf	3988,7,c	;volatile
  2670                           
  2671                           ;main.c: 239: TRISC6 = 0;
  2672  0018DE  9C94               	bcf	3988,6,c	;volatile
  2673                           
  2674                           ;main.c: 240: TRISB7 = 0;
  2675  0018E0  9E93               	bcf	3987,7,c	;volatile
  2676                           
  2677                           ;main.c: 241: TRISA0 = 0;
  2678  0018E2  9092               	bcf	3986,0,c	;volatile
  2679                           
  2680                           ;main.c: 242: PORTB = 0b00000010;
  2681  0018E4  0E02               	movlw	2
  2682  0018E6  6E81               	movwf	3969,c	;volatile
  2683                           
  2684                           ;main.c: 243: TRISC1 = 0;
  2685  0018E8  9294               	bcf	3988,1,c	;volatile
  2686                           
  2687                           ;main.c: 244: TRISC0 = 0;
  2688  0018EA  9094               	bcf	3988,0,c	;volatile
  2689                           
  2690                           ;main.c: 245: TRISC2 = 0;
  2691  0018EC  9494               	bcf	3988,2,c	;volatile
  2692                           
  2693                           ;main.c: 247: Init1_RS232(19200,1);
  2694  0018EE  0E00               	movlw	0
  2695  0018F0  0100               	movlb	0	; () banked
  2696  0018F2  6F9E               	movwf	Init1_RS232@velocity& (0+255),b
  2697  0018F4  0E4B               	movlw	75
  2698  0018F6  6F9F               	movwf	(Init1_RS232@velocity+1)& (0+255),b
  2699  0018F8  0E00               	movlw	0
  2700  0018FA  6FA0               	movwf	(Init1_RS232@velocity+2)& (0+255),b
  2701  0018FC  0E00               	movlw	0
  2702  0018FE  6FA1               	movwf	(Init1_RS232@velocity+3)& (0+255),b
  2703  001900  0E00               	movlw	0
  2704  001902  6FA3               	movwf	(Init1_RS232@mode+1)& (0+255),b
  2705  001904  0E01               	movlw	1
  2706  001906  6FA2               	movwf	Init1_RS232@mode& (0+255),b
  2707  001908  ECDB  F00A         	call	_Init1_RS232	;wreg free
  2708                           
  2709                           ;main.c: 248: SPI_SLAVE1();
  2710  00190C  ECF3  F00D         	call	_SPI_SLAVE1	;wreg free
  2711                           
  2712                           ;main.c: 249: SPI_MASTER2();
  2713  001910  EC05  F00E         	call	_SPI_MASTER2	;wreg free
  2714                           
  2715                           ;main.c: 250: Config_Timer1();
  2716  001914  ECFC  F00D         	call	_Config_Timer1	;wreg free
  2717                           
  2718                           ;main.c: 251: Config_Timer3();
  2719  001918  ECC2  F00D         	call	_Config_Timer3	;wreg free
  2720                           
  2721                           ;main.c: 252: RESET_CAN();
  2722  00191C  ECB5  F00D         	call	_RESET_CAN	;wreg free
  2723                           
  2724                           ;main.c: 253: _delay((unsigned long)((1)*(40000000/4000.0)));
  2725  001920  0E0D               	movlw	13
  2726  001922  0100               	movlb	0	; () banked
  2727  001924  6FAA               	movwf	??_ConfigureHW& (0+255),b
  2728  001926  0EFB               	movlw	251
  2729  001928                     u1567:
  2730  001928  2EE8               	decfsz	wreg,f,c
  2731  00192A  D7FE               	bra	u1567
  2732  00192C  2FAA               	decfsz	??_ConfigureHW& (0+255),f,b
  2733  00192E  D7FC               	bra	u1567
  2734  001930  D000               	nop2	
  2735                           
  2736                           ;main.c: 254: CONFIG_MCP2515();
  2737  001932  EC78  F00D         	call	_CONFIG_MCP2515	;wreg free
  2738                           
  2739                           ;main.c: 255: _delay((unsigned long)((1)*(40000000/4000.0)));
  2740  001936  0E0D               	movlw	13
  2741  001938  0100               	movlb	0	; () banked
  2742  00193A  6FAA               	movwf	??_ConfigureHW& (0+255),b
  2743  00193C  0EFB               	movlw	251
  2744  00193E                     u1577:
  2745  00193E  2EE8               	decfsz	wreg,f,c
  2746  001940  D7FE               	bra	u1577
  2747  001942  2FAA               	decfsz	??_ConfigureHW& (0+255),f,b
  2748  001944  D7FC               	bra	u1577
  2749  001946  D000               	nop2	
  2750  001948  0012               	return		;funcret
  2751  00194A                     __end_of_ConfigureHW:
  2752                           	opt stack 0
  2753                           tblptru	equ	0xFF8
  2754                           tblptrh	equ	0xFF7
  2755                           tblptrl	equ	0xFF6
  2756                           tablat	equ	0xFF5
  2757                           prodh	equ	0xFF4
  2758                           prodl	equ	0xFF3
  2759                           intcon	equ	0xFF2
  2760                           postinc0	equ	0xFEE
  2761                           wreg	equ	0xFE8
  2762                           postdec1	equ	0xFE5
  2763                           fsr1l	equ	0xFE1
  2764                           postinc2	equ	0xFDE
  2765                           postdec2	equ	0xFDD
  2766                           fsr2h	equ	0xFDA
  2767                           fsr2l	equ	0xFD9
  2768                           status	equ	0xFD8
  2769                           
  2770 ;; *************** function _SPI_SLAVE1 *****************
  2771 ;; Defined at:
  2772 ;;		line 72 in file "SPI_XC8.c"
  2773 ;; Parameters:    Size  Location     Type
  2774 ;;		None
  2775 ;; Auto vars:     Size  Location     Type
  2776 ;;		None
  2777 ;; Return value:  Size  Location     Type
  2778 ;;                  1    wreg      void 
  2779 ;; Registers used:
  2780 ;;		wreg, status,2
  2781 ;; Tracked objects:
  2782 ;;		On entry : 0/0
  2783 ;;		On exit  : 0/0
  2784 ;;		Unchanged: 0/0
  2785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2789 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2790 ;;Total ram usage:        0 bytes
  2791 ;; Hardware stack levels used:    1
  2792 ;; Hardware stack levels required when called:    2
  2793 ;; This function calls:
  2794 ;;		Nothing
  2795 ;; This function is called by:
  2796 ;;		_ConfigureHW
  2797 ;; This function uses a non-reentrant model
  2798 ;;
  2799                           
  2800                           	psect	text13
  2801  001BE6                     __ptext13:
  2802                           	opt stack 0
  2803  001BE6                     _SPI_SLAVE1:
  2804                           	opt stack 27
  2805                           
  2806                           ;SPI_XC8.c: 74: SSP1CON1 = 0b00110100;
  2807                           
  2808                           ;incstack = 0
  2809  001BE6  0E34               	movlw	52
  2810  001BE8  6EC6               	movwf	4038,c	;volatile
  2811                           
  2812                           ;SPI_XC8.c: 75: SSP1STAT = 0b00000000;
  2813  001BEA  0E00               	movlw	0
  2814  001BEC  6EC7               	movwf	4039,c	;volatile
  2815                           
  2816                           ;SPI_XC8.c: 76: TRISA5 = 1;
  2817  001BEE  8A92               	bsf	3986,5,c	;volatile
  2818                           
  2819                           ;SPI_XC8.c: 77: TRISC3 = 1;
  2820  001BF0  8694               	bsf	3988,3,c	;volatile
  2821                           
  2822                           ;SPI_XC8.c: 78: TRISC4 = 1;
  2823  001BF2  8894               	bsf	3988,4,c	;volatile
  2824                           
  2825                           ;SPI_XC8.c: 79: TRISC5 = 0;
  2826  001BF4  9A94               	bcf	3988,5,c	;volatile
  2827  001BF6  0012               	return		;funcret
  2828  001BF8                     __end_of_SPI_SLAVE1:
  2829                           	opt stack 0
  2830                           tblptru	equ	0xFF8
  2831                           tblptrh	equ	0xFF7
  2832                           tblptrl	equ	0xFF6
  2833                           tablat	equ	0xFF5
  2834                           prodh	equ	0xFF4
  2835                           prodl	equ	0xFF3
  2836                           intcon	equ	0xFF2
  2837                           postinc0	equ	0xFEE
  2838                           wreg	equ	0xFE8
  2839                           postdec1	equ	0xFE5
  2840                           fsr1l	equ	0xFE1
  2841                           postinc2	equ	0xFDE
  2842                           postdec2	equ	0xFDD
  2843                           fsr2h	equ	0xFDA
  2844                           fsr2l	equ	0xFD9
  2845                           status	equ	0xFD8
  2846                           
  2847 ;; *************** function _SPI_MASTER2 *****************
  2848 ;; Defined at:
  2849 ;;		line 102 in file "SPI_XC8.c"
  2850 ;; Parameters:    Size  Location     Type
  2851 ;;		None
  2852 ;; Auto vars:     Size  Location     Type
  2853 ;;		None
  2854 ;; Return value:  Size  Location     Type
  2855 ;;                  1    wreg      void 
  2856 ;; Registers used:
  2857 ;;		wreg, status,2
  2858 ;; Tracked objects:
  2859 ;;		On entry : 0/0
  2860 ;;		On exit  : 0/0
  2861 ;;		Unchanged: 0/0
  2862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2866 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2867 ;;Total ram usage:        0 bytes
  2868 ;; Hardware stack levels used:    1
  2869 ;; Hardware stack levels required when called:    2
  2870 ;; This function calls:
  2871 ;;		Nothing
  2872 ;; This function is called by:
  2873 ;;		_ConfigureHW
  2874 ;; This function uses a non-reentrant model
  2875 ;;
  2876                           
  2877                           	psect	text14
  2878  001C0A                     __ptext14:
  2879                           	opt stack 0
  2880  001C0A                     _SPI_MASTER2:
  2881                           	opt stack 27
  2882                           
  2883                           ;SPI_XC8.c: 114: SSP2CON1 = 0b00110000;
  2884                           
  2885                           ;incstack = 0
  2886  001C0A  0E30               	movlw	48
  2887  001C0C  6E6C               	movwf	3948,c	;volatile
  2888                           
  2889                           ;SPI_XC8.c: 115: SSP2STAT = 0X00;
  2890  001C0E  0E00               	movlw	0
  2891  001C10  6E6D               	movwf	3949,c	;volatile
  2892                           
  2893                           ;SPI_XC8.c: 117: TRISD0 = 0;
  2894  001C12  9095               	bcf	3989,0,c	;volatile
  2895                           
  2896                           ;SPI_XC8.c: 118: TRISD1 = 1;
  2897  001C14  8295               	bsf	3989,1,c	;volatile
  2898                           
  2899                           ;SPI_XC8.c: 120: TRISD4 = 0;
  2900  001C16  9895               	bcf	3989,4,c	;volatile
  2901  001C18  0012               	return		;funcret
  2902  001C1A                     __end_of_SPI_MASTER2:
  2903                           	opt stack 0
  2904                           tblptru	equ	0xFF8
  2905                           tblptrh	equ	0xFF7
  2906                           tblptrl	equ	0xFF6
  2907                           tablat	equ	0xFF5
  2908                           prodh	equ	0xFF4
  2909                           prodl	equ	0xFF3
  2910                           intcon	equ	0xFF2
  2911                           postinc0	equ	0xFEE
  2912                           wreg	equ	0xFE8
  2913                           postdec1	equ	0xFE5
  2914                           fsr1l	equ	0xFE1
  2915                           postinc2	equ	0xFDE
  2916                           postdec2	equ	0xFDD
  2917                           fsr2h	equ	0xFDA
  2918                           fsr2l	equ	0xFD9
  2919                           status	equ	0xFD8
  2920                           
  2921 ;; *************** function _RESET_CAN *****************
  2922 ;; Defined at:
  2923 ;;		line 32 in file "MCP2515.c"
  2924 ;; Parameters:    Size  Location     Type
  2925 ;;		None
  2926 ;; Auto vars:     Size  Location     Type
  2927 ;;		None
  2928 ;; Return value:  Size  Location     Type
  2929 ;;                  1    wreg      void 
  2930 ;; Registers used:
  2931 ;;		wreg, cstack
  2932 ;; Tracked objects:
  2933 ;;		On entry : 0/0
  2934 ;;		On exit  : 0/0
  2935 ;;		Unchanged: 0/0
  2936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2940 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2941 ;;Total ram usage:        0 bytes
  2942 ;; Hardware stack levels used:    1
  2943 ;; Hardware stack levels required when called:    3
  2944 ;; This function calls:
  2945 ;;		_MASTER_SPI_WRITE2
  2946 ;; This function is called by:
  2947 ;;		_ConfigureHW
  2948 ;; This function uses a non-reentrant model
  2949 ;;
  2950                           
  2951                           	psect	text15
  2952  001B6A                     __ptext15:
  2953                           	opt stack 0
  2954  001B6A                     _RESET_CAN:
  2955                           	opt stack 26
  2956                           
  2957                           ;MCP2515.c: 34: LATCbits.LATC2= 1;
  2958                           
  2959                           ;incstack = 0
  2960  001B6A  848B               	bsf	3979,2,c	;volatile
  2961                           
  2962                           ;MCP2515.c: 35: LATCbits.LATC2 = 0;
  2963  001B6C  948B               	bcf	3979,2,c	;volatile
  2964                           
  2965                           ;MCP2515.c: 36: LATCbits.LATC2 = 1;
  2966  001B6E  848B               	bsf	3979,2,c	;volatile
  2967                           
  2968                           ;MCP2515.c: 37: LATCbits.LATC2 = 0;
  2969  001B70  948B               	bcf	3979,2,c	;volatile
  2970                           
  2971                           ;MCP2515.c: 38: _delay((unsigned long)((10)*(40000000/4000000.0)));
  2972  001B72  0E21               	movlw	33
  2973  001B74                     u1587:
  2974  001B74  2EE8               	decfsz	wreg,f,c
  2975  001B76  D7FE               	bra	u1587
  2976  001B78  F000               	nop	
  2977                           
  2978                           ;MCP2515.c: 39: MASTER_SPI_WRITE2(0xC0);
  2979  001B7A  0EC0               	movlw	192
  2980  001B7C  EC0D  F00E         	call	_MASTER_SPI_WRITE2
  2981                           
  2982                           ;MCP2515.c: 40: LATCbits.LATC2 = 1;
  2983  001B80  848B               	bsf	3979,2,c	;volatile
  2984  001B82  0012               	return		;funcret
  2985  001B84                     __end_of_RESET_CAN:
  2986                           	opt stack 0
  2987                           tblptru	equ	0xFF8
  2988                           tblptrh	equ	0xFF7
  2989                           tblptrl	equ	0xFF6
  2990                           tablat	equ	0xFF5
  2991                           prodh	equ	0xFF4
  2992                           prodl	equ	0xFF3
  2993                           intcon	equ	0xFF2
  2994                           postinc0	equ	0xFEE
  2995                           wreg	equ	0xFE8
  2996                           postdec1	equ	0xFE5
  2997                           fsr1l	equ	0xFE1
  2998                           postinc2	equ	0xFDE
  2999                           postdec2	equ	0xFDD
  3000                           fsr2h	equ	0xFDA
  3001                           fsr2l	equ	0xFD9
  3002                           status	equ	0xFD8
  3003                           
  3004 ;; *************** function _No_Analogs *****************
  3005 ;; Defined at:
  3006 ;;		line 226 in file "main.c"
  3007 ;; Parameters:    Size  Location     Type
  3008 ;;		None
  3009 ;; Auto vars:     Size  Location     Type
  3010 ;;		None
  3011 ;; Return value:  Size  Location     Type
  3012 ;;                  1    wreg      void 
  3013 ;; Registers used:
  3014 ;;		wreg, status,2
  3015 ;; Tracked objects:
  3016 ;;		On entry : 0/0
  3017 ;;		On exit  : 0/0
  3018 ;;		Unchanged: 0/0
  3019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3023 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3024 ;;Total ram usage:        0 bytes
  3025 ;; Hardware stack levels used:    1
  3026 ;; Hardware stack levels required when called:    2
  3027 ;; This function calls:
  3028 ;;		Nothing
  3029 ;; This function is called by:
  3030 ;;		_ConfigureHW
  3031 ;; This function uses a non-reentrant model
  3032 ;;
  3033                           
  3034                           	psect	text16
  3035  001BB8                     __ptext16:
  3036                           	opt stack 0
  3037  001BB8                     _No_Analogs:
  3038                           	opt stack 27
  3039                           
  3040                           ;main.c: 228: ANSELA = 0x00;
  3041                           
  3042                           ;incstack = 0
  3043  001BB8  0E00               	movlw	0
  3044  001BBA  010F               	movlb	15	; () banked
  3045  001BBC  6F38               	movwf	56,b	;volatile
  3046                           
  3047                           ;main.c: 229: ANSELB = 0x00;
  3048  001BBE  0E00               	movlw	0
  3049  001BC0  6F39               	movwf	57,b	;volatile
  3050                           
  3051                           ;main.c: 230: ANSELC = 0x00;
  3052  001BC2  0E00               	movlw	0
  3053  001BC4  6F3A               	movwf	58,b	;volatile
  3054                           
  3055                           ;main.c: 231: ANSELD = 0x00;
  3056  001BC6  0E00               	movlw	0
  3057  001BC8  6F3B               	movwf	59,b	;volatile
  3058                           
  3059                           ;main.c: 232: ANSELE = 0x00;
  3060  001BCA  0E00               	movlw	0
  3061  001BCC  6F3C               	movwf	60,b	;volatile
  3062                           
  3063                           ; BSR set to: 15
  3064  001BCE  0012               	return		;funcret
  3065  001BD0                     __end_of_No_Analogs:
  3066                           	opt stack 0
  3067                           tblptru	equ	0xFF8
  3068                           tblptrh	equ	0xFF7
  3069                           tblptrl	equ	0xFF6
  3070                           tablat	equ	0xFF5
  3071                           prodh	equ	0xFF4
  3072                           prodl	equ	0xFF3
  3073                           intcon	equ	0xFF2
  3074                           postinc0	equ	0xFEE
  3075                           wreg	equ	0xFE8
  3076                           postdec1	equ	0xFE5
  3077                           fsr1l	equ	0xFE1
  3078                           postinc2	equ	0xFDE
  3079                           postdec2	equ	0xFDD
  3080                           fsr2h	equ	0xFDA
  3081                           fsr2l	equ	0xFD9
  3082                           status	equ	0xFD8
  3083                           
  3084 ;; *************** function _Init1_RS232 *****************
  3085 ;; Defined at:
  3086 ;;		line 6 in file "RS232_K22.c"
  3087 ;; Parameters:    Size  Location     Type
  3088 ;;  velocity        4    8[BANK0 ] long 
  3089 ;;  mode            2   12[BANK0 ] unsigned int 
  3090 ;; Auto vars:     Size  Location     Type
  3091 ;;  value           2   14[BANK0 ] int 
  3092 ;; Return value:  Size  Location     Type
  3093 ;;                  1    wreg      void 
  3094 ;; Registers used:
  3095 ;;		wreg, status,2, status,0, cstack
  3096 ;; Tracked objects:
  3097 ;;		On entry : 0/0
  3098 ;;		On exit  : 0/0
  3099 ;;		Unchanged: 0/0
  3100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3101 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3102 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3104 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3105 ;;Total ram usage:       12 bytes
  3106 ;; Hardware stack levels used:    1
  3107 ;; Hardware stack levels required when called:    3
  3108 ;; This function calls:
  3109 ;;		___aldiv
  3110 ;; This function is called by:
  3111 ;;		_ConfigureHW
  3112 ;; This function uses a non-reentrant model
  3113 ;;
  3114                           
  3115                           	psect	text17
  3116  0015B6                     __ptext17:
  3117                           	opt stack 0
  3118  0015B6                     _Init1_RS232:
  3119                           	opt stack 26
  3120                           
  3121                           ;RS232_K22.c: 9: TRISC7 = 1;
  3122                           
  3123                           ; BSR set to: 15
  3124                           ;incstack = 0
  3125  0015B6  8E94               	bsf	3988,7,c	;volatile
  3126                           
  3127                           ;RS232_K22.c: 10: TRISC6 = 0;
  3128  0015B8  9C94               	bcf	3988,6,c	;volatile
  3129                           
  3130                           ;RS232_K22.c: 11: RCSTA1 = 0X90;
  3131  0015BA  0E90               	movlw	144
  3132  0015BC  6EAB               	movwf	4011,c	;volatile
  3133                           
  3134                           ;RS232_K22.c: 12: int value;
  3135                           ;RS232_K22.c: 13: if(mode == 1)
  3136  0015BE  0100               	movlb	0	; () banked
  3137  0015C0  05A2               	decf	Init1_RS232@mode& (0+255),w,b
  3138  0015C2  11A3               	iorwf	(Init1_RS232@mode+1)& (0+255),w,b
  3139  0015C4  A4D8               	btfss	status,2,c
  3140  0015C6  D034               	goto	l253
  3141                           
  3142                           ; BSR set to: 0
  3143                           ;RS232_K22.c: 14: {
  3144                           ;RS232_K22.c: 15: TXSTA1 = 0X24;
  3145  0015C8  0E24               	movlw	36
  3146  0015CA  6EAC               	movwf	4012,c	;volatile
  3147                           
  3148                           ; BSR set to: 0
  3149                           ;RS232_K22.c: 16: value =(unsigned int)(((40000000/velocity)-16)/16);
  3150  0015CC  C09E  F09A         	movff	Init1_RS232@velocity,___aldiv@divisor
  3151  0015D0  C09F  F09B         	movff	Init1_RS232@velocity+1,___aldiv@divisor+1
  3152  0015D4  C0A0  F09C         	movff	Init1_RS232@velocity+2,___aldiv@divisor+2
  3153  0015D8  C0A1  F09D         	movff	Init1_RS232@velocity+3,___aldiv@divisor+3
  3154  0015DC  0E00               	movlw	0
  3155  0015DE  6F96               	movwf	___aldiv@dividend& (0+255),b
  3156  0015E0  0E5A               	movlw	90
  3157  0015E2  6F97               	movwf	(___aldiv@dividend+1)& (0+255),b
  3158  0015E4  0E62               	movlw	98
  3159  0015E6  6F98               	movwf	(___aldiv@dividend+2)& (0+255),b
  3160  0015E8  0E02               	movlw	2
  3161  0015EA  6F99               	movwf	(___aldiv@dividend+3)& (0+255),b
  3162  0015EC  EC56  F00B         	call	___aldiv	;wreg free
  3163  0015F0  0EF0               	movlw	240
  3164  0015F2  0100               	movlb	0	; () banked
  3165  0015F4  2596               	addwf	?___aldiv& (0+255),w,b
  3166  0015F6  6FA6               	movwf	_Init1_RS232$2651& (0+255),b
  3167  0015F8  0EFF               	movlw	255
  3168  0015FA  2197               	addwfc	(?___aldiv+1)& (0+255),w,b
  3169  0015FC  6FA7               	movwf	(_Init1_RS232$2651+1)& (0+255),b
  3170  0015FE  0EFF               	movlw	255
  3171  001600  2198               	addwfc	(?___aldiv+2)& (0+255),w,b
  3172  001602  6FA8               	movwf	(_Init1_RS232$2651+2)& (0+255),b
  3173  001604  0EFF               	movlw	255
  3174  001606  2199               	addwfc	(?___aldiv+3)& (0+255),w,b
  3175  001608  6FA9               	movwf	(_Init1_RS232$2651+3)& (0+255),b
  3176                           
  3177                           ; BSR set to: 0
  3178                           ;RS232_K22.c: 16: value =(unsigned int)(((40000000/velocity)-16)/16);
  3179  00160A  C0A6  F096         	movff	_Init1_RS232$2651,___aldiv@dividend
  3180  00160E  C0A7  F097         	movff	_Init1_RS232$2651+1,___aldiv@dividend+1
  3181  001612  C0A8  F098         	movff	_Init1_RS232$2651+2,___aldiv@dividend+2
  3182  001616  C0A9  F099         	movff	_Init1_RS232$2651+3,___aldiv@dividend+3
  3183  00161A  0E10               	movlw	16
  3184  00161C  6F9A               	movwf	___aldiv@divisor& (0+255),b
  3185  00161E  0E00               	movlw	0
  3186  001620  6F9B               	movwf	(___aldiv@divisor+1)& (0+255),b
  3187  001622  0E00               	movlw	0
  3188  001624  6F9C               	movwf	(___aldiv@divisor+2)& (0+255),b
  3189  001626  0E00               	movlw	0
  3190  001628  6F9D               	movwf	(___aldiv@divisor+3)& (0+255),b
  3191  00162A  EC56  F00B         	call	___aldiv	;wreg free
  3192  00162E  D034               	goto	L1
  3193  001630                     l253:
  3194                           
  3195                           ;RS232_K22.c: 18: else
  3196                           ;RS232_K22.c: 19: {
  3197                           ;RS232_K22.c: 20: TXSTA1 = 0X20;
  3198  001630  0E20               	movlw	32
  3199  001632  6EAC               	movwf	4012,c	;volatile
  3200                           
  3201                           ;RS232_K22.c: 21: value =(unsigned int)(((40000000/velocity)-64)/64);
  3202  001634  C09E  F09A         	movff	Init1_RS232@velocity,___aldiv@divisor
  3203  001638  C09F  F09B         	movff	Init1_RS232@velocity+1,___aldiv@divisor+1
  3204  00163C  C0A0  F09C         	movff	Init1_RS232@velocity+2,___aldiv@divisor+2
  3205  001640  C0A1  F09D         	movff	Init1_RS232@velocity+3,___aldiv@divisor+3
  3206  001644  0E00               	movlw	0
  3207  001646  0100               	movlb	0	; () banked
  3208  001648  6F96               	movwf	___aldiv@dividend& (0+255),b
  3209  00164A  0E5A               	movlw	90
  3210  00164C  6F97               	movwf	(___aldiv@dividend+1)& (0+255),b
  3211  00164E  0E62               	movlw	98
  3212  001650  6F98               	movwf	(___aldiv@dividend+2)& (0+255),b
  3213  001652  0E02               	movlw	2
  3214  001654  6F99               	movwf	(___aldiv@dividend+3)& (0+255),b
  3215  001656  EC56  F00B         	call	___aldiv	;wreg free
  3216  00165A  0EC0               	movlw	192
  3217  00165C  0100               	movlb	0	; () banked
  3218  00165E  2596               	addwf	?___aldiv& (0+255),w,b
  3219  001660  6FA6               	movwf	_Init1_RS232$2651& (0+255),b
  3220  001662  0EFF               	movlw	255
  3221  001664  2197               	addwfc	(?___aldiv+1)& (0+255),w,b
  3222  001666  6FA7               	movwf	(_Init1_RS232$2651+1)& (0+255),b
  3223  001668  0EFF               	movlw	255
  3224  00166A  2198               	addwfc	(?___aldiv+2)& (0+255),w,b
  3225  00166C  6FA8               	movwf	(_Init1_RS232$2651+2)& (0+255),b
  3226  00166E  0EFF               	movlw	255
  3227  001670  2199               	addwfc	(?___aldiv+3)& (0+255),w,b
  3228  001672  6FA9               	movwf	(_Init1_RS232$2651+3)& (0+255),b
  3229                           
  3230                           ; BSR set to: 0
  3231                           ;RS232_K22.c: 21: value =(unsigned int)(((40000000/velocity)-64)/64);
  3232  001674  C0A6  F096         	movff	_Init1_RS232$2651,___aldiv@dividend
  3233  001678  C0A7  F097         	movff	_Init1_RS232$2651+1,___aldiv@dividend+1
  3234  00167C  C0A8  F098         	movff	_Init1_RS232$2651+2,___aldiv@dividend+2
  3235  001680  C0A9  F099         	movff	_Init1_RS232$2651+3,___aldiv@dividend+3
  3236  001684  0E40               	movlw	64
  3237  001686  6F9A               	movwf	___aldiv@divisor& (0+255),b
  3238  001688  0E00               	movlw	0
  3239  00168A  6F9B               	movwf	(___aldiv@divisor+1)& (0+255),b
  3240  00168C  0E00               	movlw	0
  3241  00168E  6F9C               	movwf	(___aldiv@divisor+2)& (0+255),b
  3242  001690  0E00               	movlw	0
  3243  001692  6F9D               	movwf	(___aldiv@divisor+3)& (0+255),b
  3244  001694  EC56  F00B         	call	___aldiv	;wreg free
  3245  001698                     L1:
  3246  001698  C096  F0A4         	movff	?___aldiv,Init1_RS232@value
  3247  00169C  C097  F0A5         	movff	?___aldiv+1,Init1_RS232@value+1
  3248                           
  3249                           ;RS232_K22.c: 22: }
  3250                           ;RS232_K22.c: 27: BAUDCON1bits.BRG16 = 0;
  3251  0016A0  96B8               	bcf	4024,3,c	;volatile
  3252                           
  3253                           ;RS232_K22.c: 28: SPBRG1 = value;
  3254  0016A2  C0A4  FFAF         	movff	Init1_RS232@value,4015	;volatile
  3255                           
  3256                           ;RS232_K22.c: 29: RC1IE = 1;
  3257  0016A6  8A9D               	bsf	3997,5,c	;volatile
  3258                           
  3259                           ;RS232_K22.c: 30: TX1IE = 0;
  3260  0016A8  989D               	bcf	3997,4,c	;volatile
  3261  0016AA  0012               	return		;funcret
  3262  0016AC                     __end_of_Init1_RS232:
  3263                           	opt stack 0
  3264                           tblptru	equ	0xFF8
  3265                           tblptrh	equ	0xFF7
  3266                           tblptrl	equ	0xFF6
  3267                           tablat	equ	0xFF5
  3268                           prodh	equ	0xFF4
  3269                           prodl	equ	0xFF3
  3270                           intcon	equ	0xFF2
  3271                           postinc0	equ	0xFEE
  3272                           wreg	equ	0xFE8
  3273                           postdec1	equ	0xFE5
  3274                           fsr1l	equ	0xFE1
  3275                           postinc2	equ	0xFDE
  3276                           postdec2	equ	0xFDD
  3277                           fsr2h	equ	0xFDA
  3278                           fsr2l	equ	0xFD9
  3279                           status	equ	0xFD8
  3280                           
  3281 ;; *************** function ___aldiv *****************
  3282 ;; Defined at:
  3283 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  3284 ;; Parameters:    Size  Location     Type
  3285 ;;  dividend        4    0[BANK0 ] long 
  3286 ;;  divisor         4    4[BANK0 ] long 
  3287 ;; Auto vars:     Size  Location     Type
  3288 ;;  quotient        4   27[COMRAM] long 
  3289 ;;  sign            1   26[COMRAM] unsigned char 
  3290 ;;  counter         1   25[COMRAM] unsigned char 
  3291 ;; Return value:  Size  Location     Type
  3292 ;;                  4    0[BANK0 ] long 
  3293 ;; Registers used:
  3294 ;;		wreg, status,2, status,0
  3295 ;; Tracked objects:
  3296 ;;		On entry : 0/0
  3297 ;;		On exit  : 0/0
  3298 ;;		Unchanged: 0/0
  3299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3300 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3301 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3303 ;;      Totals:         6       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3304 ;;Total ram usage:       14 bytes
  3305 ;; Hardware stack levels used:    1
  3306 ;; Hardware stack levels required when called:    2
  3307 ;; This function calls:
  3308 ;;		Nothing
  3309 ;; This function is called by:
  3310 ;;		_Init1_RS232
  3311 ;;		_Init2_RS232
  3312 ;; This function uses a non-reentrant model
  3313 ;;
  3314                           
  3315                           	psect	text18
  3316  0016AC                     __ptext18:
  3317                           	opt stack 0
  3318  0016AC                     ___aldiv:
  3319                           	opt stack 26
  3320                           
  3321                           ;incstack = 0
  3322  0016AC  0E00               	movlw	0
  3323  0016AE  6E40               	movwf	___aldiv@sign,c
  3324  0016B0  0100               	movlb	0	; () banked
  3325  0016B2  AF9D               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  3326  0016B4  D00A               	goto	l626
  3327                           
  3328                           ; BSR set to: 0
  3329  0016B6  1F9D               	comf	(___aldiv@divisor+3)& (0+255),f,b
  3330  0016B8  1F9C               	comf	(___aldiv@divisor+2)& (0+255),f,b
  3331  0016BA  1F9B               	comf	(___aldiv@divisor+1)& (0+255),f,b
  3332  0016BC  6D9A               	negf	___aldiv@divisor& (0+255),b
  3333  0016BE  0E00               	movlw	0
  3334  0016C0  239B               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  3335  0016C2  239C               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  3336  0016C4  239D               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  3337                           
  3338                           ; BSR set to: 0
  3339  0016C6  0E01               	movlw	1
  3340  0016C8  6E40               	movwf	___aldiv@sign,c
  3341  0016CA                     l626:
  3342                           
  3343                           ; BSR set to: 0
  3344                           
  3345                           ; BSR set to: 0
  3346  0016CA  AF99               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  3347  0016CC  D00A               	goto	l627
  3348                           
  3349                           ; BSR set to: 0
  3350  0016CE  1F99               	comf	(___aldiv@dividend+3)& (0+255),f,b
  3351  0016D0  1F98               	comf	(___aldiv@dividend+2)& (0+255),f,b
  3352  0016D2  1F97               	comf	(___aldiv@dividend+1)& (0+255),f,b
  3353  0016D4  6D96               	negf	___aldiv@dividend& (0+255),b
  3354  0016D6  0E00               	movlw	0
  3355  0016D8  2397               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  3356  0016DA  2398               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  3357  0016DC  2399               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  3358                           
  3359                           ; BSR set to: 0
  3360  0016DE  0E01               	movlw	1
  3361  0016E0  1A40               	xorwf	___aldiv@sign,f,c
  3362  0016E2                     l627:
  3363                           
  3364                           ; BSR set to: 0
  3365                           
  3366                           ; BSR set to: 0
  3367  0016E2  0E00               	movlw	0
  3368  0016E4  6E41               	movwf	___aldiv@quotient,c
  3369  0016E6  0E00               	movlw	0
  3370  0016E8  6E42               	movwf	___aldiv@quotient+1,c
  3371  0016EA  0E00               	movlw	0
  3372  0016EC  6E43               	movwf	___aldiv@quotient+2,c
  3373  0016EE  0E00               	movlw	0
  3374  0016F0  6E44               	movwf	___aldiv@quotient+3,c
  3375                           
  3376                           ; BSR set to: 0
  3377  0016F2  519A               	movf	___aldiv@divisor& (0+255),w,b
  3378  0016F4  119B               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  3379  0016F6  119C               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  3380  0016F8  119D               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  3381  0016FA  B4D8               	btfsc	status,2,c
  3382  0016FC  D02A               	goto	l634
  3383                           
  3384                           ; BSR set to: 0
  3385  0016FE  0E01               	movlw	1
  3386  001700  6E3F               	movwf	___aldiv@counter,c
  3387  001702  D006               	goto	l629
  3388  001704                     
  3389                           ; BSR set to: 0
  3390                           
  3391                           ; BSR set to: 0
  3392  001704  90D8               	bcf	status,0,c
  3393  001706  379A               	rlcf	___aldiv@divisor& (0+255),f,b
  3394  001708  379B               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  3395  00170A  379C               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  3396  00170C  379D               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  3397  00170E  2A3F               	incf	___aldiv@counter,f,c
  3398  001710                     l629:
  3399                           
  3400                           ; BSR set to: 0
  3401                           
  3402                           ; BSR set to: 0
  3403  001710  AF9D               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  3404  001712  D7F8               	goto	l630
  3405  001714                     u1180:
  3406                           
  3407                           ; BSR set to: 0
  3408                           
  3409                           ; BSR set to: 0
  3410                           
  3411                           ; BSR set to: 0
  3412  001714  90D8               	bcf	status,0,c
  3413  001716  3641               	rlcf	___aldiv@quotient,f,c
  3414  001718  3642               	rlcf	___aldiv@quotient+1,f,c
  3415  00171A  3643               	rlcf	___aldiv@quotient+2,f,c
  3416  00171C  3644               	rlcf	___aldiv@quotient+3,f,c
  3417                           
  3418                           ; BSR set to: 0
  3419  00171E  519A               	movf	___aldiv@divisor& (0+255),w,b
  3420  001720  5D96               	subwf	___aldiv@dividend& (0+255),w,b
  3421  001722  519B               	movf	(___aldiv@divisor+1)& (0+255),w,b
  3422  001724  5997               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  3423  001726  519C               	movf	(___aldiv@divisor+2)& (0+255),w,b
  3424  001728  5998               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  3425  00172A  519D               	movf	(___aldiv@divisor+3)& (0+255),w,b
  3426  00172C  5999               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  3427  00172E  A0D8               	btfss	status,0,c
  3428  001730  D009               	goto	l633
  3429                           
  3430                           ; BSR set to: 0
  3431  001732  519A               	movf	___aldiv@divisor& (0+255),w,b
  3432  001734  5F96               	subwf	___aldiv@dividend& (0+255),f,b
  3433  001736  519B               	movf	(___aldiv@divisor+1)& (0+255),w,b
  3434  001738  5B97               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  3435  00173A  519C               	movf	(___aldiv@divisor+2)& (0+255),w,b
  3436  00173C  5B98               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  3437  00173E  519D               	movf	(___aldiv@divisor+3)& (0+255),w,b
  3438  001740  5B99               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  3439                           
  3440                           ; BSR set to: 0
  3441  001742  8041               	bsf	___aldiv@quotient,0,c
  3442  001744                     l633:
  3443                           
  3444                           ; BSR set to: 0
  3445                           
  3446                           ; BSR set to: 0
  3447  001744  90D8               	bcf	status,0,c
  3448  001746  339D               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  3449  001748  339C               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  3450  00174A  339B               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  3451  00174C  339A               	rrcf	___aldiv@divisor& (0+255),f,b
  3452                           
  3453                           ; BSR set to: 0
  3454  00174E  2E3F               	decfsz	___aldiv@counter,f,c
  3455  001750  D7E1               	goto	u1180
  3456  001752                     l634:
  3457                           
  3458                           ; BSR set to: 0
  3459                           
  3460                           ; BSR set to: 0
  3461                           
  3462                           ; BSR set to: 0
  3463  001752  5040               	movf	___aldiv@sign,w,c
  3464  001754  B4D8               	btfsc	status,2,c
  3465  001756  D008               	goto	l635
  3466                           
  3467                           ; BSR set to: 0
  3468  001758  1E44               	comf	___aldiv@quotient+3,f,c
  3469  00175A  1E43               	comf	___aldiv@quotient+2,f,c
  3470  00175C  1E42               	comf	___aldiv@quotient+1,f,c
  3471  00175E  6C41               	negf	___aldiv@quotient,c
  3472  001760  0E00               	movlw	0
  3473  001762  2242               	addwfc	___aldiv@quotient+1,f,c
  3474  001764  2243               	addwfc	___aldiv@quotient+2,f,c
  3475  001766  2244               	addwfc	___aldiv@quotient+3,f,c
  3476  001768                     l635:
  3477                           
  3478                           ; BSR set to: 0
  3479                           
  3480                           ; BSR set to: 0
  3481  001768  C041  F096         	movff	___aldiv@quotient,?___aldiv
  3482  00176C  C042  F097         	movff	___aldiv@quotient+1,?___aldiv+1
  3483  001770  C043  F098         	movff	___aldiv@quotient+2,?___aldiv+2
  3484  001774  C044  F099         	movff	___aldiv@quotient+3,?___aldiv+3
  3485  001778  0012               	return	
  3486  00177A                     __end_of___aldiv:
  3487                           	opt stack 0
  3488                           tblptru	equ	0xFF8
  3489                           tblptrh	equ	0xFF7
  3490                           tblptrl	equ	0xFF6
  3491                           tablat	equ	0xFF5
  3492                           prodh	equ	0xFF4
  3493                           prodl	equ	0xFF3
  3494                           intcon	equ	0xFF2
  3495                           postinc0	equ	0xFEE
  3496                           wreg	equ	0xFE8
  3497                           postdec1	equ	0xFE5
  3498                           fsr1l	equ	0xFE1
  3499                           postinc2	equ	0xFDE
  3500                           postdec2	equ	0xFDD
  3501                           fsr2h	equ	0xFDA
  3502                           fsr2l	equ	0xFD9
  3503                           status	equ	0xFD8
  3504                           
  3505 ;; *************** function _Config_Timer3 *****************
  3506 ;; Defined at:
  3507 ;;		line 49 in file "TIMERS_XC8.c"
  3508 ;; Parameters:    Size  Location     Type
  3509 ;;		None
  3510 ;; Auto vars:     Size  Location     Type
  3511 ;;		None
  3512 ;; Return value:  Size  Location     Type
  3513 ;;                  1    wreg      void 
  3514 ;; Registers used:
  3515 ;;		wreg, status,2
  3516 ;; Tracked objects:
  3517 ;;		On entry : 0/0
  3518 ;;		On exit  : 0/0
  3519 ;;		Unchanged: 0/0
  3520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3524 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3525 ;;Total ram usage:        0 bytes
  3526 ;; Hardware stack levels used:    1
  3527 ;; Hardware stack levels required when called:    2
  3528 ;; This function calls:
  3529 ;;		Nothing
  3530 ;; This function is called by:
  3531 ;;		_ConfigureHW
  3532 ;; This function uses a non-reentrant model
  3533 ;;
  3534                           
  3535                           	psect	text19
  3536  001B84                     __ptext19:
  3537                           	opt stack 0
  3538  001B84                     _Config_Timer3:
  3539                           	opt stack 27
  3540                           
  3541                           ;TIMERS_XC8.c: 51: TMR3IE = 0;
  3542                           
  3543                           ; BSR set to: 0
  3544                           ;incstack = 0
  3545  001B84  92A0               	bcf	4000,1,c	;volatile
  3546                           
  3547                           ;TIMERS_XC8.c: 59: T3CONbits.T3CKPS1 = 0;
  3548  001B86  9AB1               	bcf	4017,5,c	;volatile
  3549                           
  3550                           ;TIMERS_XC8.c: 60: T3CONbits.T3CKPS0 = 0;
  3551  001B88  98B1               	bcf	4017,4,c	;volatile
  3552                           
  3553                           ;TIMERS_XC8.c: 62: T3CONbits.T3SOSCEN = 0;
  3554  001B8A  96B1               	bcf	4017,3,c	;volatile
  3555                           
  3556                           ;TIMERS_XC8.c: 63: T3CONbits.TMR3CS = 0;
  3557  001B8C  0E3F               	movlw	-193
  3558  001B8E  16B1               	andwf	4017,f,c	;volatile
  3559                           
  3560                           ;TIMERS_XC8.c: 64: T3CONbits.T3RD16 = 1;
  3561  001B90  82B1               	bsf	4017,1,c	;volatile
  3562                           
  3563                           ;TIMERS_XC8.c: 65: TMR3L = 0;
  3564  001B92  0E00               	movlw	0
  3565  001B94  6EB2               	movwf	4018,c	;volatile
  3566                           
  3567                           ;TIMERS_XC8.c: 66: TMR3H = 0;
  3568  001B96  0E00               	movlw	0
  3569  001B98  6EB3               	movwf	4019,c	;volatile
  3570                           
  3571                           ;TIMERS_XC8.c: 68: T3CONbits.TMR3ON = 1;
  3572  001B9A  80B1               	bsf	4017,0,c	;volatile
  3573  001B9C  0012               	return		;funcret
  3574  001B9E                     __end_of_Config_Timer3:
  3575                           	opt stack 0
  3576                           tblptru	equ	0xFF8
  3577                           tblptrh	equ	0xFF7
  3578                           tblptrl	equ	0xFF6
  3579                           tablat	equ	0xFF5
  3580                           prodh	equ	0xFF4
  3581                           prodl	equ	0xFF3
  3582                           intcon	equ	0xFF2
  3583                           postinc0	equ	0xFEE
  3584                           wreg	equ	0xFE8
  3585                           postdec1	equ	0xFE5
  3586                           fsr1l	equ	0xFE1
  3587                           postinc2	equ	0xFDE
  3588                           postdec2	equ	0xFDD
  3589                           fsr2h	equ	0xFDA
  3590                           fsr2l	equ	0xFD9
  3591                           status	equ	0xFD8
  3592                           
  3593 ;; *************** function _Config_Timer1 *****************
  3594 ;; Defined at:
  3595 ;;		line 14 in file "TIMERS_XC8.c"
  3596 ;; Parameters:    Size  Location     Type
  3597 ;;		None
  3598 ;; Auto vars:     Size  Location     Type
  3599 ;;		None
  3600 ;; Return value:  Size  Location     Type
  3601 ;;                  1    wreg      void 
  3602 ;; Registers used:
  3603 ;;		wreg, status,2
  3604 ;; Tracked objects:
  3605 ;;		On entry : 0/0
  3606 ;;		On exit  : 0/0
  3607 ;;		Unchanged: 0/0
  3608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3612 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3613 ;;Total ram usage:        0 bytes
  3614 ;; Hardware stack levels used:    1
  3615 ;; Hardware stack levels required when called:    2
  3616 ;; This function calls:
  3617 ;;		Nothing
  3618 ;; This function is called by:
  3619 ;;		_ConfigureHW
  3620 ;; This function uses a non-reentrant model
  3621 ;;
  3622                           
  3623                           	psect	text20
  3624  001BF8                     __ptext20:
  3625                           	opt stack 0
  3626  001BF8                     _Config_Timer1:
  3627                           	opt stack 27
  3628                           
  3629                           ;TIMERS_XC8.c: 16: TMR1IE = 0;
  3630                           
  3631                           ;incstack = 0
  3632  001BF8  909D               	bcf	3997,0,c	;volatile
  3633                           
  3634                           ;TIMERS_XC8.c: 24: T1CONbits.T1CKPS1 = 1;
  3635  001BFA  8ACD               	bsf	4045,5,c	;volatile
  3636                           
  3637                           ;TIMERS_XC8.c: 25: T1CONbits.T1CKPS0 = 0;
  3638  001BFC  98CD               	bcf	4045,4,c	;volatile
  3639                           
  3640                           ;TIMERS_XC8.c: 27: T1CONbits.T1OSCEN = 0;
  3641  001BFE  96CD               	bcf	4045,3,c	;volatile
  3642                           
  3643                           ;TIMERS_XC8.c: 28: T1CONbits.TMR1CS = 0;
  3644  001C00  0E3F               	movlw	-193
  3645  001C02  16CD               	andwf	4045,f,c	;volatile
  3646                           
  3647                           ;TIMERS_XC8.c: 29: T1CONbits.T1RD16 = 1;
  3648  001C04  82CD               	bsf	4045,1,c	;volatile
  3649                           
  3650                           ;TIMERS_XC8.c: 32: T1CONbits.TMR1ON = 1;
  3651  001C06  80CD               	bsf	4045,0,c	;volatile
  3652  001C08  0012               	return		;funcret
  3653  001C0A                     __end_of_Config_Timer1:
  3654                           	opt stack 0
  3655                           tblptru	equ	0xFF8
  3656                           tblptrh	equ	0xFF7
  3657                           tblptrl	equ	0xFF6
  3658                           tablat	equ	0xFF5
  3659                           prodh	equ	0xFF4
  3660                           prodl	equ	0xFF3
  3661                           intcon	equ	0xFF2
  3662                           postinc0	equ	0xFEE
  3663                           wreg	equ	0xFE8
  3664                           postdec1	equ	0xFE5
  3665                           fsr1l	equ	0xFE1
  3666                           postinc2	equ	0xFDE
  3667                           postdec2	equ	0xFDD
  3668                           fsr2h	equ	0xFDA
  3669                           fsr2l	equ	0xFD9
  3670                           status	equ	0xFD8
  3671                           
  3672 ;; *************** function _CONFIG_MCP2515 *****************
  3673 ;; Defined at:
  3674 ;;		line 43 in file "MCP2515.c"
  3675 ;; Parameters:    Size  Location     Type
  3676 ;;		None
  3677 ;; Auto vars:     Size  Location     Type
  3678 ;;		None
  3679 ;; Return value:  Size  Location     Type
  3680 ;;                  1    wreg      void 
  3681 ;; Registers used:
  3682 ;;		wreg, status,2, cstack
  3683 ;; Tracked objects:
  3684 ;;		On entry : 0/0
  3685 ;;		On exit  : 0/0
  3686 ;;		Unchanged: 0/0
  3687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3691 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3692 ;;Total ram usage:        0 bytes
  3693 ;; Hardware stack levels used:    1
  3694 ;; Hardware stack levels required when called:    4
  3695 ;; This function calls:
  3696 ;;		_CAN_SPI2_WRITE
  3697 ;; This function is called by:
  3698 ;;		_ConfigureHW
  3699 ;; This function uses a non-reentrant model
  3700 ;;
  3701                           
  3702                           	psect	text21
  3703  001AF0                     __ptext21:
  3704                           	opt stack 0
  3705  001AF0                     _CONFIG_MCP2515:
  3706                           	opt stack 25
  3707                           
  3708                           ;MCP2515.c: 45: CAN_SPI2_WRITE(0x0F, 0x80);
  3709                           
  3710                           ;incstack = 0
  3711  001AF0  0E80               	movlw	128
  3712  001AF2  6E40               	movwf	CAN_SPI2_WRITE@data,c
  3713  001AF4  0E0F               	movlw	15
  3714  001AF6  EC59  F00D         	call	_CAN_SPI2_WRITE
  3715                           
  3716                           ;MCP2515.c: 46: CAN_SPI2_WRITE(0x28, 0x02);
  3717  001AFA  0E02               	movlw	2
  3718  001AFC  6E40               	movwf	CAN_SPI2_WRITE@data,c
  3719  001AFE  0E28               	movlw	40
  3720  001B00  EC59  F00D         	call	_CAN_SPI2_WRITE
  3721                           
  3722                           ;MCP2515.c: 47: CAN_SPI2_WRITE(0x29, 0xA0);
  3723  001B04  0EA0               	movlw	160
  3724  001B06  6E40               	movwf	CAN_SPI2_WRITE@data,c
  3725  001B08  0E29               	movlw	41
  3726  001B0A  EC59  F00D         	call	_CAN_SPI2_WRITE
  3727                           
  3728                           ;MCP2515.c: 48: CAN_SPI2_WRITE(0x2A, 0x01);
  3729  001B0E  0E01               	movlw	1
  3730  001B10  6E40               	movwf	CAN_SPI2_WRITE@data,c
  3731  001B12  0E2A               	movlw	42
  3732  001B14  EC59  F00D         	call	_CAN_SPI2_WRITE
  3733                           
  3734                           ;MCP2515.c: 49: CAN_SPI2_WRITE(0x0F, 0x00);
  3735  001B18  0E00               	movlw	0
  3736  001B1A  6E40               	movwf	CAN_SPI2_WRITE@data,c
  3737  001B1C  0E0F               	movlw	15
  3738  001B1E  EC59  F00D         	call	_CAN_SPI2_WRITE
  3739  001B22  0012               	return		;funcret
  3740  001B24                     __end_of_CONFIG_MCP2515:
  3741                           	opt stack 0
  3742                           tblptru	equ	0xFF8
  3743                           tblptrh	equ	0xFF7
  3744                           tblptrl	equ	0xFF6
  3745                           tablat	equ	0xFF5
  3746                           prodh	equ	0xFF4
  3747                           prodl	equ	0xFF3
  3748                           intcon	equ	0xFF2
  3749                           postinc0	equ	0xFEE
  3750                           wreg	equ	0xFE8
  3751                           postdec1	equ	0xFE5
  3752                           fsr1l	equ	0xFE1
  3753                           postinc2	equ	0xFDE
  3754                           postdec2	equ	0xFDD
  3755                           fsr2h	equ	0xFDA
  3756                           fsr2l	equ	0xFD9
  3757                           status	equ	0xFD8
  3758                           
  3759 ;; *************** function _CAN_SPI2_WRITE *****************
  3760 ;; Defined at:
  3761 ;;		line 15 in file "MCP2515.c"
  3762 ;; Parameters:    Size  Location     Type
  3763 ;;  addr            1    wreg     unsigned char 
  3764 ;;  data            1   26[COMRAM] unsigned char 
  3765 ;; Auto vars:     Size  Location     Type
  3766 ;;  addr            1   27[COMRAM] unsigned char 
  3767 ;; Return value:  Size  Location     Type
  3768 ;;                  1    wreg      void 
  3769 ;; Registers used:
  3770 ;;		wreg, status,2, cstack
  3771 ;; Tracked objects:
  3772 ;;		On entry : 0/0
  3773 ;;		On exit  : 0/0
  3774 ;;		Unchanged: 0/0
  3775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3776 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3777 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3779 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3780 ;;Total ram usage:        2 bytes
  3781 ;; Hardware stack levels used:    1
  3782 ;; Hardware stack levels required when called:    3
  3783 ;; This function calls:
  3784 ;;		_MASTER_SPI_WRITE2
  3785 ;; This function is called by:
  3786 ;;		_PutRXRotation
  3787 ;;		_PutRXTempMotor
  3788 ;;		_CONFIG_MCP2515
  3789 ;; This function uses a non-reentrant model
  3790 ;;
  3791                           
  3792                           	psect	text22
  3793  001AB2                     __ptext22:
  3794                           	opt stack 0
  3795  001AB2                     _CAN_SPI2_WRITE:
  3796                           	opt stack 26
  3797                           
  3798                           ;incstack = 0
  3799                           ;CAN_SPI2_WRITE@addr stored from wreg
  3800  001AB2  6E41               	movwf	CAN_SPI2_WRITE@addr,c
  3801                           
  3802                           ;MCP2515.c: 17: LATCbits.LATC2 = 0;
  3803  001AB4  948B               	bcf	3979,2,c	;volatile
  3804                           
  3805                           ;MCP2515.c: 18: LATCbits.LATC2 = 1;
  3806  001AB6  848B               	bsf	3979,2,c	;volatile
  3807                           
  3808                           ;MCP2515.c: 19: _delay((unsigned long)((10)*(40000000/4000000.0)));
  3809  001AB8  0E21               	movlw	33
  3810  001ABA                     u1597:
  3811  001ABA  2EE8               	decfsz	wreg,f,c
  3812  001ABC  D7FE               	bra	u1597
  3813  001ABE  F000               	nop	
  3814                           
  3815                           ;MCP2515.c: 20: LATCbits.LATC2 = 0;
  3816  001AC0  948B               	bcf	3979,2,c	;volatile
  3817                           
  3818                           ;MCP2515.c: 21: MASTER_SPI_WRITE2((0x02));
  3819  001AC2  0E02               	movlw	2
  3820  001AC4  EC0D  F00E         	call	_MASTER_SPI_WRITE2
  3821                           
  3822                           ;MCP2515.c: 22: _delay((unsigned long)((40)*(40000000/4000000.0)));
  3823  001AC8  0E85               	movlw	133
  3824  001ACA                     u1607:
  3825  001ACA  2EE8               	decfsz	wreg,f,c
  3826  001ACC  D7FE               	bra	u1607
  3827  001ACE  F000               	nop	
  3828                           
  3829                           ;MCP2515.c: 23: MASTER_SPI_WRITE2(addr);
  3830  001AD0  5041               	movf	CAN_SPI2_WRITE@addr,w,c
  3831  001AD2  EC0D  F00E         	call	_MASTER_SPI_WRITE2
  3832                           
  3833                           ;MCP2515.c: 24: _delay((unsigned long)((40)*(40000000/4000000.0)));
  3834  001AD6  0E85               	movlw	133
  3835  001AD8                     u1617:
  3836  001AD8  2EE8               	decfsz	wreg,f,c
  3837  001ADA  D7FE               	bra	u1617
  3838  001ADC  F000               	nop	
  3839                           
  3840                           ;MCP2515.c: 25: MASTER_SPI_WRITE2(data);
  3841  001ADE  5040               	movf	CAN_SPI2_WRITE@data,w,c
  3842  001AE0  EC0D  F00E         	call	_MASTER_SPI_WRITE2
  3843                           
  3844                           ;MCP2515.c: 26: _delay((unsigned long)((40)*(40000000/4000000.0)));
  3845  001AE4  0E85               	movlw	133
  3846  001AE6                     u1627:
  3847  001AE6  2EE8               	decfsz	wreg,f,c
  3848  001AE8  D7FE               	bra	u1627
  3849  001AEA  F000               	nop	
  3850                           
  3851                           ;MCP2515.c: 28: LATCbits.LATC2 = 1;
  3852  001AEC  848B               	bsf	3979,2,c	;volatile
  3853  001AEE  0012               	return		;funcret
  3854  001AF0                     __end_of_CAN_SPI2_WRITE:
  3855                           	opt stack 0
  3856                           tblptru	equ	0xFF8
  3857                           tblptrh	equ	0xFF7
  3858                           tblptrl	equ	0xFF6
  3859                           tablat	equ	0xFF5
  3860                           prodh	equ	0xFF4
  3861                           prodl	equ	0xFF3
  3862                           intcon	equ	0xFF2
  3863                           postinc0	equ	0xFEE
  3864                           wreg	equ	0xFE8
  3865                           postdec1	equ	0xFE5
  3866                           fsr1l	equ	0xFE1
  3867                           postinc2	equ	0xFDE
  3868                           postdec2	equ	0xFDD
  3869                           fsr2h	equ	0xFDA
  3870                           fsr2l	equ	0xFD9
  3871                           status	equ	0xFD8
  3872                           
  3873 ;; *************** function _MASTER_SPI_WRITE2 *****************
  3874 ;; Defined at:
  3875 ;;		line 123 in file "SPI_XC8.c"
  3876 ;; Parameters:    Size  Location     Type
  3877 ;;  dados           1    wreg     unsigned char 
  3878 ;; Auto vars:     Size  Location     Type
  3879 ;;  dados           1   25[COMRAM] unsigned char 
  3880 ;; Return value:  Size  Location     Type
  3881 ;;                  1    wreg      void 
  3882 ;; Registers used:
  3883 ;;		wreg
  3884 ;; Tracked objects:
  3885 ;;		On entry : 0/0
  3886 ;;		On exit  : 0/0
  3887 ;;		Unchanged: 0/0
  3888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3890 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3892 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3893 ;;Total ram usage:        1 bytes
  3894 ;; Hardware stack levels used:    1
  3895 ;; Hardware stack levels required when called:    2
  3896 ;; This function calls:
  3897 ;;		Nothing
  3898 ;; This function is called by:
  3899 ;;		_CAN_SPI2_WRITE
  3900 ;;		_RESET_CAN
  3901 ;; This function uses a non-reentrant model
  3902 ;;
  3903                           
  3904                           	psect	text23
  3905  001C1A                     __ptext23:
  3906                           	opt stack 0
  3907  001C1A                     _MASTER_SPI_WRITE2:
  3908                           	opt stack 26
  3909                           
  3910                           ;incstack = 0
  3911                           ;MASTER_SPI_WRITE2@dados stored from wreg
  3912  001C1A  6E3F               	movwf	MASTER_SPI_WRITE2@dados,c
  3913                           
  3914                           ;SPI_XC8.c: 125: SSP2BUF = dados;
  3915  001C1C  C03F  FF6F         	movff	MASTER_SPI_WRITE2@dados,3951	;volatile
  3916  001C20  B06D               	btfsc	3949,0,c	;volatile
  3917  001C22  0012               	return	
  3918  001C24  D7FD               	goto	l538
  3919  001C26                     __end_of_MASTER_SPI_WRITE2:
  3920                           	opt stack 0
  3921                           tblptru	equ	0xFF8
  3922                           tblptrh	equ	0xFF7
  3923                           tblptrl	equ	0xFF6
  3924                           tablat	equ	0xFF5
  3925                           prodh	equ	0xFF4
  3926                           prodl	equ	0xFF3
  3927                           intcon	equ	0xFF2
  3928                           postinc0	equ	0xFEE
  3929                           wreg	equ	0xFE8
  3930                           postdec1	equ	0xFE5
  3931                           fsr1l	equ	0xFE1
  3932                           postinc2	equ	0xFDE
  3933                           postdec2	equ	0xFDD
  3934                           fsr2h	equ	0xFDA
  3935                           fsr2l	equ	0xFD9
  3936                           status	equ	0xFD8
  3937                           
  3938 ;; *************** function _isr *****************
  3939 ;; Defined at:
  3940 ;;		line 148 in file "main.c"
  3941 ;; Parameters:    Size  Location     Type
  3942 ;;		None
  3943 ;; Auto vars:     Size  Location     Type
  3944 ;;		None
  3945 ;; Return value:  Size  Location     Type
  3946 ;;                  1    wreg      void 
  3947 ;; Registers used:
  3948 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3949 ;; Tracked objects:
  3950 ;;		On entry : 0/0
  3951 ;;		On exit  : 0/0
  3952 ;;		Unchanged: 0/0
  3953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3956 ;;      Temps:         20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3957 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3958 ;;Total ram usage:       20 bytes
  3959 ;; Hardware stack levels used:    1
  3960 ;; Hardware stack levels required when called:    1
  3961 ;; This function calls:
  3962 ;;		_Make16
  3963 ;;		_SLAVE_SPI_READ1
  3964 ;;		i2_Set_Timer3
  3965 ;; This function is called by:
  3966 ;;		Interrupt level 2
  3967 ;; This function uses a non-reentrant model
  3968 ;;
  3969                           
  3970                           	psect	intcode
  3971  000008                     __pintcode:
  3972                           	opt stack 0
  3973  000008                     _isr:
  3974                           	opt stack 25
  3975                           
  3976                           ;incstack = 0
  3977  000008  8246               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3978  00000A  CFFA F02D          	movff	pclath,??_isr+2
  3979  00000E  CFFB F02E          	movff	pclatu,??_isr+3
  3980  000012  CFE9 F02F          	movff	fsr0l,??_isr+4
  3981  000016  CFEA F030          	movff	fsr0h,??_isr+5
  3982  00001A  CFE1 F031          	movff	fsr1l,??_isr+6
  3983  00001E  CFE2 F032          	movff	fsr1h,??_isr+7
  3984  000022  CFD9 F033          	movff	fsr2l,??_isr+8
  3985  000026  CFDA F034          	movff	fsr2h,??_isr+9
  3986  00002A  CFF3 F035          	movff	prodl,??_isr+10
  3987  00002E  CFF4 F036          	movff	prodh,??_isr+11
  3988  000032  CFF6 F037          	movff	tblptrl,??_isr+12
  3989  000036  CFF7 F038          	movff	tblptrh,??_isr+13
  3990  00003A  CFF8 F039          	movff	tblptru,??_isr+14
  3991  00003E  CFF5 F03A          	movff	tablat,??_isr+15
  3992  000042  C046  F03B         	movff	btemp,??_isr+16
  3993  000046  C047  F03C         	movff	btemp+1,??_isr+17
  3994  00004A  C048  F03D         	movff	btemp+2,??_isr+18
  3995  00004E  C049  F03E         	movff	btemp+3,??_isr+19
  3996                           
  3997                           ;main.c: 150: if(PIR1bits.SSP1IF && PIE1bits.SSP1IE)
  3998  000052  B69E               	btfsc	3998,3,c	;volatile
  3999  000054  A69D               	btfss	3997,3,c	;volatile
  4000  000056  D05D               	goto	i2l125
  4001                           
  4002                           ;main.c: 151: {
  4003                           ;main.c: 152: (PIE1bits.SSP1IE = 0);
  4004  000058  969D               	bcf	3997,3,c	;volatile
  4005                           
  4006                           ;main.c: 153: (PIR1bits.SSP1IF = 0);
  4007  00005A  969E               	bcf	3998,3,c	;volatile
  4008                           
  4009                           ;main.c: 155: valor[spi_ctr] = SLAVE_SPI_READ1();
  4010  00005C  EC1D  F00E         	call	_SLAVE_SPI_READ1	;wreg free
  4011  000060  6E2B               	movwf	??_isr& (0+255),c
  4012  000062  6A2C               	clrf	(??_isr+1)& (0+255),c
  4013  000064  90D8               	bcf	status,0,c
  4014  000066  3423               	rlcf	_spi_ctr,w,c
  4015  000068  6ED9               	movwf	fsr2l,c
  4016  00006A  3424               	rlcf	_spi_ctr+1,w,c
  4017  00006C  6EDA               	movwf	fsr2h,c
  4018  00006E  0E7A               	movlw	low _valor
  4019  000070  26D9               	addwf	fsr2l,f,c
  4020  000072  0E00               	movlw	high _valor
  4021  000074  22DA               	addwfc	fsr2h,f,c
  4022  000076  C02B  FFDE         	movff	??_isr,postinc2
  4023  00007A  C02C  FFDD         	movff	??_isr+1,postdec2
  4024                           
  4025                           ;main.c: 156: spi_ctr++;
  4026  00007E  4A23               	infsnz	_spi_ctr,f,c
  4027  000080  2A24               	incf	_spi_ctr+1,f,c
  4028                           
  4029                           ;main.c: 158: if (spi_ctr >= Vet_Total )
  4030  000082  5024               	movf	_spi_ctr+1,w,c
  4031  000084  E104               	bnz	i2u83_40
  4032  000086  0E0C               	movlw	12
  4033  000088  5C23               	subwf	_spi_ctr,w,c
  4034  00008A  A0D8               	btfss	status,0,c
  4035  00008C  D041               	goto	i2l126
  4036  00008E                     i2u83_40:
  4037                           
  4038                           ;main.c: 159: {
  4039                           ;main.c: 160: spi_ctr=0;
  4040  00008E  0E00               	movlw	0
  4041  000090  6E24               	movwf	_spi_ctr+1,c
  4042  000092  0E00               	movlw	0
  4043  000094  6E23               	movwf	_spi_ctr,c
  4044                           
  4045                           ;main.c: 161: rotacao = Make16(valor[Vet_Rot1],valor[Vet_Rot2]);
  4046  000096  C07C  F026         	movff	_valor+2,Make16@data2
  4047  00009A  0100               	movlb	0	; () banked
  4048  00009C  517A               	movf	_valor& (0+255),w,b
  4049  00009E  ECCF  F00D         	call	_Make16
  4050  0000A2  C026  F00D         	movff	?_Make16,_rotacao
  4051  0000A6  C027  F00E         	movff	?_Make16+1,_rotacao+1
  4052                           
  4053                           ;main.c: 162: Rot2 = rotacao - 100;
  4054  0000AA  0E9C               	movlw	156
  4055  0000AC  240D               	addwf	_rotacao,w,c
  4056  0000AE  6E0B               	movwf	_Rot2,c
  4057  0000B0  0EFF               	movlw	255
  4058  0000B2  200E               	addwfc	_rotacao+1,w,c
  4059  0000B4  6E0C               	movwf	_Rot2+1,c
  4060                           
  4061                           ;main.c: 163: pedal_ad = valor[Vet_Pedal];
  4062  0000B6  C07E  F021         	movff	_valor+4,_pedal_ad
  4063  0000BA  C07F  F022         	movff	_valor+5,_pedal_ad+1
  4064                           
  4065                           ;main.c: 164: map = valor[Vet_MAP];
  4066  0000BE  C080  F01F         	movff	_valor+6,_map
  4067  0000C2  C081  F020         	movff	_valor+7,_map+1
  4068                           
  4069                           ;main.c: 165: tempo_bob = valor[Vet_TmrBob];
  4070  0000C6  C082  F01B         	movff	_valor+8,_tempo_bob
  4071  0000CA  C083  F01C         	movff	_valor+9,_tempo_bob+1
  4072                           
  4073                           ;main.c: 166: tempo_inj = Make16(valor[Vet_TmrInj1],valor[Vet_TmrInj2]);
  4074  0000CE  C086  F026         	movff	_valor+12,Make16@data2
  4075  0000D2  0100               	movlb	0	; () banked
  4076  0000D4  5184               	movf	(_valor+10)& (0+255),w,b
  4077  0000D6  ECCF  F00D         	call	_Make16
  4078  0000DA  C026  F019         	movff	?_Make16,_tempo_inj
  4079  0000DE  C027  F01A         	movff	?_Make16+1,_tempo_inj+1
  4080                           
  4081                           ;main.c: 167: t_ar_com = valor[Vet_TempAr];
  4082  0000E2  C088  F015         	movff	_valor+14,_t_ar_com
  4083  0000E6  C089  F016         	movff	_valor+15,_t_ar_com+1
  4084                           
  4085                           ;main.c: 168: t_agua = valor[Vet_TempAg] + 12;
  4086  0000EA  0E0C               	movlw	12
  4087  0000EC  0100               	movlb	0	; () banked
  4088  0000EE  258A               	addwf	(_valor+16)& (0+255),w,b
  4089  0000F0  6E13               	movwf	_t_agua,c
  4090  0000F2  0E00               	movlw	0
  4091  0000F4  218B               	addwfc	(_valor+17)& (0+255),w,b
  4092  0000F6  6E14               	movwf	_t_agua+1,c
  4093                           
  4094                           ; BSR set to: 0
  4095                           ;main.c: 169: ref_vb = valor[Vet_VB];
  4096  0000F8  C08C  F017         	movff	_valor+18,_ref_vb
  4097  0000FC  C08D  F018         	movff	_valor+19,_ref_vb+1
  4098                           
  4099                           ; BSR set to: 0
  4100                           ;main.c: 170: Sensor_comb = valor[Vet_Comb];
  4101  000100  C08E  F011         	movff	_valor+20,_Sensor_comb
  4102  000104  C08F  F012         	movff	_valor+21,_Sensor_comb+1
  4103                           
  4104                           ; BSR set to: 0
  4105                           ;main.c: 171: Estequiometria = valor[Vet_Esteq];
  4106  000108  C090  F00F         	movff	_valor+22,_Estequiometria
  4107  00010C  C091  F010         	movff	_valor+23,_Estequiometria+1
  4108  000110                     i2l126:
  4109                           
  4110                           ;main.c: 172: }
  4111                           ;main.c: 173: (PIE1bits.SSP1IE = 1);
  4112                           
  4113                           ; BSR set to: 0
  4114  000110  869D               	bsf	3997,3,c	;volatile
  4115  000112                     i2l125:
  4116                           
  4117                           ;main.c: 174: }
  4118                           ;main.c: 176: if(PIR2bits.TMR3IF && PIE2bits.TMR3IE)
  4119  000112  B2A1               	btfsc	4001,1,c	;volatile
  4120  000114  A2A0               	btfss	4000,1,c	;volatile
  4121  000116  D031               	goto	i2u92_45
  4122                           
  4123                           ;main.c: 177: {
  4124                           ;main.c: 178: (PIR2bits.TMR3IF = 0);
  4125  000118  92A1               	bcf	4001,1,c	;volatile
  4126                           
  4127                           ;main.c: 179: Set_Timer3(55535);
  4128  00011A  0ED8               	movlw	216
  4129  00011C  6E27               	movwf	i2Set_Timer3@data_timer+1,c
  4130  00011E  0EEF               	movlw	239
  4131  000120  6E26               	movwf	i2Set_Timer3@data_timer,c
  4132  000122  EC18  F00E         	call	i2_Set_Timer3	;wreg free
  4133                           
  4134                           ;main.c: 181: if(CountCANRot) CountCANRot--;
  4135  000126  5007               	movf	_CountCANRot,w,c
  4136  000128  1008               	iorwf	_CountCANRot+1,w,c
  4137  00012A  B4D8               	btfsc	status,2,c
  4138  00012C  D003               	goto	i2l128
  4139  00012E  0607               	decf	_CountCANRot,f,c
  4140  000130  A0D8               	btfss	status,0,c
  4141  000132  0608               	decf	_CountCANRot+1,f,c
  4142  000134                     i2l128:
  4143                           
  4144                           ;main.c: 182: if(CountCANTemp) CountCANTemp--;
  4145  000134  5005               	movf	_CountCANTemp,w,c
  4146  000136  1006               	iorwf	_CountCANTemp+1,w,c
  4147  000138  B4D8               	btfsc	status,2,c
  4148  00013A  D003               	goto	i2l129
  4149  00013C  0605               	decf	_CountCANTemp,f,c
  4150  00013E  A0D8               	btfss	status,0,c
  4151  000140  0606               	decf	_CountCANTemp+1,f,c
  4152  000142                     i2l129:
  4153                           
  4154                           ;main.c: 183: if(CountSerial) CountSerial--;
  4155  000142  5003               	movf	_CountSerial,w,c
  4156  000144  1004               	iorwf	_CountSerial+1,w,c
  4157  000146  B4D8               	btfsc	status,2,c
  4158  000148  D003               	goto	i2l130
  4159  00014A  0603               	decf	_CountSerial,f,c
  4160  00014C  A0D8               	btfss	status,0,c
  4161  00014E  0604               	decf	_CountSerial+1,f,c
  4162  000150                     i2l130:
  4163                           
  4164                           ;main.c: 184: if(TimeUpdate) TimeUpdate--;
  4165  000150  5001               	movf	_TimeUpdate,w,c
  4166  000152  1002               	iorwf	_TimeUpdate+1,w,c
  4167  000154  B4D8               	btfsc	status,2,c
  4168  000156  D003               	goto	i2l131
  4169  000158  0601               	decf	_TimeUpdate,f,c
  4170  00015A  A0D8               	btfss	status,0,c
  4171  00015C  0602               	decf	_TimeUpdate+1,f,c
  4172  00015E                     i2l131:
  4173                           
  4174                           ;main.c: 186: if(!CountSerial)
  4175  00015E  5003               	movf	_CountSerial,w,c
  4176  000160  1004               	iorwf	_CountSerial+1,w,c
  4177  000162  A4D8               	btfss	status,2,c
  4178  000164  D00A               	goto	i2u92_45
  4179                           
  4180                           ;main.c: 187: {
  4181                           ;main.c: 188: CountSerial = 15;
  4182  000166  0E00               	movlw	0
  4183  000168  6E04               	movwf	_CountSerial+1,c
  4184  00016A  0E0F               	movlw	15
  4185  00016C  6E03               	movwf	_CountSerial,c
  4186                           
  4187                           ;main.c: 189: Select_Data++;
  4188  00016E  2A25               	incf	_Select_Data,f,c
  4189                           
  4190                           ;main.c: 190: Linha_15 = PORTBbits.RB0;
  4191  000170  A081               	btfss	3969,0,c	;volatile
  4192  000172  D002               	goto	i2u91_40
  4193  000174  8045               	bsf	_Linha_15/(0+8),_Linha_15& (0+7),c
  4194  000176  D001               	goto	i2u92_45
  4195  000178                     i2u91_40:
  4196  000178  9045               	bcf	_Linha_15/(0+8),_Linha_15& (0+7),c
  4197  00017A                     i2u92_45:
  4198  00017A  C03E  F049         	movff	??_isr+19,btemp+3
  4199  00017E  C03D  F048         	movff	??_isr+18,btemp+2
  4200  000182  C03C  F047         	movff	??_isr+17,btemp+1
  4201  000186  C03B  F046         	movff	??_isr+16,btemp
  4202  00018A  C03A  FFF5         	movff	??_isr+15,tablat
  4203  00018E  C039  FFF8         	movff	??_isr+14,tblptru
  4204  000192  C038  FFF7         	movff	??_isr+13,tblptrh
  4205  000196  C037  FFF6         	movff	??_isr+12,tblptrl
  4206  00019A  C036  FFF4         	movff	??_isr+11,prodh
  4207  00019E  C035  FFF3         	movff	??_isr+10,prodl
  4208  0001A2  C034  FFDA         	movff	??_isr+9,fsr2h
  4209  0001A6  C033  FFD9         	movff	??_isr+8,fsr2l
  4210  0001AA  C032  FFE2         	movff	??_isr+7,fsr1h
  4211  0001AE  C031  FFE1         	movff	??_isr+6,fsr1l
  4212  0001B2  C030  FFEA         	movff	??_isr+5,fsr0h
  4213  0001B6  C02F  FFE9         	movff	??_isr+4,fsr0l
  4214  0001BA  C02E  FFFB         	movff	??_isr+3,pclatu
  4215  0001BE  C02D  FFFA         	movff	??_isr+2,pclath
  4216  0001C2  9246               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4217  0001C4  0011               	retfie		f
  4218  0001C6                     __end_of_isr:
  4219                           	opt stack 0
  4220                           pclatu	equ	0xFFB
  4221                           pclath	equ	0xFFA
  4222                           tblptru	equ	0xFF8
  4223                           tblptrh	equ	0xFF7
  4224                           tblptrl	equ	0xFF6
  4225                           tablat	equ	0xFF5
  4226                           prodh	equ	0xFF4
  4227                           prodl	equ	0xFF3
  4228                           intcon	equ	0xFF2
  4229                           postinc0	equ	0xFEE
  4230                           fsr0h	equ	0xFEA
  4231                           fsr0l	equ	0xFE9
  4232                           wreg	equ	0xFE8
  4233                           postdec1	equ	0xFE5
  4234                           fsr1h	equ	0xFE2
  4235                           fsr1l	equ	0xFE1
  4236                           postinc2	equ	0xFDE
  4237                           postdec2	equ	0xFDD
  4238                           fsr2h	equ	0xFDA
  4239                           fsr2l	equ	0xFD9
  4240                           status	equ	0xFD8
  4241                           
  4242 ;; *************** function i2_Set_Timer3 *****************
  4243 ;; Defined at:
  4244 ;;		line 71 in file "TIMERS_XC8.c"
  4245 ;; Parameters:    Size  Location     Type
  4246 ;;  data_timer      2    0[COMRAM] unsigned int 
  4247 ;; Auto vars:     Size  Location     Type
  4248 ;;		None
  4249 ;; Return value:  Size  Location     Type
  4250 ;;                  1    wreg      void 
  4251 ;; Registers used:
  4252 ;;		wreg, status,2
  4253 ;; Tracked objects:
  4254 ;;		On entry : 0/0
  4255 ;;		On exit  : 0/0
  4256 ;;		Unchanged: 0/0
  4257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4258 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4261 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4262 ;;Total ram usage:        2 bytes
  4263 ;; Hardware stack levels used:    1
  4264 ;; This function calls:
  4265 ;;		Nothing
  4266 ;; This function is called by:
  4267 ;;		_isr
  4268 ;; This function uses a non-reentrant model
  4269 ;;
  4270                           
  4271                           	psect	text25
  4272  001C30                     __ptext25:
  4273                           	opt stack 0
  4274  001C30                     i2_Set_Timer3:
  4275                           	opt stack 25
  4276                           
  4277                           ;TIMERS_XC8.c: 73: TMR3H = data_timer >> 8;
  4278                           
  4279                           ;incstack = 0
  4280  001C30  5027               	movf	i2Set_Timer3@data_timer+1,w,c
  4281  001C32  6EB3               	movwf	4019,c	;volatile
  4282                           
  4283                           ;TIMERS_XC8.c: 74: TMR3L = data_timer & 0x00FF;
  4284  001C34  C026  FFB2         	movff	i2Set_Timer3@data_timer,4018	;volatile
  4285  001C38  0012               	return		;funcret
  4286  001C3A                     __end_ofi2_Set_Timer3:
  4287                           	opt stack 0
  4288                           pclatu	equ	0xFFB
  4289                           pclath	equ	0xFFA
  4290                           tblptru	equ	0xFF8
  4291                           tblptrh	equ	0xFF7
  4292                           tblptrl	equ	0xFF6
  4293                           tablat	equ	0xFF5
  4294                           prodh	equ	0xFF4
  4295                           prodl	equ	0xFF3
  4296                           intcon	equ	0xFF2
  4297                           postinc0	equ	0xFEE
  4298                           fsr0h	equ	0xFEA
  4299                           fsr0l	equ	0xFE9
  4300                           wreg	equ	0xFE8
  4301                           postdec1	equ	0xFE5
  4302                           fsr1h	equ	0xFE2
  4303                           fsr1l	equ	0xFE1
  4304                           postinc2	equ	0xFDE
  4305                           postdec2	equ	0xFDD
  4306                           fsr2h	equ	0xFDA
  4307                           fsr2l	equ	0xFD9
  4308                           status	equ	0xFD8
  4309                           
  4310 ;; *************** function _SLAVE_SPI_READ1 *****************
  4311 ;; Defined at:
  4312 ;;		line 83 in file "SPI_XC8.c"
  4313 ;; Parameters:    Size  Location     Type
  4314 ;;		None
  4315 ;; Auto vars:     Size  Location     Type
  4316 ;;  data            1    0[COMRAM] unsigned char 
  4317 ;; Return value:  Size  Location     Type
  4318 ;;                  1    wreg      unsigned char 
  4319 ;; Registers used:
  4320 ;;		wreg, status,2
  4321 ;; Tracked objects:
  4322 ;;		On entry : 0/0
  4323 ;;		On exit  : 0/0
  4324 ;;		Unchanged: 0/0
  4325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4327 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4329 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4330 ;;Total ram usage:        1 bytes
  4331 ;; Hardware stack levels used:    1
  4332 ;; This function calls:
  4333 ;;		Nothing
  4334 ;; This function is called by:
  4335 ;;		_isr
  4336 ;; This function uses a non-reentrant model
  4337 ;;
  4338                           
  4339                           	psect	text26
  4340  001C3A                     __ptext26:
  4341                           	opt stack 0
  4342  001C3A                     _SLAVE_SPI_READ1:
  4343                           	opt stack 25
  4344                           
  4345                           ;SPI_XC8.c: 86: unsigned char data;
  4346                           ;SPI_XC8.c: 87: data = SSP1BUF;
  4347                           
  4348                           ;incstack = 0
  4349  001C3A  CFC9 F026          	movff	4041,SLAVE_SPI_READ1@data	;volatile
  4350                           
  4351                           ;SPI_XC8.c: 88: return(data);
  4352  001C3E  5026               	movf	SLAVE_SPI_READ1@data,w,c
  4353  001C40  0012               	return	
  4354  001C42                     __end_of_SLAVE_SPI_READ1:
  4355                           	opt stack 0
  4356                           pclatu	equ	0xFFB
  4357                           pclath	equ	0xFFA
  4358                           tblptru	equ	0xFF8
  4359                           tblptrh	equ	0xFF7
  4360                           tblptrl	equ	0xFF6
  4361                           tablat	equ	0xFF5
  4362                           prodh	equ	0xFF4
  4363                           prodl	equ	0xFF3
  4364                           intcon	equ	0xFF2
  4365                           postinc0	equ	0xFEE
  4366                           fsr0h	equ	0xFEA
  4367                           fsr0l	equ	0xFE9
  4368                           wreg	equ	0xFE8
  4369                           postdec1	equ	0xFE5
  4370                           fsr1h	equ	0xFE2
  4371                           fsr1l	equ	0xFE1
  4372                           postinc2	equ	0xFDE
  4373                           postdec2	equ	0xFDD
  4374                           fsr2h	equ	0xFDA
  4375                           fsr2l	equ	0xFD9
  4376                           status	equ	0xFD8
  4377                           
  4378 ;; *************** function _Make16 *****************
  4379 ;; Defined at:
  4380 ;;		line 195 in file "main.c"
  4381 ;; Parameters:    Size  Location     Type
  4382 ;;  data1           1    wreg     unsigned char 
  4383 ;;  data2           1    0[COMRAM] unsigned char 
  4384 ;; Auto vars:     Size  Location     Type
  4385 ;;  data1           1    4[COMRAM] unsigned char 
  4386 ;; Return value:  Size  Location     Type
  4387 ;;                  2    0[COMRAM] unsigned int 
  4388 ;; Registers used:
  4389 ;;		wreg, status,2, status,0
  4390 ;; Tracked objects:
  4391 ;;		On entry : 0/0
  4392 ;;		On exit  : 0/0
  4393 ;;		Unchanged: 0/0
  4394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4395 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4396 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4397 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4398 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4399 ;;Total ram usage:        5 bytes
  4400 ;; Hardware stack levels used:    1
  4401 ;; This function calls:
  4402 ;;		Nothing
  4403 ;; This function is called by:
  4404 ;;		_isr
  4405 ;; This function uses a non-reentrant model
  4406 ;;
  4407                           
  4408                           	psect	text27
  4409  001B9E                     __ptext27:
  4410                           	opt stack 0
  4411  001B9E                     _Make16:
  4412                           	opt stack 25
  4413                           
  4414                           ;incstack = 0
  4415                           ;Make16@data1 stored from wreg
  4416  001B9E  6E2A               	movwf	Make16@data1,c
  4417                           
  4418                           ;main.c: 197: return ((data1 << 8) | data2);
  4419  001BA0  5026               	movf	Make16@data2,w,c
  4420  001BA2  C02A  F028         	movff	Make16@data1,??_Make16
  4421  001BA6  6A29               	clrf	(??_Make16+1)& (0+255),c
  4422  001BA8  C028  F029         	movff	??_Make16,??_Make16+1
  4423  001BAC  6A28               	clrf	??_Make16,c
  4424  001BAE  1028               	iorwf	??_Make16,w,c
  4425  001BB0  6E26               	movwf	?_Make16,c
  4426  001BB2  5029               	movf	??_Make16+1,w,c
  4427  001BB4  6E27               	movwf	?_Make16+1,c
  4428  001BB6  0012               	return	
  4429  001BB8                     __end_of_Make16:
  4430                           	opt stack 0
  4431                           pclatu	equ	0xFFB
  4432                           pclath	equ	0xFFA
  4433                           tblptru	equ	0xFF8
  4434                           tblptrh	equ	0xFF7
  4435                           tblptrl	equ	0xFF6
  4436                           tablat	equ	0xFF5
  4437                           prodh	equ	0xFF4
  4438                           prodl	equ	0xFF3
  4439                           intcon	equ	0xFF2
  4440                           postinc0	equ	0xFEE
  4441                           fsr0h	equ	0xFEA
  4442                           fsr0l	equ	0xFE9
  4443                           wreg	equ	0xFE8
  4444                           postdec1	equ	0xFE5
  4445                           fsr1h	equ	0xFE2
  4446                           fsr1l	equ	0xFE1
  4447                           postinc2	equ	0xFDE
  4448                           postdec2	equ	0xFDD
  4449                           fsr2h	equ	0xFDA
  4450                           fsr2l	equ	0xFD9
  4451                           status	equ	0xFD8
  4452                           pclatu	equ	0xFFB
  4453                           pclath	equ	0xFFA
  4454                           tblptru	equ	0xFF8
  4455                           tblptrh	equ	0xFF7
  4456                           tblptrl	equ	0xFF6
  4457                           tablat	equ	0xFF5
  4458                           prodh	equ	0xFF4
  4459                           prodl	equ	0xFF3
  4460                           intcon	equ	0xFF2
  4461                           postinc0	equ	0xFEE
  4462                           fsr0h	equ	0xFEA
  4463                           fsr0l	equ	0xFE9
  4464                           wreg	equ	0xFE8
  4465                           postdec1	equ	0xFE5
  4466                           fsr1h	equ	0xFE2
  4467                           fsr1l	equ	0xFE1
  4468                           postinc2	equ	0xFDE
  4469                           postdec2	equ	0xFDD
  4470                           fsr2h	equ	0xFDA
  4471                           fsr2l	equ	0xFD9
  4472                           status	equ	0xFD8
  4473                           
  4474                           	psect	rparam
  4475  0000                     pclatu	equ	0xFFB
  4476                           pclath	equ	0xFFA
  4477                           tblptru	equ	0xFF8
  4478                           tblptrh	equ	0xFF7
  4479                           tblptrl	equ	0xFF6
  4480                           tablat	equ	0xFF5
  4481                           prodh	equ	0xFF4
  4482                           prodl	equ	0xFF3
  4483                           intcon	equ	0xFF2
  4484                           postinc0	equ	0xFEE
  4485                           fsr0h	equ	0xFEA
  4486                           fsr0l	equ	0xFE9
  4487                           wreg	equ	0xFE8
  4488                           postdec1	equ	0xFE5
  4489                           fsr1h	equ	0xFE2
  4490                           fsr1l	equ	0xFE1
  4491                           postinc2	equ	0xFDE
  4492                           postdec2	equ	0xFDD
  4493                           fsr2h	equ	0xFDA
  4494                           fsr2l	equ	0xFD9
  4495                           status	equ	0xFD8
  4496                           
  4497                           	psect	temp
  4498  000046                     btemp:
  4499                           	opt stack 0
  4500  000046                     	ds	1
  4501  0000                     int$flags	set	btemp
  4502  0000                     wtemp6	set	btemp+1
  4503                           pclatu	equ	0xFFB
  4504                           pclath	equ	0xFFA
  4505                           tblptru	equ	0xFF8
  4506                           tblptrh	equ	0xFF7
  4507                           tblptrl	equ	0xFF6
  4508                           tablat	equ	0xFF5
  4509                           prodh	equ	0xFF4
  4510                           prodl	equ	0xFF3
  4511                           intcon	equ	0xFF2
  4512                           postinc0	equ	0xFEE
  4513                           fsr0h	equ	0xFEA
  4514                           fsr0l	equ	0xFE9
  4515                           wreg	equ	0xFE8
  4516                           postdec1	equ	0xFE5
  4517                           fsr1h	equ	0xFE2
  4518                           fsr1l	equ	0xFE1
  4519                           postinc2	equ	0xFDE
  4520                           postdec2	equ	0xFDD
  4521                           fsr2h	equ	0xFDA
  4522                           fsr2l	equ	0xFD9
  4523                           status	equ	0xFD8


Data Sizes:
    Strings     77
    Constant    0
    Data        4
    BSS         91
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     31      69
    BANK0           160     24      82
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_12(CODE[7]), STR_11(CODE[7]), STR_10(CODE[7]), STR_9(CODE[7]), 
		 -> STR_8(CODE[7]), STR_7(CODE[7]), STR_6(CODE[7]), STR_5(CODE[7]), 
		 -> STR_4(CODE[7]), STR_3(CODE[7]), STR_2(CODE[7]), STR_1(CODE[7]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_12(CODE[7]), STR_11(CODE[7]), STR_10(CODE[7]), STR_9(CODE[7]), 
		 -> STR_8(CODE[7]), STR_7(CODE[7]), STR_6(CODE[7]), STR_5(CODE[7]), 
		 -> STR_4(CODE[7]), STR_3(CODE[7]), STR_2(CODE[7]), STR_1(CODE[7]), 

    Putc_Text_TX1@frase	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_12(CODE[7]), STR_11(CODE[7]), STR_10(CODE[7]), STR_9(CODE[7]), 
		 -> STR_8(CODE[7]), STR_7(CODE[7]), STR_6(CODE[7]), STR_5(CODE[7]), 
		 -> STR_4(CODE[7]), STR_3(CODE[7]), STR_2(CODE[7]), STR_1(CODE[7]), 


Critical Paths under _main in COMRAM

    _main->_PutRXTempMotor
    _main->_Update_CurrentValue
    _Putc_Text_TX1->_strlen
    _Putc_TX1_Data->___lwmod
    _PutRXTempMotor->___lwdiv
    _PutRXRotation->_CAN_SPI2_WRITE
    _RESET_CAN->_MASTER_SPI_WRITE2
    _Init1_RS232->___aldiv
    _CONFIG_MCP2515->_CAN_SPI2_WRITE
    _CAN_SPI2_WRITE->_MASTER_SPI_WRITE2

Critical Paths under _isr in COMRAM

    _isr->_Make16

Critical Paths under _main in BANK0

    _main->_ConfigureHW
    _Putc_TX1_Data->___lwdiv
    _PutRXTempMotor->___lwdiv
    _ConfigureHW->_Init1_RS232
    _Init1_RS232->___aldiv

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   21431
                                             21 BANK0      3     3      0
                        _ConfigureHW
                      _PutRXRotation
                     _PutRXTempMotor
                      _Putc_TX1_Data
                      _Putc_Text_TX1
                         _Set_Timer3
                _Update_CurrentValue
                    _Update_OldValue
 ---------------------------------------------------------------------------------
 (1) _Update_OldValue                                      4     0      4    1502
                                             25 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _Update_CurrentValue                                  6     2      4    1899
                                             25 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Set_Timer3                                           2     0      2     207
                                             25 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Putc_Text_TX1                                        6     4      2    1585
                                              0 BANK0      6     4      2
                           _Putc_TX1
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     310
                                             25 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _Putc_TX1_Data                                        7     5      2    3779
                                              3 BANK0      7     5      2
                           _Putc_TX1
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     952
                                             25 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) _Putc_TX1                                             1     1      0      31
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PutRXTempMotor                                       4     2      2    4145
                                             29 COMRAM     2     0      2
                                              3 BANK0      2     2      0
                     _CAN_SPI2_WRITE
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4    1141
                                             25 COMRAM     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _PutRXRotation                                        4     2      2    3004
                                             28 COMRAM     2     0      2
                                              0 BANK0      2     2      0
                     _CAN_SPI2_WRITE
 ---------------------------------------------------------------------------------
 (1) _ConfigureHW                                          1     1      0    5177
                                             20 BANK0      1     1      0
                     _CONFIG_MCP2515
                      _Config_Timer1
                      _Config_Timer3
                        _Init1_RS232
                         _No_Analogs
                          _RESET_CAN
                        _SPI_MASTER2
                         _SPI_SLAVE1
 ---------------------------------------------------------------------------------
 (2) _SPI_SLAVE1                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI_MASTER2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _RESET_CAN                                            0     0      0      31
                  _MASTER_SPI_WRITE2
 ---------------------------------------------------------------------------------
 (2) _No_Analogs                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Init1_RS232                                         12     6      6    2263
                                              8 BANK0     12     6      6
                            ___aldiv
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8    1885
                                             25 COMRAM     6     6      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (2) _Config_Timer3                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Config_Timer1                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CONFIG_MCP2515                                       0     0      0    2883
                     _CAN_SPI2_WRITE
 ---------------------------------------------------------------------------------
 (2) _CAN_SPI2_WRITE                                       2     1      1    2883
                                             26 COMRAM     2     1      1
                  _MASTER_SPI_WRITE2
 ---------------------------------------------------------------------------------
 (3) _MASTER_SPI_WRITE2                                    1     1      0      31
                                             25 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 20    20      0     289
                                              5 COMRAM    20    20      0
                             _Make16
                    _SLAVE_SPI_READ1
                       i2_Set_Timer3
 ---------------------------------------------------------------------------------
 (6) i2_Set_Timer3                                         2     0      2      70
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (6) _SLAVE_SPI_READ1                                      1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Make16                                               5     3      2     196
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureHW
     _CONFIG_MCP2515
       _CAN_SPI2_WRITE
         _MASTER_SPI_WRITE2
     _Config_Timer1
     _Config_Timer3
     _Init1_RS232
       ___aldiv
     _No_Analogs
     _RESET_CAN
       _MASTER_SPI_WRITE2
     _SPI_MASTER2
     _SPI_SLAVE1
   _PutRXRotation
     _CAN_SPI2_WRITE
       _MASTER_SPI_WRITE2
   _PutRXTempMotor
     _CAN_SPI2_WRITE
       _MASTER_SPI_WRITE2
     ___lwdiv
   _Putc_TX1_Data
     _Putc_TX1
     ___lwdiv
     ___lwmod
   _Putc_Text_TX1
     _Putc_TX1
     _strlen
   _Set_Timer3
   _Update_CurrentValue
   _Update_OldValue

 _isr (ROOT)
   _Make16
   _SLAVE_SPI_READ1
   i2_Set_Timer3

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     18      52       5       51.3%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     1F      45       1       73.4%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      97      12        0.0%
DATA                 0      0      97       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri May 11 17:10:49 2018

               ??_Init1_RS232 0045         ??_Update_CurrentValue 0043                  __CFG_CP0$OFF 000000  
                __CFG_CP1$OFF 000000                           l170 1438                           l162 1082  
                         l171 1128                           l164 10A2                           l253 1630  
                         l181 1258                           l165 10BE                           l190 1388  
                         l191 13AA                           l183 12A4                           l175 1174  
                         l167 10E0                           l264 1BD8                           l193 13C8  
                         l185 12F0                           l177 11C0                           l275 19E0  
                         l195 1400                           l187 133C                           l179 120C  
                         l276 19B8                           l630 1704                           l633 1744  
                         l538 1C20                           l634 1752                           l626 16CA  
                         l635 1768                           l627 16E2                           l629 1710  
                         _BAT 00AE                           l974 196A                           l975 1962  
                         l984 1A48                           l985 1A40                           l978 198A  
                         l979 1994                           l988 1A60                           l989 1A6A  
                __CFG_CPB$OFF 000000                  __CFG_CPD$OFF 000000                           _map 001F  
                         _isr 0008                           prod 000FF3                           wreg 000FE8  
             ??_Putc_Text_TX1 0098                  __CFG_LVP$OFF 000000              PutRXRotation@Rot 0042  
                        l1118 1A82                          l1119 1A7E                          l2942 10D8  
                        ?_isr 0026                          STR_1 1024                          STR_2 1016  
                        STR_3 1032                          STR_4 102B                          STR_5 1039  
                        STR_6 1047                          STR_7 100F                          STR_8 101D  
                        STR_9 1040                          u1300 1B3E                          u1301 1B3A  
                        u1310 1B40                          u1250 196E                          u1180 1714  
                        u1280 1A4C                          u1380 111C                          u1607 1ACA  
                        u1617 1AD8                          u1627 1AE6                          u1547 105C  
                        u1557 1BDE                          u1567 1928                          u1577 193E  
                        u1587 1B74                          u1597 1ABA                          _TMR2 000FBC  
                        _TMR4 000F53                          _TMR6 000F4C                          _Rot2 000B  
     __size_of_CONFIG_MCP2515 0034                          _main 1050                          fsr0h 000FEA  
                        fsr1h 000FE2                          fsr2h 000FDA                          fsr0l 000FE9  
                        fsr1l 000FE1                          fsr2l 000FD9                          btemp 0046  
                        prodh 000FF4                          prodl 000FF3                          start 01C6  
               __CFG_IESO$OFF 000000             ??_Update_OldValue 0043                  ___param_bank 000000  
                       ??_isr 002B           __end_of_ConfigureHW 194A                  _BAUDCON1bits 000FB8  
                _BAUDCON2bits 000F70            __size_of_RESET_CAN 001A               __end_of___aldiv 177A  
                       ?_main 0026                         STR_10 1040                         STR_11 1001  
                       STR_12 1008                         _RC1IE 007CED                         _RC1IF 007CF5  
                       _RC2IE 007D1D                         _RC2IF 007D25               __end_of___lwdiv 199E  
      MASTER_SPI_WRITE2@dados 003F               __end_of___lwmod 1A74                         i2l130 0150  
                       i2l131 015E                         i2l125 0112                         i2l126 0110  
                       i2l128 0134                         i2l129 0142                         _TMR0H 000FD7  
                       _TMR1H 000FCF                         _TX1IE 007CEC                         _TX1IF 007CF4  
                       _TMR0L 000FD6                         _TMR1L 000FCE                         _TMR3H 000FB3  
                       _TX2IE 007D1C                         _TX2IF 007D24                         _TMR3L 000FB2  
                       _TMR5H 000F50                         _TMR5L 000F4F                         _PORTB 000F81  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000           __end_of_Init1_RS232 16AC  
              __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
              __CFG_EBTRB$OFF 000000            CAN_SPI2_WRITE@addr 0041            CAN_SPI2_WRITE@data 0040  
                       _valor 007A                         main@i 00AD                __pbitbssCOMRAM 0228  
  Update_CurrentValue@Current 0041                         pclath 000FFA                         tablat 000FF5  
                       status 000FD8                   ?_SPI_SLAVE1 0026                    _No_Analogs 1BB8  
                       wtemp6 0047                __CFG_FOSC$HSHP 000000               __initialization 19EA  
     Update_OldValue@NewValue 0041                  __end_of_main 148A       __size_of_PutRXTempMotor 00B8  
                      ??_main 00AB                 __activetblptr 000002                __CFG_PLLCFG$ON 000000  
            __end_of_Putc_TX1 1BE6                        _ADRESH 000FC4              ??_CAN_SPI2_WRITE 0041  
                      _ANSELA 000F38                        _ANSELB 000F39                        _ANSELC 000F3A  
                      _ANSELD 000F3B                        _ANSELE 000F3C                        _RCREG1 000FAE  
                      _RCREG2 000F74                        _RCSTA1 000FAB                        _RCSTA2 000F71  
                  _Set_Timer3 1C26                        _SPBRG1 000FAF                        _TMR1IE 007CE8  
                      _TMR3IE 007D01                        _TMR5IE 007BE9                        _SSP1IP 007CFB  
           __end_of_RESET_CAN 1B84                        _TRISA0 007C90                        _TRISB0 007C98  
                      _TRISB1 007C99                        _TRISC0 007CA0                        _TRISB2 007C9A  
                      _TRISC1 007CA1                        _TRISA5 007C95                        _TRISC2 007CA2  
                      _TRISD0 007CA8                        _TRISC3 007CA3                        _TRISD1 007CA9  
                      _TRISC4 007CA4                        _TRISB7 007C9F                        _TRISC5 007CA5  
                      _TRISD3 007CAB                        _TRISC6 007CA6                        _TRISD4 007CAC  
                      _TRISC7 007CA7                        _TRISD6 007CAE                        _TRISD7 007CAF  
                      _TXREG1 000FAD                        _TXREG2 000F73                        _TXSTA1 000FAC  
                      _TXSTA2 000F72                        _Make16 1B9E                        _Lambda 00B0  
                 _ConfigureHW 18D8                __CFG_XINST$OFF 000000                    _TimeUpdate 0001  
             _SLAVE_SPI_READ1 1C3A                     ??___aldiv 003F                __CFG_STVREN$ON 000000  
       __end_of_PutRXRotation 18D8                     ??___lwdiv 0043                     ??___lwmod 0043  
                      _t_agua 0013                        _ref_vb 0017                        clear_0 1A10  
                      clear_1 1A1E                   _Init1_RS232 15B6                   _CountCANRot 0007  
                      _strlen 1A74           __size_of_SPI_SLAVE1 0012                  __mediumconst 0000  
                ?_SPI_MASTER2 0026                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                   _CountSerial 0003                _CONFIG_MCP2515 1AF0  
                  __accesstop 0060       __end_of__initialization 1A24                   ?_No_Analogs 0026  
               ___rparam_used 000001           Init1_RS232@velocity 009E                __pcstackCOMRAM 0026  
                __pidataBANK0 1C42          Update_OldValue@index 003F         __end_of_Config_Timer1 1C0A  
       __end_of_Config_Timer3 1B9E        __end_of_CONFIG_MCP2515 1B24               _Update_OldValue 1B4E  
                  __pbssBANK0 0060                   ?_Set_Timer3 003F         __end_of_Putc_TX1_Data 15B6  
     __end_of_SLAVE_SPI_READ1 1C42                       ?_Make16 0026   __end_of_Update_CurrentValue 1B4E  
                   ?_Putc_TX1 0026                _PutRXTempMotor 177A                       ?_strlen 003F  
         __size_of_No_Analogs 0018                   _Select_Data 0025                       i2u91_40 0178  
                     i2u83_40 008E                       i2u92_45 017A                       _SSP1BUF 000FC9  
                     _SSP2BUF 000F6F               ?_CONFIG_MCP2515 0026         __end_of_Putc_Text_TX1 19EA  
                ??_SPI_SLAVE1 003F               __size_of_Make16 001A                       __Hparam 0000  
      __end_of_PutRXTempMotor 1832                       __Lparam 0000                _Estequiometria 000F  
                     ___aldiv 16AC                    ??_Putc_TX1 003F                       ___lwdiv 194A  
                     ___lwmod 1A32                  __psmallconst 1000                   _Sensor_comb 0011  
                     __pcinit 19EA                       __ramtop 1000                       __ptext0 1050  
                     __ptext1 1B4E                       __ptext2 1B24                       __ptext3 1C26  
                     __ptext4 199E                       __ptext5 1A74                       __ptext6 148A  
                     __ptext7 1A32                       __ptext8 1BD0                       __ptext9 177A  
         __size_of_Set_Timer3 000A                     _T0CONbits 000FD5               __size_of_strlen 003E  
                   _T1CONbits 000FCD       __end_of_Update_OldValue 1B6A                     _T2CONbits 000FBA  
                __size_of_isr 01BE                     _T3CONbits 000FB1            __end_of_SPI_SLAVE1 1BF8  
            ___aldiv@dividend 0096                     _T4CONbits 000F51                  _CountCANTemp 0005  
                   _T5CONbits 000F4E                     _T6CONbits 000F4A                       _spi_ctr 0023  
                     _rotacao 000D          __size_of_SPI_MASTER2 0010          end_of_initialization 1A24  
               __Lmediumconst 0000              ?_SLAVE_SPI_READ1 0026                  ?_ConfigureHW 0026  
             ?_PutRXTempMotor 0043                     _RESET_CAN 1B6A              ___aldiv@quotient 0041  
                     postdec1 000FE5                       postdec2 000FDD                       postinc0 000FEE  
                     postinc2 000FDE                  ?_Init1_RS232 009E                       strlen@s 003F  
                   _PORTBbits 000F81            PutRXTempMotor@Temp 0043        i2Set_Timer3@data_timer 0026  
               ?i2_Set_Timer3 0026                  ??_No_Analogs 003F                __end_of_Make16 1BB8  
                  ?_RESET_CAN 0026              ?_Update_OldValue 003F                __end_of_strlen 1AB2  
          __end_of_No_Analogs 1BD0           start_initialization 19EA                   __end_of_isr 01C6  
                   _Old_Value 0060                ??i2_Set_Timer3 0028        __size_of_PutRXRotation 00A6  
                ??_Set_Timer3 0041                      ??_Make16 0028                     _TempMotor 0009  
     __size_of_CAN_SPI2_WRITE 003E                   __pdataBANK0 00AE             __size_of_Putc_TX1 0016  
           Putc_TX1_Data@data 0099                      ??_strlen 0041            __end_of_Set_Timer3 1C30  
            ??_CONFIG_MCP2515 0042                   __pbssCOMRAM 0001                 __pcstackBANK0 0096  
      __size_of_Config_Timer1 0012        __size_of_Config_Timer3 001A              ___lwdiv@dividend 003F  
                 ??_RESET_CAN 0040                     __pintcode 0008          __size_of_ConfigureHW 0072  
                    ?___aldiv 0096                      ?___lwdiv 003F                      ?___lwmod 003F  
               _PutRXRotation 1832  __size_of_Update_CurrentValue 002A          __size_of_Init1_RS232 00F6  
                 __smallconst 1000        __size_of_Putc_TX1_Data 012C                   _ig_dente_14 001D  
            ___lwdiv@quotient 0097               ___aldiv@divisor 009A              ??_PutRXTempMotor 0099  
             ___aldiv@counter 003F                      _LATAbits 000F89                      _LATCbits 000F8B  
                    _PIE1bits 000F9D                      _PIE2bits 000FA0                      _PIR1bits 000F9E  
                    _PIR2bits 000FA1              __CFG_WDTPS$32768 000000                     _tempo_bob 001B  
                   _tempo_inj 0019                      _SSP1CON1 000FC6                      _SSP2CON1 000F6C  
                    _SSP1STAT 000FC7                      _SSP2STAT 000F6D                ?_PutRXRotation 0042  
               _Config_Timer1 1BF8                 _Config_Timer3 1B84                     _rotacao_4 0092  
      __size_of_Putc_Text_TX1 004C          __end_ofi2_Set_Timer3 1C3A                    _ADCON0bits 000FC2  
                  _ADCON1bits 000FC1                    _ADCON2bits 000FC0          Putc_Text_TX1@tamanho 009A  
           _MASTER_SPI_WRITE2 1C1A                 ??_SPI_MASTER2 003F            ?_MASTER_SPI_WRITE2 0026  
                 _INTCON2bits 000FF1                     copy_data0 19FE                      _Linha_15 0228  
         ??_MASTER_SPI_WRITE2 003F                 _Putc_TX1_Data 148A                _CAN_SPI2_WRITE 1AB2  
                    __Hrparam 0000                      __Lrparam 0000                      _Putc_TX1 1BD0  
    __size_of_SLAVE_SPI_READ1 0008              Putc_TX1_Data@vet 009B              __size_of___aldiv 00CE  
              ?_Config_Timer1 0026                ?_Config_Timer3 0026           SLAVE_SPI_READ1@data 0026  
            __size_of___lwdiv 0054              __size_of___lwmod 0042     __end_of_MASTER_SPI_WRITE2 1C26  
                 Make16@data1 002A                   Make16@data2 0026               ___lwdiv@divisor 0041  
             ___lwdiv@counter 0096                      __ptext10 194A                      __ptext11 1832  
                    __ptext20 1BF8                      __ptext12 18D8                      __ptext21 1AF0  
                    __ptext13 1BE6                      __ptext22 1AB2                      __ptext14 1C0A  
                    __ptext23 1C1A                      __ptext15 1B6A                      __ptext16 1BB8  
                    __ptext25 1C30                      __ptext17 15B6                      __ptext26 1C3A  
                    __ptext18 16AC                      __ptext27 1B9E                      __ptext19 1B84  
               Putc_TX1@valor 003F                 _Putc_Text_TX1 199E           __end_of_SPI_MASTER2 1C1A  
            _Init1_RS232$2651 00A6                      _pedal_ad 0021                 __size_of_main 043A  
              ?_Putc_TX1_Data 0099        __end_of_CAN_SPI2_WRITE 1AF0                      _t_ar_com 0015  
 Update_CurrentValue@boReturn 0043               ??_PutRXRotation 0096                      int$flags 0046  
         Putc_Text_TX1@indice 009B                  _SSP1STATbits 000FC7                  _SSP2STATbits 000F6D  
                  _INTCONbits 000FF2              Init1_RS232@value 00A4          Set_Timer3@data_timer 003F  
              ?_Putc_Text_TX1 0096                      intlevel2 0000      __size_of_Update_OldValue 001C  
            ___lwmod@dividend 003F           _Update_CurrentValue 1B24               ?_CAN_SPI2_WRITE 0040  
             ??_Config_Timer1 003F               ??_Config_Timer3 003F         __size_ofi2_Set_Timer3 000A  
          Putc_Text_TX1@frase 0096          ?_Update_CurrentValue 003F               Init1_RS232@mode 00A2  
  __size_of_MASTER_SPI_WRITE2 000C             ??_SLAVE_SPI_READ1 0026               ___lwmod@divisor 0041  
                    strlen@cp 0043               ___lwmod@counter 0043                  ___aldiv@sign 0040  
                 _SPI_MASTER2 1C0A               ??_Putc_TX1_Data 0044                  i2_Set_Timer3 1C30  
                  _SPI_SLAVE1 1BE6                 ??_ConfigureHW 00AA        Update_CurrentValue@Old 003F  
